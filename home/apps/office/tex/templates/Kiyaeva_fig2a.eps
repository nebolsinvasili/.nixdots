%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPF73D.tmp.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: we
%%CreationDate: 03.07.2020, 14:21:34
%%BoundingBox: 0 0 688 497
%%HiResBoundingBox: 0 0 687.7894 496.8317
%%CropBox: 0 0 687.7894 496.8317
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1027 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 10.1.16 (Windows)"
   dc:format="application/pdf"
   xmp:CreatorTool="Adobe Acrobat 10.1.16"
   xmp:ModifyDate="2020-07-03T14:20:56+04:00"
   xmp:CreateDate="2020-07-03T14:20:56+04:00"
   xmpMM:DocumentID="uuid:e19d7bb3-8f67-44ab-9358-ff032c2d2e6a"
   xmpMM:InstanceID="uuid:5c279e34-58d9-4210-aefa-0e52bde1950e">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Kiyaeva_fig2a-0.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>we</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -496.832 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 496.832 li
687.789 496.832 li
687.789 0 li
cp
clp
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
196.439 428.29 mo
196.439 427.57 li
false sop
/0 
[/DeviceGray] /CSA add_res
.502 gry
@
196.439 424.45 mo
196.439 423.73 li
@
196.439 420.61 mo
196.439 419.89 li
@
196.439 416.77 mo
196.439 416.05 li
@
196.439 412.93 mo
196.439 412.21 li
@
196.439 409.09 mo
196.439 408.37 li
@
196.439 405.25 mo
196.439 404.53 li
@
196.439 401.41 mo
196.439 400.69 li
@
196.439 397.57 mo
196.439 396.85 li
@
196.439 393.73 mo
196.439 393.01 li
@
196.439 389.89 mo
196.439 389.17 li
@
196.439 386.05 mo
196.439 385.33 li
@
196.439 382.21 mo
196.439 381.49 li
@
196.439 378.37 mo
196.439 377.65 li
@
196.439 374.53 mo
196.439 373.81 li
@
196.439 370.69 mo
196.439 369.97 li
@
196.439 366.85 mo
196.439 366.13 li
@
196.439 363.01 mo
196.439 362.29 li
@
196.439 359.17 mo
196.439 358.45 li
@
196.439 355.33 mo
196.439 354.61 li
@
196.439 351.49 mo
196.439 350.77 li
@
196.439 347.65 mo
196.439 346.93 li
@
196.439 343.81 mo
196.439 343.09 li
@
196.439 339.97 mo
196.439 339.25 li
@
196.439 336.13 mo
196.439 335.41 li
@
196.439 332.29 mo
196.439 331.57 li
@
196.439 328.45 mo
196.439 327.73 li
@
196.439 324.61 mo
196.439 323.89 li
@
196.439 320.77 mo
196.439 320.05 li
@
196.439 316.93 mo
196.439 316.21 li
@
196.439 313.09 mo
196.439 312.37 li
@
196.439 309.25 mo
196.439 308.53 li
@
196.439 305.41 mo
196.439 304.69 li
@
196.439 301.57 mo
196.439 300.85 li
@
196.439 297.73 mo
196.439 297.01 li
@
196.439 293.89 mo
196.439 293.17 li
@
196.439 290.05 mo
196.439 289.33 li
@
196.439 286.21 mo
196.439 285.49 li
@
196.439 282.37 mo
196.439 281.65 li
@
196.439 278.53 mo
196.439 277.81 li
@
196.439 274.69 mo
196.439 273.97 li
@
196.439 270.85 mo
196.439 270.13 li
@
196.439 267.01 mo
196.439 266.29 li
@
196.439 263.17 mo
196.439 262.45 li
@
196.439 259.329 mo
196.439 258.609 li
@
196.439 255.489 mo
196.439 254.769 li
@
196.439 251.649 mo
196.439 250.929 li
@
196.439 247.809 mo
196.439 247.09 li
@
196.439 243.97 mo
196.439 243.25 li
@
196.439 240.13 mo
196.439 239.41 li
@
196.439 236.29 mo
196.439 235.57 li
@
196.439 232.45 mo
196.439 231.73 li
@
196.439 228.61 mo
196.439 227.89 li
@
196.439 224.77 mo
196.439 224.05 li
@
196.439 220.93 mo
196.439 220.21 li
@
196.439 217.09 mo
196.439 216.37 li
@
196.439 213.25 mo
196.439 212.53 li
@
196.439 209.41 mo
196.439 208.69 li
@
196.439 205.57 mo
196.439 204.85 li
@
196.439 201.73 mo
196.439 201.01 li
@
196.439 197.89 mo
196.439 197.17 li
@
196.439 194.05 mo
196.439 193.33 li
@
196.439 190.21 mo
196.439 189.49 li
@
196.439 186.37 mo
196.439 185.65 li
@
196.439 182.53 mo
196.439 181.81 li
@
196.439 178.69 mo
196.439 177.97 li
@
196.439 174.85 mo
196.439 174.13 li
@
196.439 171.01 mo
196.439 170.29 li
@
196.439 167.17 mo
196.439 166.45 li
@
196.439 163.33 mo
196.439 162.61 li
@
196.439 159.49 mo
196.439 158.77 li
@
196.439 155.65 mo
196.439 154.93 li
@
196.439 151.81 mo
196.439 151.09 li
@
196.439 147.97 mo
196.439 147.25 li
@
196.439 144.13 mo
196.439 143.41 li
@
196.439 140.29 mo
196.439 139.57 li
@
196.439 136.45 mo
196.439 135.73 li
@
196.439 132.61 mo
196.439 131.89 li
@
196.439 128.77 mo
196.439 128.05 li
@
196.439 124.93 mo
196.439 124.21 li
@
196.439 121.09 mo
196.439 120.37 li
@
196.439 117.25 mo
196.439 116.53 li
@
196.439 113.41 mo
196.439 112.69 li
@
196.439 109.57 mo
196.439 108.85 li
@
196.439 105.73 mo
196.439 105.01 li
@
196.439 101.89 mo
196.439 101.17 li
@
196.439 98.0503 mo
196.439 97.3303 li
@
196.439 94.2103 mo
196.439 93.4903 li
@
196.439 90.3703 mo
196.439 89.6503 li
@
196.439 86.5303 mo
196.439 85.8103 li
@
196.439 82.6903 mo
196.439 81.9703 li
@
196.439 78.8503 mo
196.439 78.1303 li
@
196.439 75.0103 mo
196.439 74.2903 li
@
196.439 71.1703 mo
196.439 70.4503 li
@
196.439 67.3303 mo
196.439 66.6103 li
@
196.439 63.4903 mo
196.439 62.7703 li
@
196.439 59.6503 mo
196.439 58.9303 li
@
196.439 55.8093 mo
196.439 55.0893 li
@
196.439 51.9693 mo
196.439 51.2493 li
@
196.439 48.1293 mo
196.439 47.4093 li
@
196.439 44.2893 mo
196.439 43.5693 li
@
196.439 40.4493 mo
196.439 39.7293 li
@
196.439 36.6093 mo
196.439 35.8893 li
@
196.439 32.7693 mo
196.439 32.0493 li
@
196.439 28.9293 mo
196.439 28.2094 li
@
196.439 25.0893 mo
196.439 24.3694 li
@
196.439 21.2493 mo
196.439 20.5294 li
@
196.439 17.4093 mo
196.439 16.6894 li
@
289.56 428.29 mo
289.56 427.57 li
@
289.56 424.45 mo
289.56 423.73 li
@
289.56 420.61 mo
289.56 419.89 li
@
289.56 416.77 mo
289.56 416.05 li
@
289.56 412.93 mo
289.56 412.21 li
@
289.56 409.09 mo
289.56 408.37 li
@
289.56 405.25 mo
289.56 404.53 li
@
289.56 401.41 mo
289.56 400.69 li
@
289.56 397.57 mo
289.56 396.85 li
@
289.56 393.73 mo
289.56 393.01 li
@
289.56 389.89 mo
289.56 389.17 li
@
289.56 386.05 mo
289.56 385.33 li
@
289.56 382.21 mo
289.56 381.49 li
@
289.56 378.37 mo
289.56 377.65 li
@
289.56 374.53 mo
289.56 373.81 li
@
289.56 370.69 mo
289.56 369.97 li
@
289.56 366.85 mo
289.56 366.13 li
@
289.56 363.01 mo
289.56 362.29 li
@
289.56 359.17 mo
289.56 358.45 li
@
289.56 355.33 mo
289.56 354.61 li
@
289.56 351.49 mo
289.56 350.77 li
@
289.56 347.65 mo
289.56 346.93 li
@
289.56 343.81 mo
289.56 343.09 li
@
289.56 339.97 mo
289.56 339.25 li
@
289.56 336.13 mo
289.56 335.41 li
@
289.56 332.29 mo
289.56 331.57 li
@
289.56 328.45 mo
289.56 327.73 li
@
289.56 324.61 mo
289.56 323.89 li
@
289.56 320.77 mo
289.56 320.05 li
@
289.56 316.93 mo
289.56 316.21 li
@
289.56 313.09 mo
289.56 312.37 li
@
289.56 309.25 mo
289.56 308.53 li
@
289.56 305.41 mo
289.56 304.69 li
@
289.56 301.57 mo
289.56 300.85 li
@
289.56 297.73 mo
289.56 297.01 li
@
289.56 293.891 mo
289.56 293.171 li
@
289.56 290.051 mo
289.56 289.331 li
@
289.56 286.211 mo
289.56 285.491 li
@
289.56 282.371 mo
289.56 281.651 li
@
289.56 278.531 mo
289.56 277.811 li
@
289.56 274.691 mo
289.56 273.971 li
@
289.56 270.851 mo
289.56 270.132 li
@
289.56 267.011 mo
289.56 266.292 li
@
289.56 263.171 mo
289.56 262.452 li
@
289.56 259.33 mo
289.56 258.611 li
@
289.56 255.49 mo
289.56 254.771 li
@
289.56 251.65 mo
289.56 250.931 li
@
289.56 247.811 mo
289.56 247.092 li
@
289.56 243.971 mo
289.56 243.252 li
@
289.56 240.132 mo
289.56 239.412 li
@
289.56 236.292 mo
289.56 235.572 li
@
289.56 232.452 mo
289.56 231.732 li
@
289.56 228.612 mo
289.56 227.892 li
@
289.56 224.772 mo
289.56 224.052 li
@
289.56 220.932 mo
289.56 220.212 li
@
289.56 217.092 mo
289.56 216.372 li
@
289.56 213.252 mo
289.56 212.532 li
@
289.56 209.412 mo
289.56 208.692 li
@
289.56 205.572 mo
289.56 204.852 li
@
289.56 201.732 mo
289.56 201.012 li
@
289.56 197.892 mo
289.56 197.172 li
@
289.56 194.052 mo
289.56 193.332 li
@
289.56 190.212 mo
289.56 189.492 li
@
289.56 186.372 mo
289.56 185.652 li
@
289.56 182.532 mo
289.56 181.812 li
@
289.56 178.692 mo
289.56 177.972 li
@
289.56 174.852 mo
289.56 174.132 li
@
289.56 171.012 mo
289.56 170.292 li
@
289.56 167.172 mo
289.56 166.452 li
@
289.56 163.332 mo
289.56 162.612 li
@
289.56 159.492 mo
289.56 158.772 li
@
289.56 155.652 mo
289.56 154.932 li
@
289.56 151.812 mo
289.56 151.092 li
@
289.56 147.972 mo
289.56 147.252 li
@
289.56 144.132 mo
289.56 143.412 li
@
289.56 140.292 mo
289.56 139.572 li
@
289.56 136.452 mo
289.56 135.732 li
@
289.56 132.612 mo
289.56 131.892 li
@
289.56 128.772 mo
289.56 128.052 li
@
289.56 124.932 mo
289.56 124.212 li
@
289.56 121.092 mo
289.56 120.372 li
@
289.56 117.252 mo
289.56 116.532 li
@
289.56 113.412 mo
289.56 112.692 li
@
289.56 109.572 mo
289.56 108.852 li
@
289.56 105.732 mo
289.56 105.012 li
@
289.56 101.892 mo
289.56 101.172 li
@
289.56 98.0516 mo
289.56 97.3317 li
@
289.56 94.2116 mo
289.56 93.4917 li
@
289.56 90.3716 mo
289.56 89.6517 li
@
289.56 86.5316 mo
289.56 85.8117 li
@
289.56 82.6917 mo
289.56 81.9717 li
@
289.56 78.8517 mo
289.56 78.1317 li
@
289.56 75.011 mo
289.56 74.291 li
@
289.56 71.171 mo
289.56 70.451 li
@
289.56 67.331 mo
289.56 66.611 li
@
289.56 63.491 mo
289.56 62.771 li
@
289.56 59.651 mo
289.56 58.931 li
@
289.56 55.81 mo
289.56 55.09 li
@
289.56 51.97 mo
289.56 51.25 li
@
289.56 48.13 mo
289.56 47.41 li
@
289.56 44.29 mo
289.56 43.57 li
@
289.56 40.45 mo
289.56 39.73 li
@
289.56 36.61 mo
289.56 35.89 li
@
289.56 32.77 mo
289.56 32.05 li
@
289.56 28.93 mo
289.56 28.2101 li
@
289.56 25.09 mo
289.56 24.3701 li
@
289.56 21.25 mo
289.56 20.5301 li
@
289.56 17.41 mo
289.56 16.6901 li
@
382.68 428.291 mo
382.68 427.571 li
@
382.68 424.451 mo
382.68 423.731 li
@
382.68 420.611 mo
382.68 419.891 li
@
382.68 416.771 mo
382.68 416.051 li
@
382.68 412.931 mo
382.68 412.211 li
@
382.68 409.091 mo
382.68 408.371 li
@
382.68 405.251 mo
382.68 404.531 li
@
382.68 401.411 mo
382.68 400.691 li
@
382.68 397.571 mo
382.68 396.851 li
@
382.68 393.731 mo
382.68 393.011 li
@
382.68 389.891 mo
382.68 389.171 li
@
382.68 386.051 mo
382.68 385.331 li
@
382.68 382.211 mo
382.68 381.491 li
@
382.68 378.371 mo
382.68 377.651 li
@
382.68 374.531 mo
382.68 373.811 li
@
382.68 370.691 mo
382.68 369.971 li
@
382.68 366.851 mo
382.68 366.131 li
@
382.68 363.011 mo
382.68 362.291 li
@
382.68 359.171 mo
382.68 358.451 li
@
382.68 355.331 mo
382.68 354.611 li
@
382.68 351.491 mo
382.68 350.771 li
@
382.68 347.651 mo
382.68 346.931 li
@
382.68 343.811 mo
382.68 343.091 li
@
382.68 339.971 mo
382.68 339.251 li
@
382.68 336.131 mo
382.68 335.411 li
@
382.68 332.291 mo
382.68 331.571 li
@
382.68 328.451 mo
382.68 327.731 li
@
382.68 324.611 mo
382.68 323.891 li
@
382.68 320.771 mo
382.68 320.051 li
@
382.68 316.931 mo
382.68 316.211 li
@
382.68 313.091 mo
382.68 312.371 li
@
382.68 309.251 mo
382.68 308.531 li
@
382.68 305.411 mo
382.68 304.691 li
@
382.68 301.571 mo
382.68 300.851 li
@
382.68 297.731 mo
382.68 297.011 li
@
382.68 293.891 mo
382.68 293.171 li
@
382.68 290.051 mo
382.68 289.331 li
@
382.68 286.211 mo
382.68 285.491 li
@
382.68 282.371 mo
382.68 281.651 li
@
382.68 278.531 mo
382.68 277.811 li
@
382.68 274.691 mo
382.68 273.971 li
@
382.68 270.851 mo
382.68 270.131 li
@
382.68 267.011 mo
382.68 266.291 li
@
382.68 263.171 mo
382.68 262.451 li
@
382.68 259.33 mo
382.68 258.61 li
@
382.68 255.49 mo
382.68 254.77 li
@
382.68 251.65 mo
382.68 250.93 li
@
382.68 247.81 mo
382.68 247.091 li
@
382.68 243.971 mo
382.68 243.251 li
@
382.68 240.131 mo
382.68 239.411 li
@
382.68 236.291 mo
382.68 235.571 li
@
382.68 232.451 mo
382.68 231.731 li
@
382.68 228.611 mo
382.68 227.891 li
@
382.68 224.771 mo
382.68 224.051 li
@
382.68 220.931 mo
382.68 220.211 li
@
382.68 217.091 mo
382.68 216.371 li
@
382.68 213.251 mo
382.68 212.531 li
@
382.68 209.411 mo
382.68 208.691 li
@
382.68 205.571 mo
382.68 204.851 li
@
382.68 201.731 mo
382.68 201.011 li
@
382.68 197.891 mo
382.68 197.171 li
@
382.68 194.051 mo
382.68 193.331 li
@
382.68 190.211 mo
382.68 189.491 li
@
382.68 186.371 mo
382.68 185.651 li
@
382.68 182.531 mo
382.68 181.811 li
@
382.68 178.691 mo
382.68 177.971 li
@
382.68 174.851 mo
382.68 174.131 li
@
382.68 171.011 mo
382.68 170.291 li
@
382.68 167.171 mo
382.68 166.451 li
@
382.68 163.331 mo
382.68 162.611 li
@
382.68 159.491 mo
382.68 158.771 li
@
382.68 155.651 mo
382.68 154.931 li
@
382.68 151.811 mo
382.68 151.091 li
@
382.68 147.971 mo
382.68 147.251 li
@
382.68 144.131 mo
382.68 143.411 li
@
382.68 140.291 mo
382.68 139.571 li
@
382.68 136.451 mo
382.68 135.731 li
@
382.68 132.611 mo
382.68 131.891 li
@
382.68 128.771 mo
382.68 128.051 li
@
382.68 124.931 mo
382.68 124.211 li
@
382.68 121.091 mo
382.68 120.371 li
@
382.68 117.251 mo
382.68 116.531 li
@
382.68 113.411 mo
382.68 112.691 li
@
382.68 109.571 mo
382.68 108.851 li
@
382.68 105.731 mo
382.68 105.011 li
@
382.68 101.891 mo
382.68 101.171 li
@
382.68 98.0513 mo
382.68 97.3314 li
@
382.68 94.2113 mo
382.68 93.4914 li
@
382.68 90.3713 mo
382.68 89.6514 li
@
382.68 86.5313 mo
382.68 85.8114 li
@
382.68 82.6913 mo
382.68 81.9714 li
@
382.68 78.8513 mo
382.68 78.1314 li
@
382.68 75.0114 mo
382.68 74.2914 li
@
382.68 71.1714 mo
382.68 70.4514 li
@
382.68 67.3314 mo
382.68 66.6114 li
@
382.68 63.4914 mo
382.68 62.7714 li
@
382.68 59.6514 mo
382.68 58.9314 li
@
382.68 55.8104 mo
382.68 55.0904 li
@
382.68 51.9704 mo
382.68 51.2504 li
@
382.68 48.1304 mo
382.68 47.4104 li
@
382.68 44.2904 mo
382.68 43.5704 li
@
382.68 40.4504 mo
382.68 39.7304 li
@
382.68 36.6104 mo
382.68 35.8904 li
@
382.68 32.7704 mo
382.68 32.0504 li
@
382.68 28.9304 mo
382.68 28.2104 li
@
382.68 25.0904 mo
382.68 24.3704 li
@
382.68 21.2504 mo
382.68 20.5304 li
@
382.68 17.4104 mo
382.68 16.6904 li
@
475.561 428.291 mo
475.561 427.571 li
@
475.561 424.451 mo
475.561 423.731 li
@
475.561 420.611 mo
475.561 419.891 li
@
475.561 416.771 mo
475.561 416.051 li
@
475.561 412.931 mo
475.561 412.211 li
@
475.561 409.091 mo
475.561 408.371 li
@
475.561 405.251 mo
475.561 404.531 li
@
475.561 401.411 mo
475.561 400.691 li
@
475.561 397.571 mo
475.561 396.851 li
@
475.561 393.731 mo
475.561 393.011 li
@
475.561 389.891 mo
475.561 389.171 li
@
475.561 386.051 mo
475.561 385.331 li
@
475.561 382.211 mo
475.561 381.491 li
@
475.561 378.371 mo
475.561 377.651 li
@
475.561 374.531 mo
475.561 373.811 li
@
475.561 370.691 mo
475.561 369.971 li
@
475.561 366.851 mo
475.561 366.131 li
@
475.561 363.011 mo
475.561 362.291 li
@
475.561 359.171 mo
475.561 358.451 li
@
475.561 355.331 mo
475.561 354.611 li
@
475.561 351.491 mo
475.561 350.771 li
@
475.561 347.651 mo
475.561 346.931 li
@
475.561 343.811 mo
475.561 343.091 li
@
475.561 339.971 mo
475.561 339.251 li
@
475.561 336.132 mo
475.561 335.411 li
@
475.561 332.292 mo
475.561 331.572 li
@
475.561 328.452 mo
475.561 327.732 li
@
475.561 324.612 mo
475.561 323.892 li
@
475.561 320.772 mo
475.561 320.052 li
@
475.561 316.932 mo
475.561 316.212 li
@
475.561 313.092 mo
475.561 312.372 li
@
475.561 309.252 mo
475.561 308.532 li
@
475.561 305.412 mo
475.561 304.692 li
@
475.561 301.572 mo
475.561 300.852 li
@
475.561 297.732 mo
475.561 297.012 li
@
475.561 293.892 mo
475.561 293.172 li
@
475.561 290.052 mo
475.561 289.332 li
@
475.561 286.212 mo
475.561 285.492 li
@
475.561 282.372 mo
475.561 281.652 li
@
475.561 278.532 mo
475.561 277.812 li
@
475.561 274.692 mo
475.561 273.972 li
@
475.561 270.852 mo
475.561 270.132 li
@
475.561 267.012 mo
475.561 266.292 li
@
475.561 263.172 mo
475.561 262.452 li
@
475.561 259.331 mo
475.561 258.611 li
@
475.561 255.491 mo
475.561 254.771 li
@
475.561 251.651 mo
475.561 250.931 li
@
475.561 247.811 mo
475.561 247.092 li
@
475.561 243.972 mo
475.561 243.252 li
@
475.561 240.132 mo
475.561 239.412 li
@
475.561 236.292 mo
475.561 235.572 li
@
475.561 232.452 mo
475.561 231.732 li
@
475.561 228.612 mo
475.561 227.892 li
@
475.561 224.772 mo
475.561 224.052 li
@
475.561 220.932 mo
475.561 220.212 li
@
475.561 217.092 mo
475.561 216.372 li
@
475.561 213.252 mo
475.561 212.532 li
@
475.561 209.412 mo
475.561 208.692 li
@
475.561 205.572 mo
475.561 204.852 li
@
475.561 201.732 mo
475.561 201.012 li
@
475.561 197.892 mo
475.561 197.172 li
@
475.561 194.052 mo
475.561 193.332 li
@
475.561 190.212 mo
475.561 189.492 li
@
475.561 186.372 mo
475.561 185.652 li
@
475.561 182.532 mo
475.561 181.812 li
@
475.561 178.692 mo
475.561 177.972 li
@
475.561 174.852 mo
475.561 174.132 li
@
475.561 171.012 mo
475.561 170.292 li
@
475.561 167.172 mo
475.561 166.452 li
@
475.561 163.332 mo
475.561 162.612 li
@
475.561 159.492 mo
475.561 158.772 li
@
475.561 155.652 mo
475.561 154.932 li
@
475.561 151.812 mo
475.561 151.092 li
@
475.561 147.972 mo
475.561 147.252 li
@
475.561 144.132 mo
475.561 143.412 li
@
475.561 140.292 mo
475.561 139.572 li
@
475.561 136.451 mo
475.561 135.731 li
@
475.561 132.611 mo
475.561 131.891 li
@
475.561 128.771 mo
475.561 128.051 li
@
475.561 124.931 mo
475.561 124.211 li
@
475.561 121.091 mo
475.561 120.371 li
@
475.561 117.251 mo
475.561 116.531 li
@
475.561 113.411 mo
475.561 112.691 li
@
475.561 109.571 mo
475.561 108.852 li
@
475.561 105.731 mo
475.561 105.012 li
@
475.561 101.891 mo
475.561 101.172 li
@
475.561 98.052 mo
475.561 97.3321 li
@
475.561 94.212 mo
475.561 93.4921 li
@
475.561 90.372 mo
475.561 89.6521 li
@
475.561 86.532 mo
475.561 85.8121 li
@
475.561 82.692 mo
475.561 81.9721 li
@
475.561 78.8521 mo
475.561 78.1321 li
@
475.561 75.0121 mo
475.561 74.2921 li
@
475.561 71.1721 mo
475.561 70.4521 li
@
475.561 67.3321 mo
475.561 66.6121 li
@
475.561 63.4921 mo
475.561 62.7721 li
@
475.561 59.6521 mo
475.561 58.9321 li
@
475.561 55.8111 mo
475.561 55.0911 li
@
475.561 51.9711 mo
475.561 51.2511 li
@
475.561 48.1311 mo
475.561 47.4111 li
@
475.561 44.2911 mo
475.561 43.5711 li
@
475.561 40.4511 mo
475.561 39.7311 li
@
475.561 36.6111 mo
475.561 35.8911 li
@
475.561 32.7711 mo
475.561 32.0511 li
@
475.561 28.9311 mo
475.561 28.2111 li
@
475.561 25.0911 mo
475.561 24.3711 li
@
475.561 21.2511 mo
475.561 20.5311 li
@
475.561 17.4111 mo
475.561 16.6911 li
@
568.681 428.292 mo
568.681 427.572 li
@
568.681 424.452 mo
568.681 423.732 li
@
568.681 420.612 mo
568.681 419.892 li
@
568.681 416.772 mo
568.681 416.052 li
@
568.681 412.932 mo
568.681 412.212 li
@
568.681 409.092 mo
568.681 408.372 li
@
568.681 405.252 mo
568.681 404.532 li
@
568.681 401.412 mo
568.681 400.692 li
@
568.681 397.572 mo
568.681 396.852 li
@
568.681 393.732 mo
568.681 393.012 li
@
568.681 389.892 mo
568.681 389.172 li
@
568.681 386.052 mo
568.681 385.332 li
@
568.681 382.212 mo
568.681 381.492 li
@
568.681 378.372 mo
568.681 377.652 li
@
568.681 374.532 mo
568.681 373.812 li
@
568.681 370.692 mo
568.681 369.972 li
@
568.681 366.852 mo
568.681 366.132 li
@
568.681 363.012 mo
568.681 362.292 li
@
568.681 359.172 mo
568.681 358.452 li
@
568.681 355.332 mo
568.681 354.612 li
@
568.681 351.492 mo
568.681 350.772 li
@
568.681 347.652 mo
568.681 346.932 li
@
568.681 343.812 mo
568.681 343.092 li
@
568.681 339.972 mo
568.681 339.252 li
@
568.681 336.132 mo
568.681 335.412 li
@
568.681 332.292 mo
568.681 331.572 li
@
568.681 328.452 mo
568.681 327.732 li
@
568.681 324.612 mo
568.681 323.892 li
@
568.681 320.772 mo
568.681 320.052 li
@
568.681 316.932 mo
568.681 316.212 li
@
568.681 313.092 mo
568.681 312.372 li
@
568.681 309.252 mo
568.681 308.532 li
@
568.681 305.412 mo
568.681 304.692 li
@
568.681 301.572 mo
568.681 300.852 li
@
568.681 297.732 mo
568.681 297.012 li
@
568.681 293.892 mo
568.681 293.172 li
@
568.681 290.052 mo
568.681 289.332 li
@
568.681 286.212 mo
568.681 285.492 li
@
568.681 282.372 mo
568.681 281.652 li
@
568.681 278.532 mo
568.681 277.812 li
@
568.681 274.692 mo
568.681 273.972 li
@
568.681 270.852 mo
568.681 270.132 li
@
568.681 267.012 mo
568.681 266.292 li
@
568.681 263.172 mo
568.681 262.452 li
@
568.681 259.331 mo
568.681 258.611 li
@
568.681 255.491 mo
568.681 254.771 li
@
568.681 251.651 mo
568.681 250.931 li
@
568.681 247.811 mo
568.681 247.092 li
@
568.681 243.972 mo
568.681 243.252 li
@
568.681 240.132 mo
568.681 239.412 li
@
568.681 236.292 mo
568.681 235.572 li
@
568.681 232.452 mo
568.681 231.732 li
@
568.681 228.612 mo
568.681 227.892 li
@
568.681 224.772 mo
568.681 224.052 li
@
568.681 220.932 mo
568.681 220.212 li
@
568.681 217.092 mo
568.681 216.372 li
@
568.681 213.252 mo
568.681 212.532 li
@
568.681 209.412 mo
568.681 208.692 li
@
568.681 205.572 mo
568.681 204.852 li
@
568.681 201.732 mo
568.681 201.012 li
@
568.681 197.892 mo
568.681 197.172 li
@
568.681 194.052 mo
568.681 193.332 li
@
568.681 190.212 mo
568.681 189.492 li
@
568.681 186.372 mo
568.681 185.652 li
@
568.681 182.532 mo
568.681 181.812 li
@
568.681 178.692 mo
568.681 177.972 li
@
568.681 174.852 mo
568.681 174.132 li
@
568.681 171.012 mo
568.681 170.292 li
@
568.681 167.172 mo
568.681 166.452 li
@
568.681 163.332 mo
568.681 162.612 li
@
568.681 159.492 mo
568.681 158.772 li
@
568.681 155.652 mo
568.681 154.932 li
@
568.681 151.812 mo
568.681 151.092 li
@
568.681 147.972 mo
568.681 147.252 li
@
568.681 144.132 mo
568.681 143.412 li
@
568.681 140.292 mo
568.681 139.572 li
@
568.681 136.452 mo
568.681 135.732 li
@
568.681 132.612 mo
568.681 131.892 li
@
568.681 128.772 mo
568.681 128.052 li
@
568.681 124.932 mo
568.681 124.212 li
@
568.681 121.092 mo
568.681 120.372 li
@
568.681 117.252 mo
568.681 116.532 li
@
568.681 113.412 mo
568.681 112.692 li
@
568.681 109.572 mo
568.681 108.852 li
@
568.681 105.732 mo
568.681 105.012 li
@
568.681 101.892 mo
568.681 101.172 li
@
568.681 98.0524 mo
568.681 97.3324 li
@
568.681 94.2124 mo
568.681 93.4924 li
@
568.681 90.3724 mo
568.681 89.6524 li
@
568.681 86.5324 mo
568.681 85.8124 li
@
568.681 82.6924 mo
568.681 81.9724 li
@
568.681 78.8524 mo
568.681 78.1324 li
@
568.681 75.0124 mo
568.681 74.2924 li
@
568.681 71.1724 mo
568.681 70.4525 li
@
568.681 67.3324 mo
568.681 66.6125 li
@
568.681 63.4924 mo
568.681 62.7725 li
@
568.681 59.6524 mo
568.681 58.9325 li
@
568.681 55.8114 mo
568.681 55.0915 li
@
568.681 51.9714 mo
568.681 51.2515 li
@
568.681 48.1314 mo
568.681 47.4115 li
@
568.681 44.2914 mo
568.681 43.5715 li
@
568.681 40.4514 mo
568.681 39.7315 li
@
568.681 36.6115 mo
568.681 35.8915 li
@
568.681 32.7715 mo
568.681 32.0515 li
@
568.681 28.9315 mo
568.681 28.2115 li
@
568.681 25.0915 mo
568.681 24.3715 li
@
568.681 21.2515 mo
568.681 20.5315 li
@
568.681 17.4115 mo
568.681 16.6915 li
@
103.319 359.412 mo
104.039 359.412 li
@
107.159 359.412 mo
107.879 359.412 li
@
110.999 359.412 mo
111.719 359.412 li
@
114.839 359.412 mo
115.559 359.412 li
@
118.679 359.412 mo
119.399 359.412 li
@
122.519 359.412 mo
123.239 359.412 li
@
126.359 359.412 mo
127.079 359.412 li
@
130.199 359.412 mo
130.919 359.412 li
@
134.039 359.412 mo
134.759 359.412 li
@
137.879 359.412 mo
138.599 359.412 li
@
141.719 359.412 mo
142.439 359.412 li
@
145.559 359.412 mo
146.279 359.412 li
@
149.399 359.412 mo
150.119 359.412 li
@
153.239 359.412 mo
153.959 359.412 li
@
157.079 359.412 mo
157.799 359.412 li
@
160.919 359.412 mo
161.639 359.412 li
@
164.759 359.412 mo
165.479 359.412 li
@
168.599 359.412 mo
169.319 359.412 li
@
172.439 359.412 mo
173.159 359.412 li
@
176.279 359.412 mo
176.999 359.412 li
@
180.119 359.412 mo
180.838 359.412 li
@
183.959 359.412 mo
184.678 359.412 li
@
187.799 359.412 mo
188.518 359.412 li
@
191.639 359.412 mo
192.358 359.412 li
@
195.478 359.412 mo
196.198 359.412 li
@
199.318 359.412 mo
200.038 359.412 li
@
203.158 359.412 mo
203.878 359.412 li
@
206.998 359.412 mo
207.718 359.412 li
@
210.838 359.412 mo
211.558 359.412 li
@
214.678 359.412 mo
215.398 359.412 li
@
218.518 359.412 mo
219.238 359.412 li
@
222.358 359.412 mo
223.078 359.412 li
@
226.198 359.412 mo
226.918 359.412 li
@
230.038 359.412 mo
230.758 359.412 li
@
233.878 359.412 mo
234.598 359.412 li
@
237.718 359.412 mo
238.438 359.412 li
@
241.558 359.412 mo
242.278 359.412 li
@
245.398 359.412 mo
246.118 359.412 li
@
249.238 359.412 mo
249.958 359.412 li
@
253.078 359.412 mo
253.798 359.412 li
@
256.918 359.412 mo
257.638 359.412 li
@
260.758 359.412 mo
261.478 359.412 li
@
264.598 359.412 mo
265.318 359.412 li
@
268.439 359.412 mo
269.159 359.412 li
@
272.279 359.412 mo
272.999 359.412 li
@
276.119 359.412 mo
276.839 359.412 li
@
279.959 359.412 mo
280.679 359.412 li
@
283.799 359.412 mo
284.519 359.412 li
@
287.639 359.412 mo
288.359 359.412 li
@
291.479 359.412 mo
292.199 359.412 li
@
295.319 359.412 mo
296.039 359.412 li
@
299.159 359.412 mo
299.879 359.412 li
@
302.999 359.412 mo
303.719 359.412 li
@
306.839 359.412 mo
307.559 359.412 li
@
310.679 359.412 mo
311.399 359.412 li
@
314.519 359.412 mo
315.239 359.412 li
@
318.359 359.412 mo
319.079 359.412 li
@
322.199 359.412 mo
322.919 359.412 li
@
326.039 359.412 mo
326.759 359.412 li
@
329.879 359.412 mo
330.599 359.412 li
@
333.719 359.412 mo
334.439 359.412 li
@
337.559 359.412 mo
338.279 359.412 li
@
341.399 359.412 mo
342.119 359.412 li
@
345.239 359.412 mo
345.959 359.412 li
@
349.079 359.412 mo
349.799 359.412 li
@
352.919 359.412 mo
353.639 359.412 li
@
356.759 359.412 mo
357.479 359.412 li
@
360.599 359.412 mo
361.319 359.412 li
@
364.439 359.412 mo
365.159 359.412 li
@
368.279 359.412 mo
368.999 359.412 li
@
372.119 359.412 mo
372.839 359.412 li
@
375.959 359.412 mo
376.679 359.412 li
@
379.799 359.412 mo
380.519 359.412 li
@
383.639 359.412 mo
384.359 359.412 li
@
387.479 359.412 mo
388.199 359.412 li
@
391.319 359.412 mo
392.039 359.412 li
@
395.159 359.412 mo
395.879 359.412 li
@
398.999 359.412 mo
399.719 359.412 li
@
402.839 359.412 mo
403.559 359.412 li
@
406.679 359.412 mo
407.399 359.412 li
@
410.519 359.412 mo
411.239 359.412 li
@
414.359 359.412 mo
415.079 359.412 li
@
418.199 359.412 mo
418.919 359.412 li
@
422.039 359.412 mo
422.759 359.412 li
@
425.879 359.412 mo
426.599 359.412 li
@
429.719 359.412 mo
430.439 359.412 li
@
433.559 359.412 mo
434.279 359.412 li
@
437.399 359.412 mo
438.119 359.412 li
@
441.239 359.412 mo
441.959 359.412 li
@
445.079 359.412 mo
445.799 359.412 li
@
448.919 359.412 mo
449.639 359.412 li
@
452.759 359.412 mo
453.479 359.412 li
@
456.599 359.412 mo
457.319 359.412 li
@
460.439 359.412 mo
461.159 359.412 li
@
464.279 359.412 mo
464.999 359.412 li
@
468.119 359.412 mo
468.839 359.412 li
@
471.96 359.412 mo
472.679 359.412 li
@
475.8 359.412 mo
476.52 359.412 li
@
479.64 359.412 mo
480.36 359.412 li
@
483.48 359.412 mo
484.2 359.412 li
@
487.32 359.412 mo
488.04 359.412 li
@
491.16 359.412 mo
491.88 359.412 li
@
495 359.412 mo
495.72 359.412 li
@
498.84 359.412 mo
499.56 359.412 li
@
502.68 359.412 mo
503.4 359.412 li
@
506.52 359.412 mo
507.24 359.412 li
@
510.36 359.412 mo
511.08 359.412 li
@
514.2 359.412 mo
514.92 359.412 li
@
518.04 359.412 mo
518.76 359.412 li
@
521.88 359.412 mo
522.6 359.412 li
@
525.72 359.412 mo
526.44 359.412 li
@
529.56 359.412 mo
530.28 359.412 li
@
533.4 359.412 mo
534.12 359.412 li
@
537.24 359.412 mo
537.96 359.412 li
@
541.08 359.412 mo
541.8 359.412 li
@
544.92 359.412 mo
545.64 359.412 li
@
548.761 359.412 mo
549.48 359.412 li
@
552.601 359.412 mo
553.321 359.412 li
@
556.441 359.412 mo
557.161 359.412 li
@
560.281 359.412 mo
561.001 359.412 li
@
564.121 359.412 mo
564.841 359.412 li
@
567.961 359.412 mo
568.681 359.412 li
@
571.801 359.412 mo
572.521 359.412 li
@
575.641 359.412 mo
576.361 359.412 li
@
579.482 359.412 mo
580.201 359.412 li
@
583.322 359.412 mo
584.042 359.412 li
@
587.162 359.412 mo
587.882 359.412 li
@
591.002 359.412 mo
591.722 359.412 li
@
594.842 359.412 mo
595.562 359.412 li
@
598.682 359.412 mo
599.402 359.412 li
@
602.522 359.412 mo
603.242 359.412 li
@
606.362 359.412 mo
607.082 359.412 li
@
610.202 359.412 mo
610.922 359.412 li
@
614.042 359.412 mo
614.762 359.412 li
@
617.882 359.412 mo
618.602 359.412 li
@
621.722 359.412 mo
622.442 359.412 li
@
625.562 359.412 mo
626.282 359.412 li
@
629.402 359.412 mo
630.122 359.412 li
@
633.242 359.412 mo
633.962 359.412 li
@
637.082 359.412 mo
637.802 359.412 li
@
640.922 359.412 mo
641.642 359.412 li
@
644.762 359.412 mo
645.482 359.412 li
@
648.602 359.412 mo
649.322 359.412 li
@
652.442 359.412 mo
653.162 359.412 li
@
656.282 359.412 mo
657.002 359.412 li
@
660.122 359.412 mo
660.842 359.412 li
@
103.32 290.292 mo
104.04 290.292 li
@
107.16 290.292 mo
107.88 290.292 li
@
111 290.292 mo
111.72 290.292 li
@
114.84 290.292 mo
115.56 290.292 li
@
118.68 290.292 mo
119.4 290.292 li
@
122.52 290.292 mo
123.24 290.292 li
@
126.36 290.292 mo
127.08 290.292 li
@
130.2 290.292 mo
130.92 290.292 li
@
134.04 290.292 mo
134.76 290.292 li
@
137.88 290.292 mo
138.6 290.292 li
@
141.72 290.292 mo
142.44 290.292 li
@
145.56 290.292 mo
146.28 290.292 li
@
149.4 290.292 mo
150.12 290.292 li
@
153.24 290.292 mo
153.96 290.292 li
@
157.08 290.292 mo
157.8 290.292 li
@
160.92 290.292 mo
161.64 290.292 li
@
164.76 290.292 mo
165.48 290.292 li
@
168.6 290.292 mo
169.32 290.292 li
@
172.44 290.292 mo
173.16 290.292 li
@
176.28 290.292 mo
177 290.292 li
@
180.12 290.292 mo
180.84 290.292 li
@
183.96 290.292 mo
184.68 290.292 li
@
187.8 290.292 mo
188.52 290.292 li
@
191.64 290.292 mo
192.36 290.292 li
@
195.48 290.292 mo
196.2 290.292 li
@
199.32 290.292 mo
200.04 290.292 li
@
203.16 290.292 mo
203.88 290.292 li
@
207 290.292 mo
207.72 290.292 li
@
210.84 290.292 mo
211.56 290.292 li
@
214.68 290.292 mo
215.4 290.292 li
@
218.52 290.292 mo
219.24 290.292 li
@
222.36 290.292 mo
223.08 290.292 li
@
226.2 290.292 mo
226.92 290.292 li
@
230.04 290.292 mo
230.76 290.292 li
@
233.88 290.292 mo
234.6 290.292 li
@
237.72 290.292 mo
238.44 290.292 li
@
241.56 290.292 mo
242.28 290.292 li
@
245.4 290.292 mo
246.12 290.292 li
@
249.24 290.292 mo
249.96 290.292 li
@
253.08 290.292 mo
253.8 290.292 li
@
256.92 290.292 mo
257.64 290.292 li
@
260.76 290.292 mo
261.48 290.292 li
@
264.6 290.292 mo
265.32 290.292 li
@
268.441 290.292 mo
269.161 290.292 li
@
272.281 290.292 mo
273.001 290.292 li
@
276.121 290.292 mo
276.841 290.292 li
@
279.961 290.292 mo
280.681 290.292 li
@
283.801 290.292 mo
284.521 290.292 li
@
287.641 290.292 mo
288.361 290.292 li
@
291.481 290.292 mo
292.201 290.292 li
@
295.321 290.292 mo
296.041 290.292 li
@
299.161 290.292 mo
299.881 290.292 li
@
303.001 290.292 mo
303.721 290.292 li
@
306.841 290.292 mo
307.561 290.292 li
@
310.681 290.292 mo
311.401 290.292 li
@
314.521 290.292 mo
315.241 290.292 li
@
318.361 290.292 mo
319.081 290.292 li
@
322.201 290.292 mo
322.921 290.292 li
@
326.041 290.292 mo
326.761 290.292 li
@
329.881 290.292 mo
330.601 290.292 li
@
333.721 290.292 mo
334.441 290.292 li
@
337.561 290.292 mo
338.281 290.292 li
@
341.401 290.292 mo
342.121 290.292 li
@
345.241 290.292 mo
345.961 290.292 li
@
349.081 290.292 mo
349.801 290.292 li
@
352.921 290.292 mo
353.641 290.292 li
@
356.761 290.292 mo
357.481 290.292 li
@
360.601 290.292 mo
361.321 290.292 li
@
364.441 290.292 mo
365.161 290.292 li
@
368.281 290.292 mo
369.001 290.292 li
@
372.121 290.292 mo
372.841 290.292 li
@
375.961 290.292 mo
376.681 290.292 li
@
379.801 290.292 mo
380.521 290.292 li
@
383.641 290.292 mo
384.361 290.292 li
@
387.481 290.292 mo
388.201 290.292 li
@
391.321 290.292 mo
392.041 290.292 li
@
395.161 290.292 mo
395.881 290.292 li
@
399.001 290.292 mo
399.721 290.292 li
@
402.841 290.292 mo
403.561 290.292 li
@
406.681 290.292 mo
407.401 290.292 li
@
410.521 290.292 mo
411.241 290.292 li
@
414.361 290.292 mo
415.081 290.292 li
@
418.201 290.292 mo
418.921 290.292 li
@
422.041 290.292 mo
422.761 290.292 li
@
425.881 290.292 mo
426.601 290.292 li
@
429.721 290.292 mo
430.441 290.292 li
@
433.561 290.292 mo
434.281 290.292 li
@
437.401 290.292 mo
438.121 290.292 li
@
441.241 290.292 mo
441.961 290.292 li
@
445.081 290.292 mo
445.801 290.292 li
@
448.921 290.292 mo
449.641 290.292 li
@
452.761 290.292 mo
453.481 290.292 li
@
456.601 290.292 mo
457.321 290.292 li
@
460.441 290.292 mo
461.161 290.292 li
@
464.281 290.292 mo
465.001 290.292 li
@
468.121 290.292 mo
468.841 290.292 li
@
471.962 290.292 mo
472.681 290.292 li
@
475.802 290.292 mo
476.522 290.292 li
@
479.642 290.292 mo
480.362 290.292 li
@
483.482 290.292 mo
484.202 290.292 li
@
487.322 290.292 mo
488.042 290.292 li
@
491.162 290.292 mo
491.882 290.292 li
@
495.002 290.292 mo
495.722 290.292 li
@
498.842 290.292 mo
499.562 290.292 li
@
502.682 290.292 mo
503.402 290.292 li
@
506.522 290.292 mo
507.242 290.292 li
@
510.362 290.292 mo
511.082 290.292 li
@
514.202 290.292 mo
514.922 290.292 li
@
518.042 290.292 mo
518.762 290.292 li
@
521.882 290.292 mo
522.602 290.292 li
@
525.722 290.292 mo
526.442 290.292 li
@
529.562 290.292 mo
530.282 290.292 li
@
533.402 290.292 mo
534.122 290.292 li
@
537.242 290.292 mo
537.962 290.292 li
@
541.081 290.292 mo
541.801 290.292 li
@
544.921 290.292 mo
545.641 290.292 li
@
548.761 290.292 mo
549.481 290.292 li
@
552.601 290.292 mo
553.321 290.292 li
@
556.441 290.292 mo
557.161 290.292 li
@
560.281 290.292 mo
561.001 290.292 li
@
564.121 290.292 mo
564.841 290.292 li
@
567.961 290.292 mo
568.681 290.292 li
@
571.802 290.292 mo
572.521 290.292 li
@
575.642 290.292 mo
576.362 290.292 li
@
579.482 290.292 mo
580.202 290.292 li
@
583.323 290.292 mo
584.042 290.292 li
@
587.163 290.292 mo
587.882 290.292 li
@
591.003 290.292 mo
591.723 290.292 li
@
594.843 290.292 mo
595.563 290.292 li
@
598.683 290.292 mo
599.403 290.292 li
@
602.523 290.292 mo
603.243 290.292 li
@
606.363 290.292 mo
607.083 290.292 li
@
610.203 290.292 mo
610.923 290.292 li
@
614.043 290.292 mo
614.763 290.292 li
@
617.883 290.292 mo
618.603 290.292 li
@
621.723 290.292 mo
622.443 290.292 li
@
625.563 290.292 mo
626.283 290.292 li
@
629.403 290.292 mo
630.123 290.292 li
@
633.243 290.292 mo
633.963 290.292 li
@
637.083 290.292 mo
637.803 290.292 li
@
640.923 290.292 mo
641.643 290.292 li
@
644.763 290.292 mo
645.483 290.292 li
@
648.603 290.292 mo
649.323 290.292 li
@
652.443 290.292 mo
653.163 290.292 li
@
656.283 290.292 mo
657.003 290.292 li
@
660.123 290.292 mo
660.843 290.292 li
@
103.321 221.412 mo
104.041 221.412 li
@
107.161 221.412 mo
107.881 221.412 li
@
111.001 221.412 mo
111.721 221.412 li
@
114.841 221.412 mo
115.561 221.412 li
@
118.681 221.412 mo
119.401 221.412 li
@
122.521 221.412 mo
123.241 221.412 li
@
126.361 221.412 mo
127.081 221.412 li
@
130.201 221.412 mo
130.921 221.412 li
@
134.041 221.412 mo
134.761 221.412 li
@
137.881 221.412 mo
138.601 221.412 li
@
141.721 221.412 mo
142.441 221.412 li
@
145.561 221.412 mo
146.281 221.412 li
@
149.401 221.412 mo
150.121 221.412 li
@
153.241 221.412 mo
153.961 221.412 li
@
157.081 221.412 mo
157.801 221.412 li
@
160.921 221.412 mo
161.641 221.412 li
@
164.761 221.412 mo
165.481 221.412 li
@
168.601 221.412 mo
169.321 221.412 li
@
172.441 221.412 mo
173.161 221.412 li
@
176.281 221.412 mo
177.001 221.412 li
@
180.121 221.412 mo
180.841 221.412 li
@
183.961 221.412 mo
184.681 221.412 li
@
187.801 221.412 mo
188.521 221.412 li
@
191.641 221.412 mo
192.361 221.412 li
@
195.481 221.412 mo
196.201 221.412 li
@
199.321 221.412 mo
200.041 221.412 li
@
203.161 221.412 mo
203.881 221.412 li
@
207.001 221.412 mo
207.721 221.412 li
@
210.841 221.412 mo
211.561 221.412 li
@
214.681 221.412 mo
215.401 221.412 li
@
218.521 221.412 mo
219.241 221.412 li
@
222.361 221.412 mo
223.081 221.412 li
@
226.201 221.412 mo
226.921 221.412 li
@
230.041 221.412 mo
230.761 221.412 li
@
233.881 221.412 mo
234.601 221.412 li
@
237.721 221.412 mo
238.441 221.412 li
@
241.561 221.412 mo
242.281 221.412 li
@
245.401 221.412 mo
246.121 221.412 li
@
249.241 221.412 mo
249.961 221.412 li
@
253.081 221.412 mo
253.801 221.412 li
@
256.921 221.412 mo
257.641 221.412 li
@
260.761 221.412 mo
261.481 221.412 li
@
264.601 221.412 mo
265.321 221.412 li
@
268.442 221.412 mo
269.162 221.412 li
@
272.282 221.412 mo
273.002 221.412 li
@
276.122 221.412 mo
276.842 221.412 li
@
279.962 221.412 mo
280.682 221.412 li
@
283.802 221.412 mo
284.522 221.412 li
@
287.642 221.412 mo
288.362 221.412 li
@
291.482 221.412 mo
292.202 221.412 li
@
295.322 221.412 mo
296.042 221.412 li
@
299.162 221.412 mo
299.882 221.412 li
@
303.002 221.412 mo
303.722 221.412 li
@
306.842 221.412 mo
307.562 221.412 li
@
310.682 221.412 mo
311.402 221.412 li
@
314.522 221.412 mo
315.242 221.412 li
@
318.362 221.412 mo
319.082 221.412 li
@
322.202 221.412 mo
322.922 221.412 li
@
326.042 221.412 mo
326.762 221.412 li
@
329.882 221.412 mo
330.602 221.412 li
@
333.722 221.412 mo
334.442 221.412 li
@
337.562 221.412 mo
338.282 221.412 li
@
341.402 221.412 mo
342.122 221.412 li
@
345.242 221.412 mo
345.962 221.412 li
@
349.082 221.412 mo
349.802 221.412 li
@
352.922 221.412 mo
353.642 221.412 li
@
356.762 221.412 mo
357.482 221.412 li
@
360.602 221.412 mo
361.322 221.412 li
@
364.442 221.412 mo
365.162 221.412 li
@
368.282 221.412 mo
369.002 221.412 li
@
372.122 221.412 mo
372.842 221.412 li
@
375.962 221.412 mo
376.682 221.412 li
@
379.802 221.412 mo
380.522 221.412 li
@
383.642 221.412 mo
384.362 221.412 li
@
387.482 221.412 mo
388.202 221.412 li
@
391.322 221.412 mo
392.042 221.412 li
@
395.162 221.412 mo
395.882 221.412 li
@
399.002 221.412 mo
399.722 221.412 li
@
402.842 221.412 mo
403.562 221.412 li
@
406.682 221.412 mo
407.402 221.412 li
@
410.522 221.412 mo
411.242 221.412 li
@
414.362 221.412 mo
415.082 221.412 li
@
418.202 221.412 mo
418.922 221.412 li
@
422.042 221.412 mo
422.762 221.412 li
@
425.882 221.412 mo
426.602 221.412 li
@
429.722 221.412 mo
430.442 221.412 li
@
433.562 221.412 mo
434.282 221.412 li
@
437.402 221.412 mo
438.122 221.412 li
@
441.242 221.412 mo
441.962 221.412 li
@
445.082 221.412 mo
445.802 221.412 li
@
448.922 221.412 mo
449.642 221.412 li
@
452.762 221.412 mo
453.482 221.412 li
@
456.602 221.412 mo
457.322 221.412 li
@
460.442 221.412 mo
461.162 221.412 li
@
464.282 221.412 mo
465.002 221.412 li
@
468.122 221.412 mo
468.842 221.412 li
@
471.963 221.412 mo
472.682 221.412 li
@
475.803 221.412 mo
476.523 221.412 li
@
479.643 221.412 mo
480.363 221.412 li
@
483.483 221.412 mo
484.203 221.412 li
@
487.323 221.412 mo
488.043 221.412 li
@
491.163 221.412 mo
491.883 221.412 li
@
495.003 221.412 mo
495.723 221.412 li
@
498.843 221.412 mo
499.563 221.412 li
@
502.683 221.412 mo
503.403 221.412 li
@
506.523 221.412 mo
507.243 221.412 li
@
510.363 221.412 mo
511.083 221.412 li
@
514.203 221.412 mo
514.923 221.412 li
@
518.043 221.412 mo
518.763 221.412 li
@
521.883 221.412 mo
522.603 221.412 li
@
525.723 221.412 mo
526.443 221.412 li
@
529.563 221.412 mo
530.283 221.412 li
@
533.403 221.412 mo
534.123 221.412 li
@
537.243 221.412 mo
537.963 221.412 li
@
541.083 221.412 mo
541.803 221.412 li
@
544.923 221.412 mo
545.643 221.412 li
@
548.763 221.412 mo
549.483 221.412 li
@
552.603 221.412 mo
553.323 221.412 li
@
556.443 221.412 mo
557.163 221.412 li
@
560.283 221.412 mo
561.003 221.412 li
@
564.123 221.412 mo
564.843 221.412 li
@
567.963 221.412 mo
568.683 221.412 li
@
571.803 221.412 mo
572.523 221.412 li
@
575.643 221.412 mo
576.363 221.412 li
@
579.483 221.412 mo
580.203 221.412 li
@
583.323 221.412 mo
584.043 221.412 li
@
587.163 221.412 mo
587.883 221.412 li
@
591.003 221.412 mo
591.723 221.412 li
@
594.843 221.412 mo
595.563 221.412 li
@
598.683 221.412 mo
599.403 221.412 li
@
602.523 221.412 mo
603.243 221.412 li
@
606.363 221.412 mo
607.083 221.412 li
@
610.203 221.412 mo
610.923 221.412 li
@
614.043 221.412 mo
614.763 221.412 li
@
617.883 221.412 mo
618.603 221.412 li
@
621.724 221.412 mo
622.443 221.412 li
@
625.564 221.412 mo
626.283 221.412 li
@
629.404 221.412 mo
630.124 221.412 li
@
633.245 221.412 mo
633.964 221.412 li
@
637.085 221.412 mo
637.805 221.412 li
@
640.925 221.412 mo
641.645 221.412 li
@
644.765 221.412 mo
645.485 221.412 li
@
648.605 221.412 mo
649.325 221.412 li
@
652.445 221.412 mo
653.165 221.412 li
@
656.285 221.412 mo
657.005 221.412 li
@
660.125 221.412 mo
660.845 221.412 li
@
103.323 152.532 mo
104.043 152.532 li
@
107.163 152.532 mo
107.883 152.532 li
@
111.003 152.532 mo
111.723 152.532 li
@
114.843 152.532 mo
115.563 152.532 li
@
118.683 152.532 mo
119.403 152.532 li
@
122.523 152.532 mo
123.243 152.532 li
@
126.363 152.532 mo
127.083 152.532 li
@
130.203 152.532 mo
130.923 152.532 li
@
134.043 152.532 mo
134.763 152.532 li
@
137.883 152.532 mo
138.603 152.532 li
@
141.723 152.532 mo
142.443 152.532 li
@
145.563 152.532 mo
146.283 152.532 li
@
149.403 152.532 mo
150.123 152.532 li
@
153.243 152.532 mo
153.963 152.532 li
@
157.083 152.532 mo
157.803 152.532 li
@
160.923 152.532 mo
161.643 152.532 li
@
164.763 152.532 mo
165.483 152.532 li
@
168.603 152.532 mo
169.323 152.532 li
@
172.443 152.532 mo
173.163 152.532 li
@
176.283 152.532 mo
177.003 152.532 li
@
180.123 152.532 mo
180.843 152.532 li
@
183.963 152.532 mo
184.683 152.532 li
@
187.801 152.532 mo
188.521 152.532 li
@
191.641 152.532 mo
192.361 152.532 li
@
195.481 152.532 mo
196.201 152.532 li
@
199.321 152.532 mo
200.041 152.532 li
@
203.161 152.532 mo
203.881 152.532 li
@
207.001 152.532 mo
207.721 152.532 li
@
210.841 152.532 mo
211.561 152.532 li
@
214.681 152.532 mo
215.401 152.532 li
@
218.521 152.532 mo
219.241 152.532 li
@
222.361 152.532 mo
223.081 152.532 li
@
226.201 152.532 mo
226.921 152.532 li
@
230.041 152.532 mo
230.761 152.532 li
@
233.881 152.532 mo
234.601 152.532 li
@
237.721 152.532 mo
238.441 152.532 li
@
241.561 152.532 mo
242.281 152.532 li
@
245.401 152.532 mo
246.121 152.532 li
@
249.241 152.532 mo
249.961 152.532 li
@
253.081 152.532 mo
253.801 152.532 li
@
256.921 152.532 mo
257.641 152.532 li
@
260.761 152.532 mo
261.481 152.532 li
@
264.601 152.532 mo
265.321 152.532 li
@
268.442 152.532 mo
269.162 152.532 li
@
272.282 152.532 mo
273.002 152.532 li
@
276.122 152.532 mo
276.842 152.532 li
@
279.962 152.532 mo
280.682 152.532 li
@
283.802 152.532 mo
284.522 152.532 li
@
287.642 152.532 mo
288.362 152.532 li
@
291.482 152.532 mo
292.202 152.532 li
@
295.322 152.532 mo
296.042 152.532 li
@
299.162 152.532 mo
299.882 152.532 li
@
303.002 152.532 mo
303.722 152.532 li
@
306.842 152.532 mo
307.562 152.532 li
@
310.682 152.532 mo
311.402 152.532 li
@
314.522 152.532 mo
315.242 152.532 li
@
318.362 152.532 mo
319.082 152.532 li
@
322.202 152.532 mo
322.922 152.532 li
@
326.042 152.532 mo
326.762 152.532 li
@
329.882 152.532 mo
330.602 152.532 li
@
333.722 152.532 mo
334.442 152.532 li
@
337.562 152.532 mo
338.282 152.532 li
@
341.402 152.532 mo
342.122 152.532 li
@
345.242 152.532 mo
345.962 152.532 li
@
349.082 152.532 mo
349.802 152.532 li
@
352.922 152.532 mo
353.642 152.532 li
@
356.762 152.532 mo
357.482 152.532 li
@
360.602 152.532 mo
361.322 152.532 li
@
364.442 152.532 mo
365.161 152.532 li
@
368.282 152.532 mo
369.001 152.532 li
@
372.122 152.532 mo
372.841 152.532 li
@
375.962 152.532 mo
376.681 152.532 li
@
379.802 152.532 mo
380.521 152.532 li
@
383.642 152.532 mo
384.361 152.532 li
@
387.482 152.532 mo
388.201 152.532 li
@
391.322 152.532 mo
392.041 152.532 li
@
395.161 152.532 mo
395.881 152.532 li
@
399.001 152.532 mo
399.721 152.532 li
@
402.841 152.532 mo
403.561 152.532 li
@
406.681 152.532 mo
407.401 152.532 li
@
410.521 152.532 mo
411.241 152.532 li
@
414.361 152.532 mo
415.081 152.532 li
@
418.201 152.532 mo
418.921 152.532 li
@
422.041 152.532 mo
422.761 152.532 li
@
425.881 152.532 mo
426.601 152.532 li
@
429.721 152.532 mo
430.441 152.532 li
@
433.561 152.532 mo
434.281 152.532 li
@
437.401 152.532 mo
438.121 152.532 li
@
441.241 152.532 mo
441.961 152.532 li
@
445.081 152.532 mo
445.801 152.532 li
@
448.921 152.532 mo
449.641 152.532 li
@
452.761 152.532 mo
453.481 152.532 li
@
456.601 152.532 mo
457.321 152.532 li
@
460.441 152.532 mo
461.161 152.532 li
@
464.281 152.532 mo
465.001 152.532 li
@
468.121 152.532 mo
468.841 152.532 li
@
471.962 152.532 mo
472.681 152.532 li
@
475.802 152.532 mo
476.522 152.532 li
@
479.642 152.532 mo
480.362 152.532 li
@
483.482 152.532 mo
484.202 152.532 li
@
487.322 152.532 mo
488.042 152.532 li
@
491.162 152.532 mo
491.882 152.532 li
@
495.002 152.532 mo
495.722 152.532 li
@
498.842 152.532 mo
499.562 152.532 li
@
502.682 152.532 mo
503.402 152.532 li
@
506.522 152.532 mo
507.242 152.532 li
@
510.362 152.532 mo
511.082 152.532 li
@
514.202 152.532 mo
514.922 152.532 li
@
518.043 152.532 mo
518.762 152.532 li
@
521.883 152.532 mo
522.603 152.532 li
@
525.723 152.532 mo
526.443 152.532 li
@
529.563 152.532 mo
530.283 152.532 li
@
533.403 152.532 mo
534.123 152.532 li
@
537.243 152.532 mo
537.963 152.532 li
@
541.083 152.532 mo
541.803 152.532 li
@
544.923 152.532 mo
545.643 152.532 li
@
548.763 152.532 mo
549.483 152.532 li
@
552.603 152.532 mo
553.323 152.532 li
@
556.443 152.532 mo
557.163 152.532 li
@
560.283 152.532 mo
561.003 152.532 li
@
564.123 152.532 mo
564.843 152.532 li
@
567.963 152.532 mo
568.683 152.532 li
@
571.803 152.532 mo
572.523 152.532 li
@
575.643 152.532 mo
576.363 152.532 li
@
579.483 152.532 mo
580.203 152.532 li
@
583.323 152.532 mo
584.043 152.532 li
@
587.163 152.532 mo
587.883 152.532 li
@
591.003 152.532 mo
591.723 152.532 li
@
594.844 152.532 mo
595.563 152.532 li
@
598.684 152.532 mo
599.404 152.532 li
@
602.524 152.532 mo
603.244 152.532 li
@
606.364 152.532 mo
607.084 152.532 li
@
610.204 152.532 mo
610.924 152.532 li
@
614.044 152.532 mo
614.764 152.532 li
@
617.884 152.532 mo
618.604 152.532 li
@
621.724 152.532 mo
622.444 152.532 li
@
625.564 152.532 mo
626.284 152.532 li
@
629.404 152.532 mo
630.124 152.532 li
@
633.244 152.532 mo
633.964 152.532 li
@
637.084 152.532 mo
637.804 152.532 li
@
640.924 152.532 mo
641.644 152.532 li
@
644.764 152.532 mo
645.484 152.532 li
@
648.604 152.532 mo
649.324 152.532 li
@
652.444 152.532 mo
653.164 152.532 li
@
656.284 152.532 mo
657.004 152.532 li
@
660.125 152.532 mo
660.844 152.532 li
@
103.322 83.412 mo
104.042 83.412 li
@
107.162 83.412 mo
107.882 83.412 li
@
111.002 83.412 mo
111.722 83.412 li
@
114.842 83.412 mo
115.561 83.412 li
@
118.682 83.412 mo
119.401 83.412 li
@
122.521 83.412 mo
123.241 83.412 li
@
126.361 83.412 mo
127.081 83.412 li
@
130.201 83.412 mo
130.921 83.412 li
@
134.041 83.412 mo
134.761 83.412 li
@
137.881 83.412 mo
138.601 83.412 li
@
141.721 83.412 mo
142.441 83.412 li
@
145.561 83.412 mo
146.281 83.412 li
@
149.401 83.412 mo
150.121 83.412 li
@
153.241 83.412 mo
153.961 83.412 li
@
157.081 83.412 mo
157.801 83.412 li
@
160.921 83.412 mo
161.641 83.412 li
@
164.761 83.412 mo
165.481 83.412 li
@
168.601 83.412 mo
169.321 83.412 li
@
172.441 83.412 mo
173.161 83.412 li
@
176.281 83.412 mo
177.001 83.412 li
@
180.121 83.412 mo
180.841 83.412 li
@
183.961 83.412 mo
184.681 83.412 li
@
187.801 83.412 mo
188.521 83.412 li
@
191.641 83.412 mo
192.361 83.412 li
@
195.481 83.412 mo
196.201 83.412 li
@
199.321 83.412 mo
200.041 83.412 li
@
203.161 83.412 mo
203.881 83.412 li
@
207.001 83.412 mo
207.721 83.412 li
@
210.841 83.412 mo
211.561 83.412 li
@
214.681 83.412 mo
215.401 83.412 li
@
218.521 83.412 mo
219.241 83.412 li
@
222.361 83.412 mo
223.081 83.412 li
@
226.201 83.412 mo
226.921 83.412 li
@
230.041 83.412 mo
230.761 83.412 li
@
233.881 83.412 mo
234.601 83.412 li
@
237.721 83.412 mo
238.441 83.412 li
@
241.561 83.412 mo
242.281 83.412 li
@
245.401 83.412 mo
246.121 83.412 li
@
249.241 83.412 mo
249.961 83.412 li
@
253.081 83.412 mo
253.801 83.412 li
@
256.921 83.412 mo
257.641 83.412 li
@
260.761 83.412 mo
261.481 83.412 li
@
264.601 83.412 mo
265.321 83.412 li
@
268.442 83.412 mo
269.162 83.412 li
@
272.282 83.412 mo
273.002 83.412 li
@
276.122 83.412 mo
276.842 83.412 li
@
279.962 83.412 mo
280.682 83.412 li
@
283.802 83.412 mo
284.522 83.412 li
@
287.642 83.412 mo
288.362 83.412 li
@
291.482 83.412 mo
292.202 83.412 li
@
295.322 83.412 mo
296.042 83.412 li
@
299.162 83.412 mo
299.882 83.412 li
@
303.002 83.412 mo
303.722 83.412 li
@
306.842 83.412 mo
307.562 83.412 li
@
310.682 83.412 mo
311.402 83.412 li
@
314.522 83.412 mo
315.242 83.412 li
@
318.362 83.412 mo
319.082 83.412 li
@
322.202 83.412 mo
322.922 83.412 li
@
326.042 83.412 mo
326.762 83.412 li
@
329.882 83.412 mo
330.602 83.412 li
@
333.722 83.412 mo
334.442 83.412 li
@
337.562 83.412 mo
338.282 83.412 li
@
341.402 83.412 mo
342.122 83.412 li
@
345.242 83.412 mo
345.962 83.412 li
@
349.082 83.412 mo
349.802 83.412 li
@
352.922 83.412 mo
353.642 83.412 li
@
356.762 83.412 mo
357.482 83.412 li
@
360.602 83.412 mo
361.322 83.412 li
@
364.442 83.412 mo
365.162 83.412 li
@
368.282 83.412 mo
369.002 83.412 li
@
372.122 83.412 mo
372.842 83.412 li
@
375.962 83.412 mo
376.682 83.412 li
@
379.802 83.412 mo
380.522 83.412 li
@
383.642 83.412 mo
384.362 83.412 li
@
387.482 83.412 mo
388.202 83.412 li
@
391.322 83.412 mo
392.042 83.412 li
@
395.162 83.412 mo
395.882 83.412 li
@
399.002 83.412 mo
399.722 83.412 li
@
402.842 83.412 mo
403.562 83.412 li
@
406.682 83.412 mo
407.402 83.412 li
@
410.522 83.412 mo
411.242 83.412 li
@
414.362 83.412 mo
415.082 83.412 li
@
418.202 83.412 mo
418.922 83.412 li
@
422.042 83.412 mo
422.762 83.412 li
@
425.882 83.412 mo
426.602 83.412 li
@
429.722 83.412 mo
430.442 83.412 li
@
433.562 83.412 mo
434.282 83.412 li
@
437.402 83.412 mo
438.122 83.412 li
@
441.242 83.412 mo
441.962 83.412 li
@
445.082 83.412 mo
445.802 83.412 li
@
448.922 83.412 mo
449.642 83.412 li
@
452.762 83.412 mo
453.482 83.412 li
@
456.602 83.412 mo
457.322 83.412 li
@
460.442 83.412 mo
461.162 83.412 li
@
464.282 83.412 mo
465.002 83.412 li
@
468.122 83.412 mo
468.842 83.412 li
@
471.963 83.412 mo
472.682 83.412 li
@
475.803 83.412 mo
476.523 83.412 li
@
479.643 83.412 mo
480.363 83.412 li
@
483.483 83.412 mo
484.203 83.412 li
@
487.323 83.412 mo
488.043 83.412 li
@
491.163 83.412 mo
491.883 83.412 li
@
495.003 83.412 mo
495.723 83.412 li
@
498.843 83.412 mo
499.563 83.412 li
@
502.683 83.412 mo
503.403 83.412 li
@
506.523 83.412 mo
507.243 83.412 li
@
510.363 83.412 mo
511.083 83.412 li
@
514.203 83.412 mo
514.923 83.412 li
@
518.043 83.412 mo
518.763 83.412 li
@
521.883 83.412 mo
522.603 83.412 li
@
525.723 83.412 mo
526.443 83.412 li
@
529.563 83.412 mo
530.283 83.412 li
@
533.403 83.412 mo
534.123 83.412 li
@
537.243 83.412 mo
537.963 83.412 li
@
541.083 83.412 mo
541.803 83.412 li
@
544.923 83.412 mo
545.643 83.412 li
@
548.763 83.412 mo
549.483 83.412 li
@
552.603 83.412 mo
553.323 83.412 li
@
556.444 83.412 mo
557.163 83.412 li
@
560.284 83.412 mo
561.004 83.412 li
@
564.124 83.412 mo
564.844 83.412 li
@
567.964 83.412 mo
568.684 83.412 li
@
571.805 83.412 mo
572.524 83.412 li
@
575.645 83.412 mo
576.365 83.412 li
@
579.485 83.412 mo
580.205 83.412 li
@
583.325 83.412 mo
584.045 83.412 li
@
587.165 83.412 mo
587.885 83.412 li
@
591.005 83.412 mo
591.725 83.412 li
@
594.845 83.412 mo
595.565 83.412 li
@
598.685 83.412 mo
599.405 83.412 li
@
602.525 83.412 mo
603.245 83.412 li
@
606.365 83.412 mo
607.085 83.412 li
@
610.205 83.412 mo
610.925 83.412 li
@
614.045 83.412 mo
614.765 83.412 li
@
617.885 83.412 mo
618.605 83.412 li
@
621.725 83.412 mo
622.445 83.412 li
@
625.565 83.412 mo
626.285 83.412 li
@
629.405 83.412 mo
630.125 83.412 li
@
633.245 83.412 mo
633.965 83.412 li
@
637.085 83.412 mo
637.805 83.412 li
@
640.925 83.412 mo
641.645 83.412 li
@
644.765 83.412 mo
645.485 83.412 li
@
648.605 83.412 mo
649.325 83.412 li
@
652.445 83.412 mo
653.165 83.412 li
@
656.285 83.412 mo
657.005 83.412 li
@
660.125 83.412 mo
660.845 83.412 li
@
gsave
103.322 14.534 mo
662.048 14.534 li
662.048 428.532 li
103.322 428.532 li
cp
eclp
gsave
5.43127 0 mo
687.789 0 li
687.789 491.417 li
5.43127 491.417 li
cp
clp
1.68 lw
-310.92 -208.669 mo
619.804 391.812 li
0 gry
@
99.7223 54.371 mo
104.762 57.252 li
@
112.202 61.812 mo
117.242 64.692 li
@
124.682 69.012 mo
129.722 72.132 li
@
136.922 76.212 mo
142.202 79.3321 li
@
149.402 83.652 mo
154.682 86.7721 li
@
161.882 91.092 mo
167.162 94.2121 li
@
174.362 98.2921 mo
179.402 101.412 li
@
186.842 105.732 mo
191.882 108.612 li
@
199.322 112.932 mo
204.362 116.052 li
@
211.562 120.372 mo
216.842 123.252 li
@
224.042 127.572 mo
229.322 130.692 li
@
236.522 135.012 mo
241.802 138.132 li
@
249.002 142.212 mo
254.042 145.332 li
@
261.482 149.652 mo
266.522 152.532 li
@
273.963 157.092 mo
279.003 159.972 li
@
286.203 164.292 mo
291.483 167.412 li
@
298.683 171.492 mo
303.963 174.612 li
@
311.403 178.932 mo
316.443 181.812 li
@
323.883 186.132 mo
328.923 189.012 li
@
336.363 193.332 mo
341.403 196.212 li
@
348.843 200.532 mo
353.883 203.412 li
@
361.323 207.732 mo
366.603 210.612 li
@
373.803 214.932 mo
379.083 218.052 li
@
386.283 222.132 mo
391.563 225.252 li
@
398.763 229.332 mo
404.043 232.452 li
@
411.243 236.532 mo
416.523 239.652 li
@
423.723 243.731 mo
429.003 246.852 li
@
436.203 250.931 mo
441.483 254.051 li
@
448.923 258.371 mo
453.963 261.252 li
@
461.403 265.572 mo
466.443 268.452 li
@
473.884 272.772 mo
478.924 275.652 li
@
486.364 279.972 mo
491.404 282.852 li
@
498.844 287.172 mo
504.124 290.292 li
@
511.324 294.372 mo
516.604 297.492 li
@
523.804 301.572 mo
529.084 304.692 li
@
536.284 308.772 mo
541.564 311.892 li
@
548.764 315.972 mo
554.044 319.092 li
@
561.244 323.172 mo
566.524 326.292 li
@
573.724 330.372 mo
579.004 333.492 li
@
586.204 337.572 mo
591.484 340.692 li
@
598.924 345.012 mo
603.964 347.892 li
@
611.404 352.212 mo
616.444 355.092 li
@
grestore
grestore
1.2 lw
184.922 125.652 mo
184.922 133.812 li
0 gry
@
180.842 129.732 mo
189.002 129.732 li
@
185.402 74.772 mo
185.402 82.932 li
@
181.322 78.852 mo
189.482 78.852 li
@
193.802 110.532 mo
193.802 118.692 li
@
189.722 114.612 mo
197.882 114.612 li
@
193.802 124.212 mo
193.802 132.372 li
@
189.722 128.292 mo
197.882 128.292 li
@
212.522 121.812 mo
212.522 129.972 li
@
208.442 125.892 mo
216.602 125.892 li
@
213.722 81.9719 mo
213.722 90.1319 li
@
209.642 86.0519 mo
217.802 86.0519 li
@
221.642 195.972 mo
221.642 204.132 li
@
217.562 200.052 mo
225.722 200.052 li
@
221.642 110.772 mo
221.642 118.932 li
@
217.562 114.852 mo
225.722 114.852 li
@
231.482 123.972 mo
231.482 132.132 li
@
227.402 128.052 mo
235.562 128.052 li
@
240.362 142.692 mo
240.362 150.852 li
@
236.282 146.772 mo
244.442 146.772 li
@
243.242 87.9719 mo
243.242 96.1319 li
@
239.162 92.0519 mo
247.322 92.0519 li
@
249.242 201.972 mo
249.242 210.132 li
@
245.162 206.052 mo
253.322 206.052 li
@
249.242 163.092 mo
249.242 171.252 li
@
245.162 167.172 mo
253.322 167.172 li
@
249.242 198.132 mo
249.242 206.292 li
@
245.162 202.212 mo
253.322 202.212 li
@
249.242 163.572 mo
249.242 171.732 li
@
245.162 167.652 mo
253.322 167.652 li
@
249.482 151.332 mo
249.482 159.492 li
@
245.402 155.412 mo
253.562 155.412 li
@
258.842 100.692 mo
258.842 108.852 li
@
254.762 104.772 mo
262.922 104.772 li
@
258.842 156.612 mo
258.842 164.772 li
@
254.762 160.692 mo
262.922 160.692 li
@
268.923 135.492 mo
268.923 143.652 li
@
264.842 139.572 mo
273.003 139.572 li
@
269.403 124.452 mo
269.403 132.612 li
@
265.322 128.532 mo
273.483 128.532 li
@
270.603 105.972 mo
270.603 114.132 li
@
266.522 110.052 mo
274.683 110.052 li
@
278.283 161.412 mo
278.283 169.572 li
@
274.203 165.492 mo
282.363 165.492 li
@
278.523 157.092 mo
278.523 165.252 li
@
274.443 161.172 mo
282.603 161.172 li
@
278.523 113.652 mo
278.523 121.812 li
@
274.443 117.732 mo
282.603 117.732 li
@
278.763 133.332 mo
278.763 141.492 li
@
274.683 137.412 mo
282.843 137.412 li
@
285.963 184.692 mo
285.963 192.852 li
@
281.883 188.772 mo
290.043 188.772 li
@
285.963 176.052 mo
285.963 184.212 li
@
281.883 180.132 mo
290.043 180.132 li
@
286.443 160.932 mo
286.443 169.092 li
@
282.363 165.012 mo
290.523 165.012 li
@
286.923 105.972 mo
286.923 114.132 li
@
282.843 110.052 mo
291.003 110.052 li
@
295.803 149.412 mo
295.803 157.572 li
@
291.723 153.492 mo
299.883 153.492 li
@
295.803 180.612 mo
295.803 188.772 li
@
291.723 184.692 mo
299.883 184.692 li
@
297.483 144.612 mo
297.483 152.772 li
@
293.403 148.692 mo
301.563 148.692 li
@
297.963 117.732 mo
297.963 125.892 li
@
293.883 121.812 mo
302.043 121.812 li
@
305.163 184.212 mo
305.163 192.372 li
@
301.083 188.292 mo
309.243 188.292 li
@
305.403 187.091 mo
305.403 195.251 li
@
301.323 191.171 mo
309.483 191.171 li
@
305.643 194.051 mo
305.643 202.211 li
@
301.563 198.131 mo
309.723 198.131 li
@
305.643 174.611 mo
305.643 182.771 li
@
301.563 178.691 mo
309.723 178.691 li
@
305.643 163.571 mo
305.643 171.731 li
@
301.563 167.651 mo
309.723 167.651 li
@
305.643 145.811 mo
305.643 153.971 li
@
301.563 149.891 mo
309.723 149.891 li
@
305.643 139.57 mo
305.643 147.73 li
@
301.563 143.65 mo
309.723 143.65 li
@
305.883 165.49 mo
305.883 173.65 li
@
301.803 169.57 mo
309.963 169.57 li
@
315.004 248.529 mo
315.004 256.689 li
@
310.924 252.609 mo
319.083 252.609 li
@
315.004 199.33 mo
315.004 207.49 li
@
310.924 203.41 mo
319.083 203.41 li
@
315.245 188.29 mo
315.245 196.45 li
@
311.165 192.37 mo
319.324 192.37 li
@
315.245 170.53 mo
315.245 178.69 li
@
311.165 174.61 mo
319.324 174.61 li
@
315.245 208.69 mo
315.245 216.85 li
@
311.165 212.77 mo
319.324 212.77 li
@
315.245 182.77 mo
315.245 190.93 li
@
311.165 186.85 mo
319.324 186.85 li
@
315.245 180.61 mo
315.245 188.77 li
@
311.165 184.69 mo
319.324 184.69 li
@
315.965 185.17 mo
315.965 193.33 li
@
311.885 189.25 mo
320.044 189.25 li
@
315.965 141.97 mo
315.965 150.13 li
@
311.885 146.05 mo
320.044 146.05 li
@
323.405 170.05 mo
323.405 178.21 li
@
319.325 174.13 mo
327.484 174.13 li
@
323.645 166.69 mo
323.645 174.85 li
@
319.565 170.77 mo
327.725 170.77 li
@
323.645 212.29 mo
323.645 220.45 li
@
319.565 216.37 mo
327.725 216.37 li
@
323.645 230.53 mo
323.645 238.69 li
@
319.565 234.61 mo
327.725 234.61 li
@
325.325 151.33 mo
325.325 159.49 li
@
321.245 155.41 mo
329.405 155.41 li
@
332.765 233.17 mo
332.765 241.329 li
@
328.685 237.25 mo
336.845 237.25 li
@
334.685 178.21 mo
334.685 186.37 li
@
330.605 182.29 mo
338.765 182.29 li
@
342.125 286.45 mo
342.125 294.61 li
@
338.045 290.53 mo
346.205 290.53 li
@
342.605 188.53 mo
342.605 196.69 li
@
338.525 192.61 mo
346.685 192.61 li
@
342.605 306.13 mo
342.605 314.29 li
@
338.525 310.21 mo
346.685 310.21 li
@
342.605 251.409 mo
342.605 259.57 li
@
338.525 255.489 mo
346.685 255.489 li
@
343.565 267.73 mo
343.565 275.89 li
@
339.485 271.81 mo
347.645 271.81 li
@
344.525 229.57 mo
344.525 237.73 li
@
340.445 233.65 mo
348.605 233.65 li
@
344.525 127.57 mo
344.525 135.73 li
@
340.445 131.65 mo
348.605 131.65 li
@
352.445 209.65 mo
352.445 217.81 li
@
348.365 213.73 mo
356.525 213.73 li
@
352.685 94.6903 mo
352.685 102.85 li
@
348.605 98.7703 mo
356.765 98.7703 li
@
352.685 214.69 mo
352.685 222.85 li
@
348.605 218.77 mo
356.765 218.77 li
@
352.925 208.69 mo
352.925 216.85 li
@
348.845 212.77 mo
357.005 212.77 li
@
354.125 173.41 mo
354.125 181.57 li
@
350.045 177.49 mo
358.205 177.49 li
@
354.125 184.45 mo
354.125 192.61 li
@
350.045 188.53 mo
358.205 188.53 li
@
361.565 189.01 mo
361.565 197.17 li
@
357.485 193.09 mo
365.645 193.09 li
@
361.565 200.53 mo
361.565 208.69 li
@
357.485 204.61 mo
365.645 204.61 li
@
361.565 180.13 mo
361.565 188.29 li
@
357.485 184.21 mo
365.645 184.21 li
@
361.805 241.81 mo
361.805 249.969 li
@
357.725 245.889 mo
365.885 245.889 li
@
361.805 195.01 mo
361.805 203.17 li
@
357.725 199.09 mo
365.885 199.09 li
@
361.805 143.41 mo
361.805 151.57 li
@
357.725 147.49 mo
365.885 147.49 li
@
370.925 162.13 mo
370.925 170.29 li
@
366.845 166.21 mo
375.005 166.21 li
@
371.165 136.45 mo
371.165 144.61 li
@
367.085 140.53 mo
375.245 140.53 li
@
371.405 231.49 mo
371.405 239.65 li
@
367.325 235.57 mo
375.485 235.57 li
@
371.405 193.81 mo
371.405 201.97 li
@
367.325 197.89 mo
375.485 197.89 li
@
371.405 268.21 mo
371.405 276.37 li
@
367.325 272.29 mo
375.485 272.29 li
@
371.405 201.97 mo
371.405 210.13 li
@
367.325 206.05 mo
375.485 206.05 li
@
381.485 142.69 mo
381.485 150.85 li
@
377.405 146.77 mo
385.565 146.77 li
@
381.725 185.17 mo
381.725 193.33 li
@
377.645 189.25 mo
385.805 189.25 li
@
381.725 208.69 mo
381.725 216.85 li
@
377.645 212.77 mo
385.805 212.77 li
@
381.965 201.73 mo
381.965 209.89 li
@
377.885 205.81 mo
386.045 205.81 li
@
382.445 179.17 mo
382.445 187.33 li
@
378.365 183.25 mo
386.525 183.25 li
@
390.845 196.45 mo
390.845 204.61 li
@
386.765 200.53 mo
394.925 200.53 li
@
390.845 171.25 mo
390.845 179.41 li
@
386.765 175.33 mo
394.925 175.33 li
@
391.325 160.21 mo
391.325 168.37 li
@
387.245 164.29 mo
395.405 164.29 li
@
391.565 165.73 mo
391.565 173.89 li
@
387.485 169.81 mo
395.645 169.81 li
@
391.805 110.05 mo
391.805 118.21 li
@
387.725 114.13 mo
395.885 114.13 li
@
398.285 228.13 mo
398.285 236.29 li
@
394.205 232.21 mo
402.365 232.21 li
@
398.525 289.09 mo
398.525 297.25 li
@
394.445 293.17 mo
402.605 293.17 li
@
398.525 203.89 mo
398.525 212.05 li
@
394.445 207.97 mo
402.605 207.97 li
@
398.525 267.73 mo
398.525 275.89 li
@
394.445 271.81 mo
402.605 271.81 li
@
398.525 305.41 mo
398.525 313.57 li
@
394.445 309.49 mo
402.605 309.49 li
@
398.765 313.33 mo
398.765 321.49 li
@
394.685 317.41 mo
402.845 317.41 li
@
407.405 355.57 mo
407.405 363.73 li
@
403.325 359.65 mo
411.485 359.65 li
@
407.645 271.57 mo
407.645 279.73 li
@
403.565 275.65 mo
411.725 275.65 li
@
407.884 280.211 mo
407.884 288.371 li
@
403.804 284.291 mo
411.964 284.291 li
@
407.884 268.931 mo
407.884 277.091 li
@
403.804 273.011 mo
411.964 273.011 li
@
408.844 291.971 mo
408.844 300.131 li
@
404.764 296.051 mo
412.924 296.051 li
@
409.324 190.691 mo
409.324 198.851 li
@
405.244 194.771 mo
413.404 194.771 li
@
416.524 321.731 mo
416.524 329.891 li
@
412.444 325.811 mo
420.604 325.811 li
@
416.764 244.931 mo
416.764 253.09 li
@
412.684 249.01 mo
420.844 249.01 li
@
417.004 227.171 mo
417.004 235.331 li
@
412.924 231.251 mo
421.084 231.251 li
@
417.244 279.251 mo
417.244 287.411 li
@
413.164 283.331 mo
421.324 283.331 li
@
417.484 260.05 mo
417.484 268.211 li
@
413.404 264.131 mo
421.564 264.131 li
@
417.484 271.571 mo
417.484 279.731 li
@
413.404 275.651 mo
421.564 275.651 li
@
426.124 289.571 mo
426.124 297.731 li
@
422.044 293.651 mo
430.204 293.651 li
@
427.324 302.771 mo
427.324 310.931 li
@
423.244 306.851 mo
431.404 306.851 li
@
427.324 266.771 mo
427.324 274.931 li
@
423.244 270.851 mo
431.404 270.851 li
@
436.204 205.811 mo
436.204 213.971 li
@
432.124 209.891 mo
440.284 209.891 li
@
436.444 248.771 mo
436.444 256.93 li
@
432.364 252.85 mo
440.524 252.85 li
@
214.204 122.051 mo
214.204 124.834 211.948 127.091 209.164 127.091 cv
206.381 127.091 204.124 124.834 204.124 122.051 cv
204.124 119.267 206.381 117.011 209.164 117.011 cv
211.948 117.011 214.204 119.267 214.204 122.051 cv
ef
.72 lw
214.203 122.049 mo
214.203 124.832 211.947 127.089 209.163 127.089 cv
206.38 127.089 204.123 124.832 204.123 122.049 cv
204.123 119.265 206.38 117.009 209.163 117.009 cv
211.947 117.009 214.203 119.265 214.203 122.049 cv
cp
@
224.764 129.011 mo
224.764 131.794 222.508 134.051 219.724 134.051 cv
216.941 134.051 214.684 131.794 214.684 129.011 cv
214.684 126.227 216.941 123.971 219.724 123.971 cv
222.508 123.971 224.764 126.227 224.764 129.011 cv
ef
224.763 129.009 mo
224.763 131.792 222.507 134.049 219.723 134.049 cv
216.94 134.049 214.683 131.792 214.683 129.009 cv
214.683 126.225 216.94 123.969 219.723 123.969 cv
222.507 123.969 224.763 126.225 224.763 129.009 cv
cp
@
246.125 151.091 mo
246.125 153.874 243.868 156.131 241.085 156.131 cv
238.301 156.131 236.045 153.874 236.045 151.091 cv
236.045 148.307 238.301 146.051 241.085 146.051 cv
243.868 146.051 246.125 148.307 246.125 151.091 cv
ef
246.123 151.089 mo
246.123 153.872 243.867 156.129 241.083 156.129 cv
238.3 156.129 236.043 153.872 236.043 151.089 cv
236.043 148.305 238.3 146.049 241.083 146.049 cv
243.867 146.049 246.123 148.305 246.123 151.089 cv
cp
@
255.965 149.651 mo
255.965 152.434 253.708 154.691 250.925 154.691 cv
248.141 154.691 245.885 152.434 245.885 149.651 cv
245.885 146.867 248.141 144.611 250.925 144.611 cv
253.708 144.611 255.965 146.867 255.965 149.651 cv
ef
255.963 149.649 mo
255.963 152.432 253.707 154.689 250.923 154.689 cv
248.14 154.689 245.883 152.432 245.883 149.649 cv
245.883 146.865 248.14 144.609 250.923 144.609 cv
253.707 144.609 255.963 146.865 255.963 149.649 cv
cp
@
274.685 156.611 mo
274.685 159.394 272.428 161.651 269.645 161.651 cv
266.861 161.651 264.605 159.394 264.605 156.611 cv
264.605 153.827 266.861 151.571 269.645 151.571 cv
272.428 151.571 274.685 153.827 274.685 156.611 cv
ef
274.684 156.609 mo
274.684 159.393 272.427 161.649 269.644 161.649 cv
266.86 161.649 264.603 159.393 264.603 156.609 cv
264.603 153.825 266.86 151.569 269.644 151.569 cv
272.427 151.569 274.684 153.825 274.684 156.609 cv
cp
@
275.645 155.171 mo
275.645 157.954 273.388 160.211 270.605 160.211 cv
267.821 160.211 265.565 157.954 265.565 155.171 cv
265.565 152.387 267.821 150.131 270.605 150.131 cv
273.388 150.131 275.645 152.387 275.645 155.171 cv
ef
275.644 155.169 mo
275.644 157.953 273.387 160.209 270.604 160.209 cv
267.82 160.209 265.563 157.953 265.563 155.169 cv
265.563 152.385 267.82 150.129 270.604 150.129 cv
273.387 150.129 275.644 152.385 275.644 155.169 cv
cp
@
281.405 153.731 mo
281.405 156.514 279.148 158.771 276.365 158.771 cv
273.581 158.771 271.325 156.514 271.325 153.731 cv
271.325 150.947 273.581 148.691 276.365 148.691 cv
279.148 148.691 281.405 150.947 281.405 153.731 cv
ef
281.404 153.729 mo
281.404 156.513 279.147 158.769 276.364 158.769 cv
273.58 158.769 271.324 156.513 271.324 153.729 cv
271.324 150.945 273.58 148.689 276.364 148.689 cv
279.147 148.689 281.404 150.945 281.404 153.729 cv
cp
@
287.645 153.731 mo
287.645 156.514 285.389 158.771 282.605 158.771 cv
279.821 158.771 277.565 156.514 277.565 153.731 cv
277.565 150.947 279.821 148.691 282.605 148.691 cv
285.389 148.691 287.645 150.947 287.645 153.731 cv
ef
287.644 153.729 mo
287.644 156.513 285.387 158.769 282.604 158.769 cv
279.82 158.769 277.564 156.513 277.564 153.729 cv
277.564 150.945 279.82 148.689 282.604 148.689 cv
285.387 148.689 287.644 150.945 287.644 153.729 cv
cp
@
301.085 166.211 mo
301.085 168.994 298.829 171.251 296.045 171.251 cv
293.262 171.251 291.005 168.994 291.005 166.211 cv
291.005 163.427 293.262 161.171 296.045 161.171 cv
298.829 161.171 301.085 163.427 301.085 166.211 cv
ef
301.084 166.209 mo
301.084 168.993 298.827 171.249 296.044 171.249 cv
293.26 171.249 291.004 168.993 291.004 166.209 cv
291.004 163.426 293.26 161.169 296.044 161.169 cv
298.827 161.169 301.084 163.426 301.084 166.209 cv
cp
@
304.685 169.091 mo
304.685 171.874 302.429 174.131 299.645 174.131 cv
296.862 174.131 294.605 171.874 294.605 169.091 cv
294.605 166.307 296.862 164.051 299.645 164.051 cv
302.429 164.051 304.685 166.307 304.685 169.091 cv
ef
304.684 169.089 mo
304.684 171.873 302.427 174.129 299.644 174.129 cv
296.86 174.129 294.604 171.873 294.604 169.089 cv
294.604 166.306 296.86 164.049 299.644 164.049 cv
302.427 164.049 304.684 166.306 304.684 169.089 cv
cp
@
305.885 170.291 mo
305.885 173.074 303.629 175.331 300.845 175.331 cv
298.062 175.331 295.805 173.074 295.805 170.291 cv
295.805 167.507 298.062 165.251 300.845 165.251 cv
303.629 165.251 305.885 167.507 305.885 170.291 cv
ef
305.884 170.289 mo
305.884 173.073 303.627 175.329 300.844 175.329 cv
298.06 175.329 295.804 173.073 295.804 170.289 cv
295.804 167.506 298.06 165.249 300.844 165.249 cv
303.627 165.249 305.884 167.506 305.884 170.289 cv
cp
@
311.405 175.811 mo
311.405 178.594 309.149 180.851 306.365 180.851 cv
303.582 180.851 301.325 178.594 301.325 175.811 cv
301.325 173.027 303.582 170.771 306.365 170.771 cv
309.149 170.771 311.405 173.027 311.405 175.811 cv
ef
311.404 175.809 mo
311.404 178.593 309.147 180.849 306.364 180.849 cv
303.58 180.849 301.324 178.593 301.324 175.809 cv
301.324 173.026 303.58 170.769 306.364 170.769 cv
309.147 170.769 311.404 173.026 311.404 175.809 cv
cp
@
314.765 177.251 mo
314.765 180.034 312.509 182.291 309.725 182.291 cv
306.942 182.291 304.685 180.034 304.685 177.251 cv
304.685 174.467 306.942 172.211 309.725 172.211 cv
312.509 172.211 314.765 174.467 314.765 177.251 cv
ef
314.764 177.249 mo
314.764 180.033 312.507 182.289 309.724 182.289 cv
306.94 182.289 304.684 180.033 304.684 177.249 cv
304.684 174.466 306.94 172.209 309.724 172.209 cv
312.507 172.209 314.764 174.466 314.764 177.249 cv
cp
@
319.085 186.851 mo
319.085 189.634 316.829 191.891 314.045 191.891 cv
311.262 191.891 309.005 189.634 309.005 186.851 cv
309.005 184.067 311.262 181.811 314.045 181.811 cv
316.829 181.811 319.085 184.067 319.085 186.851 cv
ef
319.084 186.849 mo
319.084 189.633 316.827 191.889 314.044 191.889 cv
311.26 191.889 309.004 189.633 309.004 186.849 cv
309.004 184.066 311.26 181.809 314.044 181.809 cv
316.827 181.809 319.084 184.066 319.084 186.849 cv
cp
@
321.485 191.171 mo
321.485 193.954 319.229 196.211 316.445 196.211 cv
313.662 196.211 311.405 193.954 311.405 191.171 cv
311.405 188.387 313.662 186.131 316.445 186.131 cv
319.229 186.131 321.485 188.387 321.485 191.171 cv
ef
321.484 191.169 mo
321.484 193.953 319.227 196.209 316.444 196.209 cv
313.66 196.209 311.404 193.953 311.404 191.169 cv
311.404 188.386 313.66 186.129 316.444 186.129 cv
319.227 186.129 321.484 188.386 321.484 191.169 cv
cp
@
323.645 192.371 mo
323.645 195.154 321.389 197.411 318.605 197.411 cv
315.822 197.411 313.565 195.154 313.565 192.371 cv
313.565 189.587 315.822 187.331 318.605 187.331 cv
321.389 187.331 323.645 189.587 323.645 192.371 cv
ef
323.644 192.368 mo
323.644 195.153 321.387 197.409 318.604 197.409 cv
315.82 197.409 313.564 195.153 313.564 192.368 cv
313.564 189.586 315.82 187.329 318.604 187.329 cv
321.387 187.329 323.644 189.586 323.644 192.368 cv
cp
@
331.085 197.891 mo
331.085 200.674 328.829 202.931 326.045 202.931 cv
323.262 202.931 321.005 200.674 321.005 197.891 cv
321.005 195.107 323.262 192.851 326.045 192.851 cv
328.829 192.851 331.085 195.107 331.085 197.891 cv
ef
331.084 197.888 mo
331.084 200.673 328.827 202.928 326.044 202.928 cv
323.26 202.928 321.004 200.673 321.004 197.888 cv
321.004 195.105 323.26 192.849 326.044 192.849 cv
328.827 192.849 331.084 195.105 331.084 197.888 cv
cp
@
334.925 196.69 mo
334.925 199.474 332.669 201.73 329.885 201.73 cv
327.102 201.73 324.845 199.474 324.845 196.69 cv
324.845 193.906 327.102 191.651 329.885 191.651 cv
332.669 191.651 334.925 193.906 334.925 196.69 cv
ef
334.924 196.688 mo
334.924 199.473 332.667 201.728 329.884 201.728 cv
327.1 201.728 324.844 199.473 324.844 196.688 cv
324.844 193.905 327.1 191.648 329.884 191.648 cv
332.667 191.648 334.924 193.905 334.924 196.688 cv
cp
@
336.366 197.89 mo
336.366 200.673 334.109 202.93 331.325 202.93 cv
328.542 202.93 326.285 200.673 326.285 197.89 cv
326.285 195.106 328.542 192.85 331.325 192.85 cv
334.109 192.85 336.366 195.106 336.366 197.89 cv
ef
336.364 197.888 mo
336.364 200.672 334.107 202.928 331.324 202.928 cv
328.54 202.928 326.284 200.672 326.284 197.888 cv
326.284 195.105 328.54 192.848 331.324 192.848 cv
334.107 192.848 336.364 195.105 336.364 197.888 cv
cp
@
339.246 199.33 mo
339.246 202.113 336.989 204.37 334.206 204.37 cv
331.422 204.37 329.165 202.113 329.165 199.33 cv
329.165 196.546 331.422 194.29 334.206 194.29 cv
336.989 194.29 339.246 196.546 339.246 199.33 cv
ef
339.244 199.328 mo
339.244 202.112 336.987 204.368 334.204 204.368 cv
331.42 204.368 329.164 202.112 329.164 199.328 cv
329.164 196.545 331.42 194.288 334.204 194.288 cv
336.987 194.288 339.244 196.545 339.244 199.328 cv
cp
@
341.406 200.77 mo
341.406 203.553 339.149 205.81 336.366 205.81 cv
333.582 205.81 331.325 203.553 331.325 200.77 cv
331.325 197.986 333.582 195.73 336.366 195.73 cv
339.149 195.73 341.406 197.986 341.406 200.77 cv
ef
341.404 200.768 mo
341.404 203.552 339.147 205.808 336.364 205.808 cv
333.58 205.808 331.324 203.552 331.324 200.768 cv
331.324 197.985 333.58 195.728 336.364 195.728 cv
339.147 195.728 341.404 197.985 341.404 200.768 cv
cp
@
355.806 207.73 mo
355.806 210.513 353.549 212.77 350.766 212.77 cv
347.982 212.77 345.726 210.513 345.726 207.73 cv
345.726 204.946 347.982 202.69 350.766 202.69 cv
353.549 202.69 355.806 204.946 355.806 207.73 cv
ef
355.804 207.728 mo
355.804 210.512 353.547 212.768 350.764 212.768 cv
347.98 212.768 345.724 210.512 345.724 207.728 cv
345.724 204.945 347.98 202.688 350.764 202.688 cv
353.547 202.688 355.804 204.945 355.804 207.728 cv
cp
@
364.446 204.85 mo
364.446 207.633 362.189 209.89 359.406 209.89 cv
356.622 209.89 354.366 207.633 354.366 204.85 cv
354.366 202.066 356.622 199.81 359.406 199.81 cv
362.189 199.81 364.446 202.066 364.446 204.85 cv
ef
364.444 204.848 mo
364.444 207.632 362.187 209.888 359.404 209.888 cv
356.62 209.888 354.364 207.632 354.364 204.848 cv
354.364 202.065 356.62 199.808 359.404 199.808 cv
362.187 199.808 364.444 202.065 364.444 204.848 cv
cp
@
370.926 191.17 mo
370.926 193.953 368.669 196.21 365.886 196.21 cv
363.102 196.21 360.846 193.953 360.846 191.17 cv
360.846 188.386 363.102 186.13 365.886 186.13 cv
368.669 186.13 370.926 188.386 370.926 191.17 cv
ef
370.924 191.168 mo
370.924 193.952 368.668 196.208 365.884 196.208 cv
363.1 196.208 360.844 193.952 360.844 191.168 cv
360.844 188.385 363.1 186.128 365.884 186.128 cv
368.668 186.128 370.924 188.385 370.924 191.168 cv
cp
@
383.646 207.73 mo
383.646 210.513 381.389 212.77 378.606 212.77 cv
375.822 212.77 373.566 210.513 373.566 207.73 cv
373.566 204.946 375.822 202.69 378.606 202.69 cv
381.389 202.69 383.646 204.946 383.646 207.73 cv
ef
383.644 207.728 mo
383.644 210.512 381.388 212.768 378.604 212.768 cv
375.821 212.768 373.564 210.512 373.564 207.728 cv
373.564 204.945 375.821 202.688 378.604 202.688 cv
381.388 202.688 383.644 204.945 383.644 207.728 cv
cp
@
391.806 221.41 mo
391.806 224.193 389.55 226.45 386.766 226.45 cv
383.982 226.45 381.726 224.193 381.726 221.41 cv
381.726 218.626 383.982 216.37 386.766 216.37 cv
389.55 216.37 391.806 218.626 391.806 221.41 cv
ef
391.804 221.408 mo
391.804 224.192 389.548 226.448 386.764 226.448 cv
383.981 226.448 381.724 224.192 381.724 221.408 cv
381.724 218.625 383.981 216.368 386.764 216.368 cv
389.548 216.368 391.804 218.625 391.804 221.408 cv
cp
@
403.086 231.01 mo
403.086 233.793 400.83 236.05 398.046 236.05 cv
395.263 236.05 393.006 233.793 393.006 231.01 cv
393.006 228.226 395.263 225.97 398.046 225.97 cv
400.83 225.97 403.086 228.226 403.086 231.01 cv
ef
403.084 231.008 mo
403.084 233.792 400.828 236.048 398.044 236.048 cv
395.261 236.048 393.004 233.792 393.004 231.008 cv
393.004 228.225 395.261 225.968 398.044 225.968 cv
400.828 225.968 403.084 228.225 403.084 231.008 cv
cp
@
404.526 235.09 mo
404.526 237.873 402.27 240.13 399.486 240.13 cv
396.703 240.13 394.446 237.873 394.446 235.09 cv
394.446 232.306 396.703 230.05 399.486 230.05 cv
402.27 230.05 404.526 232.306 404.526 235.09 cv
ef
404.524 235.088 mo
404.524 237.872 402.268 240.128 399.484 240.128 cv
396.701 240.128 394.444 237.872 394.444 235.088 cv
394.444 232.305 396.701 230.048 399.484 230.048 cv
402.268 230.048 404.524 232.305 404.524 235.088 cv
cp
@
409.086 240.61 mo
409.086 243.393 406.83 245.65 404.046 245.65 cv
401.263 245.65 399.006 243.393 399.006 240.61 cv
399.006 237.826 401.263 235.57 404.046 235.57 cv
406.83 235.57 409.086 237.826 409.086 240.61 cv
ef
409.084 240.608 mo
409.084 243.392 406.828 245.648 404.044 245.648 cv
401.261 245.648 399.004 243.392 399.004 240.608 cv
399.004 237.825 401.261 235.568 404.044 235.568 cv
406.828 235.568 409.084 237.825 409.084 240.608 cv
cp
@
413.166 247.57 mo
413.166 250.353 410.91 252.61 408.126 252.61 cv
405.343 252.61 403.086 250.353 403.086 247.57 cv
403.086 244.786 405.343 242.53 408.126 242.53 cv
410.91 242.53 413.166 244.786 413.166 247.57 cv
ef
413.164 247.568 mo
413.164 250.352 410.908 252.608 408.124 252.608 cv
405.341 252.608 403.084 250.352 403.084 247.568 cv
403.084 244.785 405.341 242.528 408.124 242.528 cv
410.908 242.528 413.164 244.785 413.164 247.568 cv
cp
@
394.206 257.17 mo
395.646 261.97 li
400.686 261.97 li
396.606 264.85 li
398.286 269.65 li
394.206 266.77 li
389.886 269.65 li
391.566 264.85 li
387.486 261.97 li
392.526 261.97 li
1 gry
ef
1.92 lw
394.204 257.168 mo
395.644 261.969 li
400.684 261.969 li
396.604 264.849 li
398.284 269.649 li
394.204 266.769 li
389.884 269.649 li
391.564 264.849 li
387.484 261.969 li
392.524 261.969 li
cp
0 gry
@
619.808 384.85 mo
621.248 389.65 li
626.288 389.65 li
622.208 392.53 li
623.888 397.33 li
619.808 394.45 li
615.488 397.33 li
617.168 392.53 li
613.088 389.65 li
618.128 389.65 li
1 gry
ef
619.805 384.849 mo
621.245 389.649 li
626.285 389.649 li
622.205 392.529 li
623.885 397.329 li
619.805 394.449 li
615.485 397.329 li
617.165 392.529 li
613.085 389.649 li
618.125 389.649 li
cp
0 gry
@
1.68 lw
103.323 428.29 mo
103.323 420.13 li
@
149.883 428.29 mo
149.883 424.21 li
@
196.443 428.29 mo
196.443 420.13 li
@
243.003 428.29 mo
243.003 424.21 li
@
289.564 428.29 mo
289.564 420.13 li
@
336.124 428.29 mo
336.124 424.21 li
@
382.684 428.29 mo
382.684 420.13 li
@
429.004 428.29 mo
429.004 424.21 li
@
475.565 428.29 mo
475.565 420.13 li
@
522.125 428.29 mo
522.125 424.21 li
@
568.685 428.29 mo
568.685 420.13 li
@
615.245 428.29 mo
615.245 424.21 li
@
661.805 428.29 mo
661.805 420.13 li
@
103.323 428.29 mo
661.805 428.29 li
@
103.323 428.29 mo
111.483 428.29 li
@
103.323 393.73 mo
107.403 393.73 li
@
103.323 359.41 mo
111.483 359.41 li
@
103.323 324.85 mo
107.403 324.85 li
@
103.323 290.29 mo
111.483 290.29 li
@
103.323 255.969 mo
107.403 255.969 li
@
103.323 221.41 mo
111.483 221.41 li
@
103.323 186.85 mo
107.403 186.85 li
@
103.323 152.53 mo
111.483 152.53 li
@
103.323 117.97 mo
107.403 117.97 li
@
103.323 83.41 mo
111.483 83.41 li
@
103.323 49.089 mo
107.403 49.089 li
@
103.323 14.529 mo
111.483 14.529 li
@
103.323 428.29 mo
103.323 14.529 li
@
361.684 481.415 mo
362.188 479.013 361.684 481.415 362.188 479.013 cv
364.602 479.013 362.188 479.013 364.602 479.013 cv
364.168 481.111 364.602 479.013 364.168 481.111 cv
363.903 482.369 363.49 483.29 362.932 483.876 cv
362.373 484.462 361.715 484.798 360.957 484.884 cv
361.156 483.958 360.957 484.884 361.156 483.958 cv
362.086 483.701 362.699 482.853 362.996 481.415 cv
361.684 481.415 362.996 481.415 361.684 481.415 cv
f
661.659 429.001 mo
661.659 15.24 li
@
103.319 15.071 mo
661.801 15.071 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+ArialMT def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (ArialMT) def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /three put
dup 33 /two put
dup 34 /seven put
dup 35 /period put
dup 36 /four put
dup 37 /five put
dup 38 /zero put
dup 39 /one put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /nine put
dup 43 /six put
dup 44 /eight put
dup 45 /comma put
dup 46 /space put
dup 47 /c put
dup 97 /a put
dup 101 /e put
dup 114 /r put
dup 115 /s put
dup 121 /y put
def
/FontBBox {-665 -325 2000 1006} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
22 dict dup begin
/three <1C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368A
FE548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD1
0C10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA76
98FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA
14A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C0
2C0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608
AF6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |-
/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D
0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-
/seven <1C60D8A8C9B7EF32245185D6A5516F33DB78352C4AC565B22360E031
CB3B71A1D11654727B1436E7590FC689EA5F1279CA132C8529B81FF9BDC95FE0
F55546101EE3> |-
/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-
/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE
023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-
/five <1C60D8A8C9B7EF322B11AFD4001C6D393B64E9DE4ADCB9C7DBD29001B
CD9C24204BCA349E6D6727DDD519B4607896591269B0F423E62F04083C8D4AAB
63F3153F8354DAF7BF13702FC0166656CF2542F30CE9F35F189C04CCF389EF20
0B50CB6EEE2DB668946DD84852A4BE0E462B71D963D0D41B1A42CCC4B98AFEC4
9372EF96DD9EB13A793559C13CFDFE477> |-
/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3A
BC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A1
0425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E3
1D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC
60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A
5B546505C954A88> |-
/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92F
E1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-
/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368
260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A
577DC235F833AFCC30669C812FBF097879E1> |-
/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A
2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D47
14AF52ABD0227B6CDD854C568D5A6F3817645C5> |-
/nine <1C60D8A8C9B7EF322B1E3B1A79A1DA03E10E600D068C6F2A2C380B0F6
DEBD4D4DD1CC12D66AEECD714986D0BB404BEEE797B931765A09DB6972620435
C3E53C33E82E82293552FE3F4B4A9CF87D2D3960A335325D9064F969F569869D
5BECFFFACFCA41CE671D232207B2A9F695CAD03F11715AE00BA6E4E4DDB0F807
E169B9324CB5646DCC83A5DE270DE3BAEFD03D20E077B3A9C59CEC5C162A3BD3
072425BBF0BAF6222E938CACE57A2C4D75634AE3A010D0148B506BD06198AAAA
27D1742624D1FE8845D19FF21CDB94B022766F89FD7433D600DF30C7FA27B03E
17188994F16> |-
/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F
12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA
30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF1936
28C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766F
A7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140
B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D
91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-
/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C
071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D
17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63
B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F6
03BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A
7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219
571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A
1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A
55977C35> |-
/comma <1C60D8A8C9B854D0F42C7AF5C4668C35A6B5F5176B9FC6F495643D40
00A6D27DE0DDA4D01F0D89D11ABC5445CF8C34A3A1CF> |-
/space <1C60D8A8C9B854D00D> |-
/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE
9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7
BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C
344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D3654
8FE63FC8465B1B685766E782F0> |-
/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7D
C8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA
6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA
48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD
710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CE
C10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53
463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2
879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177
B5D88A> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE11285789
4FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619AD
D420F549AB7C795751D32E8EE6> |-
/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F
80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2
BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD9
6538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1
B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB32
87CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B843
5558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F41
72D53C8FCAF4D28F2B78D3A4BF03> |-
/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA
18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836
B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA734
8AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIYG+ArialMT /PBAAAA+ArialMT findfont ct_VMDictPut
/KGZIYG+ArialMT*1 
[32{/.notdef}rp /three /two /seven /period /four /five /zero 
/one /parenleft /parenright /nine /six /eight /comma /space 
/c 49{/.notdef}rp /a 3{/.notdef}rp /e 12{/.notdef}rp /r /s 
5{/.notdef}rp /y 134{/.notdef}rp]
KGZIYG+ArialMT nf
KGZIYG+ArialMT*1 [19 0 0 -19 0 0 ]msf
370.949 482.293 mo
(years)sh
617.737 47.1835 mo
(\(a\))sh
%ADOBeginSubsetFont: HIBBAA+Arial-ItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Arial-ItalicMT def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (Arial-ItalicMT) def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 116 /t put
def
/FontBBox {-517 -325 1359 998} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/t <1C60D8A8C9B854D0F47C238C0374D9401BE88F4E827DBF6ACD1493D30155
5AE9FDB97705B5DEB246C70D14D40A9195312074E63C52F6E3D89F7577AB6EB9
D86C962D4AACF9757FAC6B7871A41A5812D02B983576BB62D7A8BC6D6B98DD85
59487E3FB838CA3E0A199191> |-
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIYH+Arial-ItalicMT /HIBBAA+Arial-ItalicMT findfont ct_VMDictPut
/KGZIYH+Arial-ItalicMT*1 
[116{/.notdef}rp /t 139{/.notdef}rp]
KGZIYH+Arial-ItalicMT nf
KGZIYH+Arial-ItalicMT*1 [19 0 0 -19 0 0 ]msf
351.17 482.036 mo
(t)sh
KGZIYG+ArialMT*1 [19 0 0 -19 0 0 ]msf
39.5874 22.6051 mo
( !"#$%)sh
39.6995 91.7537 mo
( !"#$&)sh
39.8116 162.124 mo
( !"# %)sh
39.9237 229.439 mo
( !"# &)sh
40.0358 297.976 mo
( !"#!%)sh
40.1479 367.123 mo
( !"#!&)sh
39.6501 429.551 mo
( !"#%%)sh
82.9644 451.488 mo
('*+&)sh
175.829 450.267 mo
('*"&)sh
268.691 450.267 mo
('*,&)sh
363.999 449.655 mo
('**&)sh
456.252 449.655 mo
(!&&&)sh
547.893 450.267 mo
(!&'&)sh
640.755 449.655 mo
(!&!&)sh
%ADOBeginSubsetFont: QJJAAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+CMMI10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMMI10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 189 /rho put
def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 453 466] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/rho <1C60D8A8C9B7B64404966C0C325AEC592C74D869AAAEA8459ABA9A0D18
FA1D8F7FB3870070B33DDB42B698DBF110506D1FCFF87661E4B4967FE22B3A58
24C61FDFF6D18064205A23AE17A2A0F931077A05F309918780135C9076C2E8AA
E79757267C6FEF193AE393FA85940B2495C80398A05285ADE646576D8DDA4C61
141ECEF33C46F1B43CE87DACED55> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIYI+CMMI10 /QJJAAA+CMMI10 findfont ct_VMDictPut
/KGZIYI+CMMI10*1 
[189{/.notdef}rp /rho 66{/.notdef}rp]
KGZIYI+CMMI10 nf
KGZIYI+CMMI10*1 [0 -22.91 -22.91 0 0 0 ]msf
20.0657 269.313 mo
(\275)sh
KGZIYG+ArialMT*1 [0 -19 -19 0 0 0 ]msf
21.0306 256.317 mo
(-.ar/se/)
[-5.282 -5.282 -10.564 -6.32687 -9.5 -9.5 -10.564 0 ]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/KGZIYG+ArialMT*1 uf
/KGZIYG+ArialMT uf
/PBAAAA+ArialMT uf
/KGZIYH+Arial-ItalicMT*1 uf
/KGZIYH+Arial-ItalicMT uf
/HIBBAA+Arial-ItalicMT uf
/KGZIYI+CMMI10*1 uf
/KGZIYI+CMMI10 uf
/QJJAAA+CMMI10 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
