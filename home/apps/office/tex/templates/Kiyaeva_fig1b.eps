%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP889A.tmp.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: we
%%CreationDate: 03.07.2020, 13:32:53
%%BoundingBox: 0 0 668 486
%%HiResBoundingBox: 0 0 667.4761 485.7670
%%CropBox: 0 0 667.4761 485.7670
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1027 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 10.1.16 (Windows)"
   dc:format="application/pdf"
   xmp:CreateDate="2020-07-03T13:31:19+04:00"
   xmp:CreatorTool="Adobe Acrobat 10.1.16"
   xmp:ModifyDate="2020-07-03T13:31:19+04:00"
   xmpMM:DocumentID="uuid:9d3f332e-e296-4000-bcbb-006a8b1d0276"
   xmpMM:InstanceID="uuid:6a8a6c11-b701-4c56-b6df-60ac832efaa6">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Kiyaeva_fig1b-0.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>we</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -485.767 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 485.767 li
667.476 485.767 li
667.476 0 li
cp
clp
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
166.976 426.145 mo
166.976 425.425 li
false sop
/0 
[/DeviceGray] /CSA add_res
.502 gry
@
166.976 422.305 mo
166.976 421.585 li
@
166.976 418.465 mo
166.976 417.745 li
@
166.976 414.625 mo
166.976 413.905 li
@
166.976 410.785 mo
166.976 410.065 li
@
166.976 406.945 mo
166.976 406.225 li
@
166.976 403.105 mo
166.976 402.385 li
@
166.976 399.265 mo
166.976 398.545 li
@
166.976 395.425 mo
166.976 394.705 li
@
166.976 391.585 mo
166.976 390.865 li
@
166.976 387.745 mo
166.976 387.025 li
@
166.976 383.905 mo
166.976 383.185 li
@
166.976 380.065 mo
166.976 379.345 li
@
166.976 376.225 mo
166.976 375.505 li
@
166.976 372.385 mo
166.976 371.665 li
@
166.976 368.545 mo
166.976 367.825 li
@
166.976 364.705 mo
166.976 363.985 li
@
166.976 360.865 mo
166.976 360.145 li
@
166.976 357.025 mo
166.976 356.305 li
@
166.976 353.185 mo
166.976 352.465 li
@
166.976 349.345 mo
166.976 348.625 li
@
166.976 345.505 mo
166.976 344.785 li
@
166.976 341.665 mo
166.976 340.945 li
@
166.976 337.825 mo
166.976 337.105 li
@
166.976 333.985 mo
166.976 333.265 li
@
166.976 330.145 mo
166.976 329.425 li
@
166.976 326.305 mo
166.976 325.585 li
@
166.976 322.465 mo
166.976 321.745 li
@
166.976 318.625 mo
166.976 317.905 li
@
166.976 314.785 mo
166.976 314.065 li
@
166.976 310.946 mo
166.976 310.226 li
@
166.976 307.106 mo
166.976 306.386 li
@
166.976 303.266 mo
166.976 302.546 li
@
166.976 299.426 mo
166.976 298.706 li
@
166.976 295.586 mo
166.976 294.866 li
@
166.976 291.746 mo
166.976 291.026 li
@
166.976 287.906 mo
166.976 287.186 li
@
166.976 284.066 mo
166.976 283.346 li
@
166.976 280.226 mo
166.976 279.506 li
@
166.976 276.386 mo
166.976 275.666 li
@
166.976 272.546 mo
166.976 271.826 li
@
166.976 268.706 mo
166.976 267.986 li
@
166.976 264.866 mo
166.976 264.146 li
@
166.976 261.026 mo
166.976 260.306 li
@
166.976 257.185 mo
166.976 256.465 li
@
166.976 253.345 mo
166.976 252.625 li
@
166.976 249.505 mo
166.976 248.785 li
@
166.976 245.665 mo
166.976 244.945 li
@
166.976 241.825 mo
166.976 241.105 li
@
166.976 237.985 mo
166.976 237.265 li
@
166.976 234.145 mo
166.976 233.425 li
@
166.976 230.305 mo
166.976 229.585 li
@
166.976 226.465 mo
166.976 225.745 li
@
166.976 222.625 mo
166.976 221.905 li
@
166.976 218.785 mo
166.976 218.065 li
@
166.976 214.945 mo
166.976 214.225 li
@
166.976 211.105 mo
166.976 210.385 li
@
166.976 207.265 mo
166.976 206.545 li
@
166.976 203.425 mo
166.976 202.705 li
@
166.976 199.585 mo
166.976 198.865 li
@
166.976 195.745 mo
166.976 195.025 li
@
166.976 191.905 mo
166.976 191.185 li
@
166.976 188.065 mo
166.976 187.345 li
@
166.976 184.225 mo
166.976 183.505 li
@
166.976 180.385 mo
166.976 179.665 li
@
166.976 176.545 mo
166.976 175.825 li
@
166.976 172.705 mo
166.976 171.985 li
@
166.976 168.865 mo
166.976 168.145 li
@
166.976 165.025 mo
166.976 164.305 li
@
166.976 161.185 mo
166.976 160.465 li
@
166.976 157.345 mo
166.976 156.625 li
@
166.976 153.505 mo
166.976 152.785 li
@
166.976 149.665 mo
166.976 148.945 li
@
166.976 145.825 mo
166.976 145.105 li
@
166.976 141.985 mo
166.976 141.265 li
@
166.976 138.145 mo
166.976 137.425 li
@
166.976 134.305 mo
166.976 133.585 li
@
166.976 130.465 mo
166.976 129.745 li
@
166.976 126.625 mo
166.976 125.905 li
@
166.976 122.785 mo
166.976 122.065 li
@
166.976 118.945 mo
166.976 118.225 li
@
166.976 115.105 mo
166.976 114.385 li
@
166.976 111.265 mo
166.976 110.545 li
@
166.976 107.425 mo
166.976 106.705 li
@
166.976 103.585 mo
166.976 102.865 li
@
166.976 99.7453 mo
166.976 99.0253 li
@
166.976 95.9053 mo
166.976 95.1853 li
@
166.976 92.0653 mo
166.976 91.3453 li
@
166.976 88.2253 mo
166.976 87.5053 li
@
166.976 84.3853 mo
166.976 83.6653 li
@
166.976 80.5453 mo
166.976 79.8253 li
@
166.976 76.7053 mo
166.976 75.9853 li
@
166.976 72.8653 mo
166.976 72.1453 li
@
166.976 69.0253 mo
166.976 68.3053 li
@
166.976 65.1853 mo
166.976 64.4653 li
@
166.976 61.3453 mo
166.976 60.6253 li
@
166.976 57.5053 mo
166.976 56.7853 li
@
166.976 53.6643 mo
166.976 52.9443 li
@
166.976 49.8243 mo
166.976 49.1043 li
@
166.976 45.9843 mo
166.976 45.2643 li
@
166.976 42.1443 mo
166.976 41.4243 li
@
166.976 38.3043 mo
166.976 37.5844 li
@
166.976 34.4643 mo
166.976 33.7444 li
@
166.976 30.6243 mo
166.976 29.9044 li
@
166.976 26.7843 mo
166.976 26.0644 li
@
166.976 22.9443 mo
166.976 22.2244 li
@
166.976 19.1043 mo
166.976 18.3844 li
@
166.976 15.2643 mo
166.976 14.5444 li
@
246.896 426.144 mo
246.896 425.424 li
@
246.896 422.304 mo
246.896 421.584 li
@
246.896 418.464 mo
246.896 417.744 li
@
246.896 414.624 mo
246.896 413.904 li
@
246.896 410.784 mo
246.896 410.064 li
@
246.896 406.944 mo
246.896 406.224 li
@
246.896 403.104 mo
246.896 402.384 li
@
246.896 399.264 mo
246.896 398.544 li
@
246.896 395.424 mo
246.896 394.704 li
@
246.896 391.584 mo
246.896 390.864 li
@
246.896 387.744 mo
246.896 387.024 li
@
246.896 383.904 mo
246.896 383.184 li
@
246.896 380.064 mo
246.896 379.344 li
@
246.896 376.224 mo
246.896 375.504 li
@
246.896 372.384 mo
246.896 371.664 li
@
246.896 368.544 mo
246.896 367.824 li
@
246.896 364.704 mo
246.896 363.984 li
@
246.896 360.864 mo
246.896 360.144 li
@
246.896 357.024 mo
246.896 356.304 li
@
246.896 353.184 mo
246.896 352.464 li
@
246.896 349.344 mo
246.896 348.624 li
@
246.896 345.504 mo
246.896 344.784 li
@
246.896 341.664 mo
246.896 340.944 li
@
246.896 337.824 mo
246.896 337.104 li
@
246.896 333.984 mo
246.896 333.264 li
@
246.896 330.144 mo
246.896 329.424 li
@
246.896 326.304 mo
246.896 325.584 li
@
246.896 322.464 mo
246.896 321.744 li
@
246.896 318.624 mo
246.896 317.904 li
@
246.896 314.784 mo
246.896 314.064 li
@
246.896 310.945 mo
246.896 310.225 li
@
246.896 307.105 mo
246.896 306.385 li
@
246.896 303.265 mo
246.896 302.545 li
@
246.896 299.425 mo
246.896 298.705 li
@
246.896 295.585 mo
246.896 294.865 li
@
246.896 291.745 mo
246.896 291.025 li
@
246.896 287.905 mo
246.896 287.185 li
@
246.896 284.065 mo
246.896 283.345 li
@
246.896 280.225 mo
246.896 279.505 li
@
246.896 276.385 mo
246.896 275.665 li
@
246.896 272.545 mo
246.896 271.825 li
@
246.896 268.705 mo
246.896 267.985 li
@
246.896 264.865 mo
246.896 264.145 li
@
246.896 261.025 mo
246.896 260.305 li
@
246.896 257.184 mo
246.896 256.464 li
@
246.896 253.344 mo
246.896 252.624 li
@
246.896 249.504 mo
246.896 248.785 li
@
246.896 245.664 mo
246.896 244.945 li
@
246.896 241.824 mo
246.896 241.105 li
@
246.896 237.984 mo
246.896 237.265 li
@
246.896 234.145 mo
246.896 233.425 li
@
246.896 230.305 mo
246.896 229.585 li
@
246.896 226.465 mo
246.896 225.745 li
@
246.896 222.625 mo
246.896 221.905 li
@
246.896 218.785 mo
246.896 218.065 li
@
246.896 214.945 mo
246.896 214.225 li
@
246.896 211.105 mo
246.896 210.385 li
@
246.896 207.265 mo
246.896 206.545 li
@
246.896 203.425 mo
246.896 202.705 li
@
246.896 199.585 mo
246.896 198.865 li
@
246.896 195.745 mo
246.896 195.025 li
@
246.896 191.905 mo
246.896 191.185 li
@
246.896 188.065 mo
246.896 187.345 li
@
246.896 184.225 mo
246.896 183.505 li
@
246.896 180.385 mo
246.896 179.665 li
@
246.896 176.545 mo
246.896 175.825 li
@
246.896 172.705 mo
246.896 171.985 li
@
246.896 168.865 mo
246.896 168.145 li
@
246.896 165.025 mo
246.896 164.305 li
@
246.896 161.185 mo
246.896 160.465 li
@
246.896 157.345 mo
246.896 156.625 li
@
246.896 153.505 mo
246.896 152.785 li
@
246.896 149.665 mo
246.896 148.945 li
@
246.896 145.825 mo
246.896 145.105 li
@
246.896 141.985 mo
246.896 141.265 li
@
246.896 138.145 mo
246.896 137.425 li
@
246.896 134.305 mo
246.896 133.585 li
@
246.896 130.465 mo
246.896 129.745 li
@
246.896 126.625 mo
246.896 125.905 li
@
246.896 122.785 mo
246.896 122.065 li
@
246.896 118.945 mo
246.896 118.225 li
@
246.896 115.105 mo
246.896 114.385 li
@
246.896 111.265 mo
246.896 110.545 li
@
246.896 107.425 mo
246.896 106.705 li
@
246.896 103.585 mo
246.896 102.865 li
@
246.896 99.7446 mo
246.896 99.0247 li
@
246.896 95.9046 mo
246.896 95.1847 li
@
246.896 92.0646 mo
246.896 91.3447 li
@
246.896 88.2246 mo
246.896 87.5047 li
@
246.896 84.3846 mo
246.896 83.6647 li
@
246.896 80.5446 mo
246.896 79.8247 li
@
246.896 76.7047 mo
246.896 75.9847 li
@
246.896 72.8666 mo
246.896 72.1467 li
@
246.896 69.0266 mo
246.896 68.3067 li
@
246.896 65.1866 mo
246.896 64.4667 li
@
246.896 61.3466 mo
246.896 60.6267 li
@
246.896 57.5067 mo
246.896 56.7867 li
@
246.896 53.6656 mo
246.896 52.9457 li
@
246.896 49.8257 mo
246.896 49.1057 li
@
246.896 45.9857 mo
246.896 45.2657 li
@
246.896 42.1457 mo
246.896 41.4257 li
@
246.896 38.3057 mo
246.896 37.5857 li
@
246.896 34.4657 mo
246.896 33.7457 li
@
246.896 30.6257 mo
246.896 29.9057 li
@
246.896 26.7857 mo
246.896 26.0657 li
@
246.896 22.9457 mo
246.896 22.2257 li
@
246.896 19.1057 mo
246.896 18.3857 li
@
246.896 15.2657 mo
246.896 14.5457 li
@
326.577 426.146 mo
326.577 425.426 li
@
326.577 422.306 mo
326.577 421.586 li
@
326.577 418.466 mo
326.577 417.746 li
@
326.577 414.626 mo
326.577 413.906 li
@
326.577 410.786 mo
326.577 410.066 li
@
326.577 406.946 mo
326.577 406.226 li
@
326.577 403.106 mo
326.577 402.386 li
@
326.577 399.266 mo
326.577 398.546 li
@
326.577 395.426 mo
326.577 394.706 li
@
326.577 391.586 mo
326.577 390.866 li
@
326.577 387.746 mo
326.577 387.026 li
@
326.577 383.906 mo
326.577 383.186 li
@
326.577 380.066 mo
326.577 379.346 li
@
326.577 376.226 mo
326.577 375.506 li
@
326.577 372.386 mo
326.577 371.666 li
@
326.577 368.546 mo
326.577 367.826 li
@
326.577 364.706 mo
326.577 363.986 li
@
326.577 360.866 mo
326.577 360.146 li
@
326.577 357.026 mo
326.577 356.306 li
@
326.577 353.186 mo
326.577 352.466 li
@
326.577 349.346 mo
326.577 348.626 li
@
326.577 345.506 mo
326.577 344.786 li
@
326.577 341.666 mo
326.577 340.946 li
@
326.577 337.826 mo
326.577 337.106 li
@
326.577 333.986 mo
326.577 333.266 li
@
326.577 330.146 mo
326.577 329.426 li
@
326.577 326.306 mo
326.577 325.586 li
@
326.577 322.466 mo
326.577 321.746 li
@
326.577 318.626 mo
326.577 317.906 li
@
326.577 314.786 mo
326.577 314.066 li
@
326.577 310.947 mo
326.577 310.227 li
@
326.577 307.107 mo
326.577 306.387 li
@
326.577 303.267 mo
326.577 302.547 li
@
326.577 299.427 mo
326.577 298.707 li
@
326.577 295.587 mo
326.577 294.867 li
@
326.577 291.747 mo
326.577 291.027 li
@
326.577 287.907 mo
326.577 287.187 li
@
326.577 284.067 mo
326.577 283.347 li
@
326.577 280.227 mo
326.577 279.507 li
@
326.577 276.387 mo
326.577 275.667 li
@
326.577 272.547 mo
326.577 271.827 li
@
326.577 268.707 mo
326.577 267.987 li
@
326.577 264.867 mo
326.577 264.147 li
@
326.577 261.027 mo
326.577 260.307 li
@
326.577 257.186 mo
326.577 256.466 li
@
326.577 253.346 mo
326.577 252.626 li
@
326.577 249.506 mo
326.577 248.786 li
@
326.577 245.666 mo
326.577 244.946 li
@
326.577 241.826 mo
326.577 241.106 li
@
326.577 237.986 mo
326.577 237.266 li
@
326.577 234.146 mo
326.577 233.426 li
@
326.577 230.306 mo
326.577 229.586 li
@
326.577 226.466 mo
326.577 225.746 li
@
326.577 222.626 mo
326.577 221.906 li
@
326.577 218.786 mo
326.577 218.066 li
@
326.577 214.946 mo
326.577 214.226 li
@
326.577 211.106 mo
326.577 210.386 li
@
326.577 207.266 mo
326.577 206.546 li
@
326.577 203.426 mo
326.577 202.706 li
@
326.577 199.586 mo
326.577 198.866 li
@
326.577 195.746 mo
326.577 195.026 li
@
326.577 191.906 mo
326.577 191.186 li
@
326.577 188.066 mo
326.577 187.346 li
@
326.577 184.226 mo
326.577 183.506 li
@
326.577 180.386 mo
326.577 179.666 li
@
326.577 176.546 mo
326.577 175.826 li
@
326.577 172.706 mo
326.577 171.986 li
@
326.577 168.866 mo
326.577 168.146 li
@
326.577 165.026 mo
326.577 164.306 li
@
326.577 161.186 mo
326.577 160.466 li
@
326.577 157.346 mo
326.577 156.626 li
@
326.577 153.506 mo
326.577 152.786 li
@
326.577 149.666 mo
326.577 148.946 li
@
326.577 145.826 mo
326.577 145.106 li
@
326.577 141.986 mo
326.577 141.266 li
@
326.577 138.146 mo
326.577 137.426 li
@
326.577 134.306 mo
326.577 133.586 li
@
326.577 130.466 mo
326.577 129.746 li
@
326.577 126.626 mo
326.577 125.906 li
@
326.577 122.786 mo
326.577 122.066 li
@
326.577 118.946 mo
326.577 118.226 li
@
326.577 115.106 mo
326.577 114.386 li
@
326.577 111.266 mo
326.577 110.546 li
@
326.577 107.426 mo
326.577 106.706 li
@
326.577 103.586 mo
326.577 102.866 li
@
326.577 99.746 mo
326.577 99.026 li
@
326.577 95.906 mo
326.577 95.186 li
@
326.577 92.066 mo
326.577 91.346 li
@
326.577 88.226 mo
326.577 87.506 li
@
326.577 84.386 mo
326.577 83.666 li
@
326.577 80.546 mo
326.577 79.826 li
@
326.577 76.706 mo
326.577 75.986 li
@
326.577 72.866 mo
326.577 72.146 li
@
326.577 69.026 mo
326.577 68.306 li
@
326.577 65.186 mo
326.577 64.466 li
@
326.577 61.346 mo
326.577 60.626 li
@
326.577 57.506 mo
326.577 56.786 li
@
326.577 53.665 mo
326.577 52.945 li
@
326.577 49.825 mo
326.577 49.105 li
@
326.577 45.985 mo
326.577 45.265 li
@
326.577 42.145 mo
326.577 41.425 li
@
326.577 38.305 mo
326.577 37.5851 li
@
326.577 34.465 mo
326.577 33.7451 li
@
326.577 30.625 mo
326.577 29.9051 li
@
326.577 26.785 mo
326.577 26.0651 li
@
326.577 22.945 mo
326.577 22.2251 li
@
326.577 19.105 mo
326.577 18.3851 li
@
326.577 15.265 mo
326.577 14.5451 li
@
406.497 426.145 mo
406.497 425.425 li
@
406.497 422.305 mo
406.497 421.585 li
@
406.497 418.465 mo
406.497 417.745 li
@
406.497 414.625 mo
406.497 413.905 li
@
406.497 410.785 mo
406.497 410.065 li
@
406.497 406.945 mo
406.497 406.225 li
@
406.497 403.105 mo
406.497 402.385 li
@
406.497 399.265 mo
406.497 398.545 li
@
406.497 395.425 mo
406.497 394.705 li
@
406.497 391.585 mo
406.497 390.865 li
@
406.497 387.745 mo
406.497 387.025 li
@
406.497 383.905 mo
406.497 383.185 li
@
406.497 380.065 mo
406.497 379.345 li
@
406.497 376.225 mo
406.497 375.505 li
@
406.497 372.385 mo
406.497 371.665 li
@
406.497 368.545 mo
406.497 367.825 li
@
406.497 364.705 mo
406.497 363.985 li
@
406.497 360.865 mo
406.497 360.145 li
@
406.497 357.025 mo
406.497 356.305 li
@
406.497 353.185 mo
406.497 352.465 li
@
406.497 349.345 mo
406.497 348.625 li
@
406.497 345.505 mo
406.497 344.785 li
@
406.497 341.665 mo
406.497 340.945 li
@
406.497 337.825 mo
406.497 337.105 li
@
406.497 333.985 mo
406.497 333.265 li
@
406.497 330.145 mo
406.497 329.425 li
@
406.497 326.305 mo
406.497 325.585 li
@
406.497 322.465 mo
406.497 321.745 li
@
406.497 318.625 mo
406.497 317.905 li
@
406.497 314.785 mo
406.497 314.065 li
@
406.497 310.946 mo
406.497 310.226 li
@
406.497 307.106 mo
406.497 306.386 li
@
406.497 303.266 mo
406.497 302.546 li
@
406.497 299.426 mo
406.497 298.706 li
@
406.497 295.586 mo
406.497 294.866 li
@
406.497 291.746 mo
406.497 291.026 li
@
406.497 287.906 mo
406.497 287.186 li
@
406.497 284.066 mo
406.497 283.346 li
@
406.497 280.226 mo
406.497 279.506 li
@
406.497 276.386 mo
406.497 275.666 li
@
406.497 272.546 mo
406.497 271.826 li
@
406.497 268.706 mo
406.497 267.986 li
@
406.497 264.866 mo
406.497 264.146 li
@
406.497 261.026 mo
406.497 260.306 li
@
406.497 257.185 mo
406.497 256.465 li
@
406.497 253.345 mo
406.497 252.625 li
@
406.497 249.505 mo
406.497 248.785 li
@
406.497 245.665 mo
406.497 244.945 li
@
406.497 241.825 mo
406.497 241.105 li
@
406.497 237.985 mo
406.497 237.265 li
@
406.497 234.145 mo
406.497 233.425 li
@
406.497 230.305 mo
406.497 229.585 li
@
406.497 226.465 mo
406.497 225.745 li
@
406.497 222.625 mo
406.497 221.905 li
@
406.497 218.785 mo
406.497 218.065 li
@
406.497 214.945 mo
406.497 214.225 li
@
406.497 211.105 mo
406.497 210.385 li
@
406.497 207.265 mo
406.497 206.545 li
@
406.497 203.425 mo
406.497 202.705 li
@
406.497 199.585 mo
406.497 198.865 li
@
406.497 195.745 mo
406.497 195.025 li
@
406.497 191.905 mo
406.497 191.185 li
@
406.497 188.065 mo
406.497 187.345 li
@
406.497 184.225 mo
406.497 183.505 li
@
406.497 180.385 mo
406.497 179.665 li
@
406.497 176.545 mo
406.497 175.825 li
@
406.497 172.705 mo
406.497 171.985 li
@
406.497 168.865 mo
406.497 168.145 li
@
406.497 165.025 mo
406.497 164.305 li
@
406.497 161.185 mo
406.497 160.465 li
@
406.497 157.345 mo
406.497 156.625 li
@
406.497 153.505 mo
406.497 152.785 li
@
406.497 149.665 mo
406.497 148.945 li
@
406.497 145.825 mo
406.497 145.105 li
@
406.497 141.985 mo
406.497 141.265 li
@
406.497 138.145 mo
406.497 137.425 li
@
406.497 134.306 mo
406.497 133.586 li
@
406.497 130.466 mo
406.497 129.746 li
@
406.497 126.626 mo
406.497 125.906 li
@
406.497 122.786 mo
406.497 122.066 li
@
406.497 118.946 mo
406.497 118.226 li
@
406.497 115.106 mo
406.497 114.386 li
@
406.497 111.266 mo
406.497 110.546 li
@
406.497 107.426 mo
406.497 106.706 li
@
406.497 103.586 mo
406.497 102.866 li
@
406.497 99.7463 mo
406.497 99.0264 li
@
406.497 95.9063 mo
406.497 95.1864 li
@
406.497 92.0663 mo
406.497 91.3464 li
@
406.497 88.2263 mo
406.497 87.5064 li
@
406.497 84.3864 mo
406.497 83.6664 li
@
406.497 80.5464 mo
406.497 79.8264 li
@
406.497 76.7064 mo
406.497 75.9864 li
@
406.497 72.8664 mo
406.497 72.1464 li
@
406.497 69.0264 mo
406.497 68.3064 li
@
406.497 65.1864 mo
406.497 64.4664 li
@
406.497 61.3464 mo
406.497 60.6264 li
@
406.497 57.5064 mo
406.497 56.7864 li
@
406.497 53.6654 mo
406.497 52.9454 li
@
406.497 49.8254 mo
406.497 49.1054 li
@
406.497 45.9854 mo
406.497 45.2654 li
@
406.497 42.1454 mo
406.497 41.4254 li
@
406.497 38.3054 mo
406.497 37.5854 li
@
406.497 34.4654 mo
406.497 33.7454 li
@
406.497 30.6254 mo
406.497 29.9054 li
@
406.497 26.7854 mo
406.497 26.0654 li
@
406.497 22.9454 mo
406.497 22.2254 li
@
406.497 19.1054 mo
406.497 18.3854 li
@
406.497 15.2654 mo
406.497 14.5454 li
@
486.178 426.145 mo
486.178 425.425 li
@
486.178 422.305 mo
486.178 421.585 li
@
486.178 418.465 mo
486.178 417.745 li
@
486.178 414.625 mo
486.178 413.905 li
@
486.178 410.785 mo
486.178 410.065 li
@
486.178 406.945 mo
486.178 406.225 li
@
486.178 403.105 mo
486.178 402.385 li
@
486.178 399.265 mo
486.178 398.545 li
@
486.178 395.425 mo
486.178 394.705 li
@
486.178 391.585 mo
486.178 390.865 li
@
486.178 387.745 mo
486.178 387.025 li
@
486.178 383.905 mo
486.178 383.185 li
@
486.178 380.065 mo
486.178 379.345 li
@
486.178 376.225 mo
486.178 375.505 li
@
486.178 372.385 mo
486.178 371.665 li
@
486.178 368.545 mo
486.178 367.825 li
@
486.178 364.705 mo
486.178 363.985 li
@
486.178 360.865 mo
486.178 360.145 li
@
486.178 357.025 mo
486.178 356.305 li
@
486.178 353.185 mo
486.178 352.465 li
@
486.178 349.345 mo
486.178 348.625 li
@
486.178 345.505 mo
486.178 344.785 li
@
486.178 341.665 mo
486.178 340.945 li
@
486.178 337.825 mo
486.178 337.105 li
@
486.178 333.985 mo
486.178 333.266 li
@
486.178 330.145 mo
486.178 329.426 li
@
486.178 326.305 mo
486.178 325.586 li
@
486.178 322.465 mo
486.178 321.746 li
@
486.178 318.625 mo
486.178 317.906 li
@
486.178 314.785 mo
486.178 314.066 li
@
486.178 310.947 mo
486.178 310.227 li
@
486.178 307.107 mo
486.178 306.387 li
@
486.178 303.267 mo
486.178 302.547 li
@
486.178 299.427 mo
486.178 298.707 li
@
486.178 295.587 mo
486.178 294.867 li
@
486.178 291.747 mo
486.178 291.027 li
@
486.178 287.907 mo
486.178 287.187 li
@
486.178 284.067 mo
486.178 283.347 li
@
486.178 280.227 mo
486.178 279.507 li
@
486.178 276.387 mo
486.178 275.667 li
@
486.178 272.547 mo
486.178 271.827 li
@
486.178 268.707 mo
486.178 267.987 li
@
486.178 264.867 mo
486.178 264.147 li
@
486.178 261.027 mo
486.178 260.307 li
@
486.178 257.186 mo
486.178 256.466 li
@
486.178 253.346 mo
486.178 252.626 li
@
486.178 249.506 mo
486.178 248.786 li
@
486.178 245.666 mo
486.178 244.946 li
@
486.178 241.826 mo
486.178 241.106 li
@
486.178 237.986 mo
486.178 237.266 li
@
486.178 234.146 mo
486.178 233.426 li
@
486.178 230.306 mo
486.178 229.586 li
@
486.178 226.466 mo
486.178 225.746 li
@
486.178 222.626 mo
486.178 221.906 li
@
486.178 218.786 mo
486.178 218.066 li
@
486.178 214.946 mo
486.178 214.226 li
@
486.178 211.106 mo
486.178 210.386 li
@
486.178 207.266 mo
486.178 206.546 li
@
486.178 203.426 mo
486.178 202.706 li
@
486.178 199.586 mo
486.178 198.866 li
@
486.178 195.746 mo
486.178 195.026 li
@
486.178 191.906 mo
486.178 191.186 li
@
486.178 188.066 mo
486.178 187.346 li
@
486.178 184.226 mo
486.178 183.506 li
@
486.178 180.386 mo
486.178 179.666 li
@
486.178 176.546 mo
486.178 175.826 li
@
486.178 172.706 mo
486.178 171.986 li
@
486.178 168.866 mo
486.178 168.146 li
@
486.178 165.026 mo
486.178 164.306 li
@
486.178 161.186 mo
486.178 160.466 li
@
486.178 157.346 mo
486.178 156.626 li
@
486.178 153.506 mo
486.178 152.786 li
@
486.178 149.666 mo
486.178 148.946 li
@
486.178 145.826 mo
486.178 145.106 li
@
486.178 141.986 mo
486.178 141.266 li
@
486.178 138.146 mo
486.178 137.426 li
@
486.178 134.306 mo
486.178 133.586 li
@
486.178 130.466 mo
486.178 129.746 li
@
486.178 126.626 mo
486.178 125.906 li
@
486.178 122.786 mo
486.178 122.066 li
@
486.178 118.946 mo
486.178 118.226 li
@
486.178 115.106 mo
486.178 114.386 li
@
486.178 111.266 mo
486.178 110.546 li
@
486.178 107.426 mo
486.178 106.706 li
@
486.178 103.586 mo
486.178 102.866 li
@
486.178 99.7457 mo
486.178 99.0257 li
@
486.178 95.9057 mo
486.178 95.1857 li
@
486.178 92.0657 mo
486.178 91.3457 li
@
486.178 88.2257 mo
486.178 87.5057 li
@
486.178 84.3857 mo
486.178 83.6657 li
@
486.178 80.5457 mo
486.178 79.8257 li
@
486.178 76.7057 mo
486.178 75.9857 li
@
486.178 72.8657 mo
486.178 72.1458 li
@
486.178 69.0257 mo
486.178 68.3058 li
@
486.178 65.1857 mo
486.178 64.4658 li
@
486.178 61.3457 mo
486.178 60.6258 li
@
486.178 57.5057 mo
486.178 56.7858 li
@
486.178 53.6647 mo
486.178 52.9448 li
@
486.178 49.8247 mo
486.178 49.1048 li
@
486.178 45.9847 mo
486.178 45.2648 li
@
486.178 42.1447 mo
486.178 41.4248 li
@
486.178 38.3047 mo
486.178 37.5848 li
@
486.178 34.4648 mo
486.178 33.7448 li
@
486.178 30.6248 mo
486.178 29.9048 li
@
486.178 26.7848 mo
486.178 26.0648 li
@
486.178 22.9448 mo
486.178 22.2248 li
@
486.178 19.1048 mo
486.178 18.3848 li
@
486.178 15.2648 mo
486.178 14.5448 li
@
566.098 426.145 mo
566.098 425.425 li
@
566.098 422.305 mo
566.098 421.585 li
@
566.098 418.465 mo
566.098 417.745 li
@
566.098 414.625 mo
566.098 413.905 li
@
566.098 410.785 mo
566.098 410.065 li
@
566.098 406.945 mo
566.098 406.225 li
@
566.098 403.105 mo
566.098 402.385 li
@
566.098 399.265 mo
566.098 398.545 li
@
566.098 395.425 mo
566.098 394.705 li
@
566.098 391.585 mo
566.098 390.865 li
@
566.098 387.745 mo
566.098 387.025 li
@
566.098 383.905 mo
566.098 383.185 li
@
566.098 380.065 mo
566.098 379.345 li
@
566.098 376.225 mo
566.098 375.505 li
@
566.098 372.385 mo
566.098 371.665 li
@
566.098 368.545 mo
566.098 367.825 li
@
566.098 364.705 mo
566.098 363.985 li
@
566.098 360.865 mo
566.098 360.145 li
@
566.098 357.025 mo
566.098 356.305 li
@
566.098 353.185 mo
566.098 352.465 li
@
566.098 349.345 mo
566.098 348.625 li
@
566.098 345.505 mo
566.098 344.785 li
@
566.098 341.665 mo
566.098 340.945 li
@
566.098 337.825 mo
566.098 337.105 li
@
566.098 333.985 mo
566.098 333.265 li
@
566.098 330.145 mo
566.098 329.425 li
@
566.098 326.305 mo
566.098 325.585 li
@
566.098 322.465 mo
566.098 321.745 li
@
566.098 318.625 mo
566.098 317.905 li
@
566.098 314.785 mo
566.098 314.065 li
@
566.098 310.946 mo
566.098 310.226 li
@
566.098 307.106 mo
566.098 306.386 li
@
566.098 303.266 mo
566.098 302.546 li
@
566.098 299.426 mo
566.098 298.706 li
@
566.098 295.586 mo
566.098 294.866 li
@
566.098 291.746 mo
566.098 291.026 li
@
566.098 287.906 mo
566.098 287.186 li
@
566.098 284.066 mo
566.098 283.346 li
@
566.098 280.226 mo
566.098 279.506 li
@
566.098 276.386 mo
566.098 275.666 li
@
566.098 272.546 mo
566.098 271.826 li
@
566.098 268.706 mo
566.098 267.986 li
@
566.098 264.866 mo
566.098 264.146 li
@
566.098 261.026 mo
566.098 260.306 li
@
566.098 257.185 mo
566.098 256.465 li
@
566.098 253.345 mo
566.098 252.625 li
@
566.098 249.505 mo
566.098 248.785 li
@
566.098 245.665 mo
566.098 244.945 li
@
566.098 241.825 mo
566.098 241.105 li
@
566.098 237.985 mo
566.098 237.265 li
@
566.098 234.145 mo
566.098 233.425 li
@
566.098 230.305 mo
566.098 229.585 li
@
566.098 226.465 mo
566.098 225.745 li
@
566.098 222.625 mo
566.098 221.905 li
@
566.098 218.785 mo
566.098 218.065 li
@
566.098 214.945 mo
566.098 214.225 li
@
566.098 211.105 mo
566.098 210.385 li
@
566.098 207.265 mo
566.098 206.545 li
@
566.098 203.425 mo
566.098 202.705 li
@
566.098 199.585 mo
566.098 198.865 li
@
566.098 195.747 mo
566.098 195.027 li
@
566.098 191.907 mo
566.098 191.187 li
@
566.098 188.067 mo
566.098 187.347 li
@
566.098 184.227 mo
566.098 183.507 li
@
566.098 180.387 mo
566.098 179.667 li
@
566.098 176.547 mo
566.098 175.827 li
@
566.098 172.707 mo
566.098 171.987 li
@
566.098 168.867 mo
566.098 168.147 li
@
566.098 165.027 mo
566.098 164.307 li
@
566.098 161.187 mo
566.098 160.467 li
@
566.098 157.347 mo
566.098 156.627 li
@
566.098 153.507 mo
566.098 152.787 li
@
566.098 149.667 mo
566.098 148.947 li
@
566.098 145.827 mo
566.098 145.107 li
@
566.098 141.987 mo
566.098 141.267 li
@
566.098 138.147 mo
566.098 137.427 li
@
566.098 134.307 mo
566.098 133.587 li
@
566.098 130.467 mo
566.098 129.747 li
@
566.098 126.627 mo
566.098 125.907 li
@
566.098 122.787 mo
566.098 122.067 li
@
566.098 118.947 mo
566.098 118.227 li
@
566.098 115.107 mo
566.098 114.387 li
@
566.098 111.267 mo
566.098 110.547 li
@
566.098 107.427 mo
566.098 106.707 li
@
566.098 103.587 mo
566.098 102.867 li
@
566.098 99.747 mo
566.098 99.0271 li
@
566.098 95.907 mo
566.098 95.1871 li
@
566.098 92.067 mo
566.098 91.3471 li
@
566.098 88.2271 mo
566.098 87.5071 li
@
566.098 84.3871 mo
566.098 83.6671 li
@
566.098 80.5471 mo
566.098 79.8271 li
@
566.098 76.7071 mo
566.098 75.9871 li
@
566.098 72.8671 mo
566.098 72.1471 li
@
566.098 69.0271 mo
566.098 68.3071 li
@
566.098 65.1871 mo
566.098 64.4671 li
@
566.098 61.3471 mo
566.098 60.6271 li
@
566.098 57.5071 mo
566.098 56.7871 li
@
566.098 53.6661 mo
566.098 52.9461 li
@
566.098 49.8261 mo
566.098 49.1061 li
@
566.098 45.9861 mo
566.098 45.2661 li
@
566.098 42.1461 mo
566.098 41.4261 li
@
566.098 38.3061 mo
566.098 37.5861 li
@
566.098 34.4661 mo
566.098 33.7461 li
@
566.098 30.6261 mo
566.098 29.9061 li
@
566.098 26.7861 mo
566.098 26.0661 li
@
566.098 22.9461 mo
566.098 22.2261 li
@
566.098 19.1061 mo
566.098 18.3861 li
@
566.098 15.2661 mo
566.098 14.5461 li
@
87.296 384.866 mo
88.016 384.866 li
@
91.136 384.866 mo
91.856 384.866 li
@
94.976 384.866 mo
95.696 384.866 li
@
98.816 384.866 mo
99.536 384.866 li
@
102.656 384.866 mo
103.376 384.866 li
@
106.496 384.866 mo
107.216 384.866 li
@
110.336 384.866 mo
111.056 384.866 li
@
114.176 384.866 mo
114.896 384.866 li
@
118.016 384.866 mo
118.736 384.866 li
@
121.856 384.866 mo
122.576 384.866 li
@
125.696 384.866 mo
126.416 384.866 li
@
129.536 384.866 mo
130.256 384.866 li
@
133.376 384.866 mo
134.096 384.866 li
@
137.216 384.866 mo
137.936 384.866 li
@
141.056 384.866 mo
141.776 384.866 li
@
144.896 384.866 mo
145.616 384.866 li
@
148.736 384.866 mo
149.456 384.866 li
@
152.576 384.866 mo
153.296 384.866 li
@
156.416 384.866 mo
157.136 384.866 li
@
160.256 384.866 mo
160.976 384.866 li
@
164.096 384.866 mo
164.816 384.866 li
@
167.936 384.866 mo
168.656 384.866 li
@
171.776 384.866 mo
172.496 384.866 li
@
175.616 384.866 mo
176.336 384.866 li
@
179.456 384.866 mo
180.176 384.866 li
@
183.296 384.866 mo
184.016 384.866 li
@
187.136 384.866 mo
187.856 384.866 li
@
190.976 384.866 mo
191.696 384.866 li
@
194.816 384.866 mo
195.536 384.866 li
@
198.656 384.866 mo
199.376 384.866 li
@
202.496 384.866 mo
203.216 384.866 li
@
206.336 384.866 mo
207.056 384.866 li
@
210.176 384.866 mo
210.896 384.866 li
@
214.016 384.866 mo
214.736 384.866 li
@
217.856 384.866 mo
218.576 384.866 li
@
221.696 384.866 mo
222.416 384.866 li
@
225.536 384.866 mo
226.256 384.866 li
@
229.376 384.866 mo
230.096 384.866 li
@
233.216 384.866 mo
233.936 384.866 li
@
237.056 384.866 mo
237.776 384.866 li
@
240.896 384.866 mo
241.616 384.866 li
@
244.736 384.866 mo
245.456 384.866 li
@
248.576 384.866 mo
249.296 384.866 li
@
252.417 384.866 mo
253.137 384.866 li
@
256.257 384.866 mo
256.977 384.866 li
@
260.097 384.866 mo
260.817 384.866 li
@
263.937 384.866 mo
264.657 384.866 li
@
267.777 384.866 mo
268.497 384.866 li
@
271.617 384.866 mo
272.337 384.866 li
@
275.457 384.866 mo
276.177 384.866 li
@
279.297 384.866 mo
280.017 384.866 li
@
283.137 384.866 mo
283.857 384.866 li
@
286.977 384.866 mo
287.697 384.866 li
@
290.817 384.866 mo
291.537 384.866 li
@
294.657 384.866 mo
295.377 384.866 li
@
298.497 384.866 mo
299.217 384.866 li
@
302.337 384.866 mo
303.057 384.866 li
@
306.177 384.866 mo
306.897 384.866 li
@
310.017 384.866 mo
310.737 384.866 li
@
313.857 384.866 mo
314.577 384.866 li
@
317.697 384.866 mo
318.417 384.866 li
@
321.537 384.866 mo
322.257 384.866 li
@
325.377 384.866 mo
326.097 384.866 li
@
329.217 384.866 mo
329.937 384.866 li
@
333.057 384.866 mo
333.777 384.866 li
@
336.897 384.866 mo
337.617 384.866 li
@
340.737 384.866 mo
341.457 384.866 li
@
344.577 384.866 mo
345.297 384.866 li
@
348.417 384.866 mo
349.137 384.866 li
@
352.257 384.866 mo
352.977 384.866 li
@
356.097 384.866 mo
356.817 384.866 li
@
359.937 384.866 mo
360.657 384.866 li
@
363.777 384.866 mo
364.497 384.866 li
@
367.617 384.866 mo
368.337 384.866 li
@
371.457 384.866 mo
372.177 384.866 li
@
375.297 384.866 mo
376.017 384.866 li
@
379.137 384.866 mo
379.857 384.866 li
@
382.977 384.866 mo
383.697 384.866 li
@
386.817 384.866 mo
387.537 384.866 li
@
390.657 384.866 mo
391.377 384.866 li
@
394.497 384.866 mo
395.217 384.866 li
@
398.337 384.866 mo
399.057 384.866 li
@
402.177 384.866 mo
402.897 384.866 li
@
406.017 384.866 mo
406.737 384.866 li
@
409.857 384.866 mo
410.577 384.866 li
@
413.697 384.866 mo
414.417 384.866 li
@
417.537 384.866 mo
418.257 384.866 li
@
421.377 384.866 mo
422.097 384.866 li
@
425.217 384.866 mo
425.937 384.866 li
@
429.057 384.866 mo
429.777 384.866 li
@
432.897 384.866 mo
433.617 384.866 li
@
436.737 384.866 mo
437.457 384.866 li
@
440.577 384.866 mo
441.297 384.866 li
@
444.417 384.866 mo
445.137 384.866 li
@
448.257 384.866 mo
448.977 384.866 li
@
452.097 384.866 mo
452.817 384.866 li
@
455.938 384.866 mo
456.657 384.866 li
@
459.778 384.866 mo
460.498 384.866 li
@
463.618 384.866 mo
464.338 384.866 li
@
467.458 384.866 mo
468.178 384.866 li
@
471.298 384.866 mo
472.018 384.866 li
@
475.138 384.866 mo
475.858 384.866 li
@
478.978 384.866 mo
479.698 384.866 li
@
482.818 384.866 mo
483.538 384.866 li
@
486.658 384.866 mo
487.378 384.866 li
@
490.498 384.866 mo
491.218 384.866 li
@
494.338 384.866 mo
495.058 384.866 li
@
498.178 384.866 mo
498.898 384.866 li
@
502.018 384.866 mo
502.738 384.866 li
@
505.858 384.866 mo
506.578 384.866 li
@
509.698 384.866 mo
510.418 384.866 li
@
513.538 384.866 mo
514.258 384.866 li
@
517.378 384.866 mo
518.098 384.866 li
@
521.218 384.866 mo
521.938 384.866 li
@
525.058 384.866 mo
525.778 384.866 li
@
528.898 384.866 mo
529.618 384.866 li
@
532.738 384.866 mo
533.458 384.866 li
@
536.578 384.866 mo
537.298 384.866 li
@
540.418 384.866 mo
541.138 384.866 li
@
544.258 384.866 mo
544.978 384.866 li
@
548.098 384.866 mo
548.818 384.866 li
@
551.938 384.866 mo
552.658 384.866 li
@
555.778 384.866 mo
556.498 384.866 li
@
559.618 384.866 mo
560.338 384.866 li
@
563.458 384.866 mo
564.178 384.866 li
@
567.298 384.866 mo
568.018 384.866 li
@
571.138 384.866 mo
571.858 384.866 li
@
574.978 384.866 mo
575.698 384.866 li
@
578.818 384.866 mo
579.538 384.866 li
@
582.658 384.866 mo
583.378 384.866 li
@
586.498 384.866 mo
587.218 384.866 li
@
590.338 384.866 mo
591.058 384.866 li
@
594.178 384.866 mo
594.898 384.866 li
@
598.018 384.866 mo
598.738 384.866 li
@
601.858 384.866 mo
602.578 384.866 li
@
605.698 384.866 mo
606.418 384.866 li
@
609.538 384.866 mo
610.258 384.866 li
@
613.378 384.866 mo
614.098 384.866 li
@
617.218 384.866 mo
617.938 384.866 li
@
621.058 384.866 mo
621.778 384.866 li
@
624.898 384.866 mo
625.618 384.866 li
@
628.738 384.866 mo
629.458 384.866 li
@
632.578 384.866 mo
633.298 384.866 li
@
636.419 384.866 mo
637.138 384.866 li
@
640.259 384.866 mo
640.979 384.866 li
@
644.099 384.866 mo
644.819 384.866 li
@
87.2966 343.346 mo
88.0166 343.346 li
@
91.1366 343.346 mo
91.8566 343.346 li
@
94.9766 343.346 mo
95.6966 343.346 li
@
98.8166 343.346 mo
99.5366 343.346 li
@
102.657 343.346 mo
103.377 343.346 li
@
106.497 343.346 mo
107.217 343.346 li
@
110.337 343.347 mo
111.057 343.347 li
@
114.177 343.347 mo
114.897 343.347 li
@
118.017 343.347 mo
118.737 343.347 li
@
121.857 343.347 mo
122.577 343.347 li
@
125.697 343.347 mo
126.417 343.347 li
@
129.537 343.347 mo
130.257 343.347 li
@
133.377 343.347 mo
134.097 343.347 li
@
137.217 343.347 mo
137.937 343.347 li
@
141.057 343.347 mo
141.777 343.347 li
@
144.897 343.347 mo
145.617 343.347 li
@
148.737 343.347 mo
149.456 343.347 li
@
152.577 343.347 mo
153.296 343.347 li
@
156.417 343.347 mo
157.136 343.347 li
@
160.257 343.347 mo
160.976 343.347 li
@
164.096 343.347 mo
164.816 343.347 li
@
167.936 343.347 mo
168.656 343.347 li
@
171.776 343.347 mo
172.496 343.347 li
@
175.616 343.347 mo
176.336 343.347 li
@
179.456 343.347 mo
180.176 343.347 li
@
183.296 343.347 mo
184.016 343.347 li
@
187.136 343.347 mo
187.856 343.347 li
@
190.976 343.347 mo
191.696 343.347 li
@
194.816 343.347 mo
195.536 343.347 li
@
198.656 343.347 mo
199.376 343.347 li
@
202.496 343.347 mo
203.216 343.347 li
@
206.336 343.347 mo
207.056 343.347 li
@
210.176 343.347 mo
210.896 343.347 li
@
214.016 343.347 mo
214.736 343.347 li
@
217.856 343.347 mo
218.576 343.347 li
@
221.696 343.347 mo
222.416 343.347 li
@
225.536 343.347 mo
226.256 343.347 li
@
229.376 343.347 mo
230.096 343.347 li
@
233.216 343.347 mo
233.936 343.347 li
@
237.056 343.347 mo
237.776 343.347 li
@
240.896 343.347 mo
241.616 343.347 li
@
244.736 343.347 mo
245.456 343.347 li
@
248.576 343.347 mo
249.296 343.347 li
@
252.417 343.347 mo
253.137 343.347 li
@
256.257 343.347 mo
256.977 343.347 li
@
260.097 343.347 mo
260.817 343.347 li
@
263.937 343.347 mo
264.657 343.347 li
@
267.777 343.347 mo
268.497 343.347 li
@
271.617 343.347 mo
272.337 343.347 li
@
275.457 343.347 mo
276.177 343.347 li
@
279.297 343.347 mo
280.017 343.347 li
@
283.137 343.347 mo
283.857 343.347 li
@
286.977 343.347 mo
287.697 343.347 li
@
290.817 343.347 mo
291.537 343.347 li
@
294.657 343.347 mo
295.377 343.347 li
@
298.497 343.347 mo
299.217 343.347 li
@
302.337 343.347 mo
303.057 343.347 li
@
306.177 343.347 mo
306.897 343.347 li
@
310.017 343.347 mo
310.737 343.347 li
@
313.857 343.347 mo
314.577 343.347 li
@
317.697 343.347 mo
318.417 343.347 li
@
321.537 343.347 mo
322.257 343.347 li
@
325.377 343.347 mo
326.097 343.347 li
@
329.217 343.347 mo
329.937 343.347 li
@
333.057 343.347 mo
333.777 343.347 li
@
336.897 343.347 mo
337.617 343.347 li
@
340.737 343.347 mo
341.457 343.347 li
@
344.577 343.347 mo
345.297 343.347 li
@
348.417 343.347 mo
349.137 343.347 li
@
352.257 343.347 mo
352.977 343.347 li
@
356.097 343.347 mo
356.817 343.347 li
@
359.937 343.347 mo
360.657 343.347 li
@
363.777 343.347 mo
364.497 343.347 li
@
367.617 343.347 mo
368.337 343.347 li
@
371.457 343.347 mo
372.177 343.347 li
@
375.297 343.347 mo
376.017 343.347 li
@
379.137 343.347 mo
379.857 343.347 li
@
382.977 343.347 mo
383.697 343.347 li
@
386.817 343.347 mo
387.537 343.347 li
@
390.657 343.347 mo
391.377 343.347 li
@
394.497 343.347 mo
395.217 343.347 li
@
398.337 343.347 mo
399.057 343.347 li
@
402.177 343.347 mo
402.897 343.347 li
@
406.017 343.347 mo
406.737 343.347 li
@
409.857 343.347 mo
410.577 343.347 li
@
413.697 343.347 mo
414.417 343.347 li
@
417.537 343.347 mo
418.257 343.347 li
@
421.377 343.347 mo
422.097 343.347 li
@
425.217 343.347 mo
425.937 343.347 li
@
429.057 343.347 mo
429.777 343.347 li
@
432.897 343.347 mo
433.617 343.347 li
@
436.737 343.347 mo
437.457 343.347 li
@
440.577 343.347 mo
441.297 343.347 li
@
444.417 343.347 mo
445.137 343.347 li
@
448.257 343.347 mo
448.977 343.347 li
@
452.097 343.347 mo
452.817 343.347 li
@
455.938 343.347 mo
456.657 343.347 li
@
459.778 343.347 mo
460.498 343.347 li
@
463.618 343.347 mo
464.338 343.347 li
@
467.458 343.347 mo
468.178 343.347 li
@
471.298 343.347 mo
472.018 343.347 li
@
475.138 343.347 mo
475.858 343.347 li
@
478.978 343.347 mo
479.698 343.347 li
@
482.818 343.347 mo
483.538 343.347 li
@
486.658 343.347 mo
487.378 343.347 li
@
490.498 343.347 mo
491.218 343.347 li
@
494.338 343.347 mo
495.058 343.347 li
@
498.178 343.347 mo
498.898 343.347 li
@
502.018 343.347 mo
502.738 343.347 li
@
505.858 343.347 mo
506.578 343.347 li
@
509.698 343.347 mo
510.418 343.347 li
@
513.538 343.347 mo
514.258 343.347 li
@
517.378 343.347 mo
518.098 343.347 li
@
521.218 343.347 mo
521.938 343.347 li
@
525.058 343.347 mo
525.778 343.347 li
@
528.898 343.347 mo
529.618 343.347 li
@
532.738 343.347 mo
533.458 343.347 li
@
536.578 343.347 mo
537.298 343.347 li
@
540.418 343.347 mo
541.138 343.347 li
@
544.258 343.347 mo
544.978 343.347 li
@
548.098 343.347 mo
548.818 343.347 li
@
551.938 343.347 mo
552.658 343.347 li
@
555.779 343.347 mo
556.498 343.347 li
@
559.619 343.347 mo
560.339 343.347 li
@
563.459 343.347 mo
564.179 343.347 li
@
567.299 343.347 mo
568.019 343.347 li
@
571.139 343.347 mo
571.859 343.347 li
@
574.979 343.347 mo
575.699 343.347 li
@
578.819 343.347 mo
579.539 343.347 li
@
582.659 343.347 mo
583.379 343.347 li
@
586.499 343.347 mo
587.219 343.347 li
@
590.339 343.347 mo
591.059 343.347 li
@
594.179 343.347 mo
594.899 343.347 li
@
598.019 343.347 mo
598.739 343.347 li
@
601.859 343.347 mo
602.579 343.347 li
@
605.699 343.347 mo
606.419 343.347 li
@
609.539 343.347 mo
610.259 343.347 li
@
613.379 343.347 mo
614.099 343.347 li
@
617.219 343.347 mo
617.939 343.347 li
@
621.059 343.347 mo
621.779 343.347 li
@
624.899 343.347 mo
625.619 343.347 li
@
628.739 343.347 mo
629.459 343.347 li
@
632.579 343.347 mo
633.299 343.347 li
@
636.419 343.347 mo
637.139 343.347 li
@
640.259 343.347 mo
640.979 343.347 li
@
644.099 343.347 mo
644.819 343.347 li
@
87.2971 302.068 mo
88.0171 302.068 li
@
91.1371 302.068 mo
91.8571 302.068 li
@
94.9771 302.068 mo
95.6971 302.068 li
@
98.8171 302.068 mo
99.5371 302.068 li
@
102.657 302.068 mo
103.377 302.068 li
@
106.497 302.068 mo
107.217 302.068 li
@
110.337 302.068 mo
111.057 302.068 li
@
114.177 302.068 mo
114.897 302.068 li
@
118.017 302.068 mo
118.737 302.068 li
@
121.857 302.068 mo
122.577 302.068 li
@
125.697 302.068 mo
126.417 302.068 li
@
129.537 302.068 mo
130.257 302.068 li
@
133.377 302.068 mo
134.097 302.068 li
@
137.217 302.068 mo
137.937 302.068 li
@
141.057 302.068 mo
141.777 302.068 li
@
144.897 302.068 mo
145.617 302.068 li
@
148.737 302.068 mo
149.457 302.068 li
@
152.577 302.068 mo
153.297 302.068 li
@
156.417 302.068 mo
157.137 302.068 li
@
160.257 302.068 mo
160.977 302.068 li
@
164.097 302.068 mo
164.817 302.068 li
@
167.937 302.068 mo
168.657 302.068 li
@
171.777 302.068 mo
172.497 302.068 li
@
175.617 302.068 mo
176.337 302.068 li
@
179.457 302.068 mo
180.177 302.068 li
@
183.297 302.068 mo
184.017 302.068 li
@
187.137 302.068 mo
187.857 302.068 li
@
190.977 302.068 mo
191.697 302.068 li
@
194.817 302.068 mo
195.537 302.068 li
@
198.657 302.068 mo
199.377 302.068 li
@
202.497 302.068 mo
203.217 302.068 li
@
206.337 302.068 mo
207.057 302.068 li
@
210.177 302.068 mo
210.897 302.068 li
@
214.017 302.068 mo
214.737 302.068 li
@
217.857 302.068 mo
218.577 302.068 li
@
221.697 302.068 mo
222.417 302.068 li
@
225.537 302.068 mo
226.257 302.068 li
@
229.377 302.068 mo
230.097 302.068 li
@
233.217 302.068 mo
233.937 302.068 li
@
237.057 302.068 mo
237.777 302.068 li
@
240.897 302.068 mo
241.617 302.068 li
@
244.737 302.068 mo
245.457 302.068 li
@
248.577 302.068 mo
249.297 302.068 li
@
252.418 302.068 mo
253.138 302.068 li
@
256.258 302.068 mo
256.978 302.068 li
@
260.098 302.068 mo
260.818 302.068 li
@
263.938 302.068 mo
264.658 302.068 li
@
267.778 302.068 mo
268.498 302.068 li
@
271.618 302.068 mo
272.338 302.068 li
@
275.458 302.068 mo
276.178 302.068 li
@
279.298 302.068 mo
280.018 302.068 li
@
283.138 302.068 mo
283.858 302.068 li
@
286.978 302.068 mo
287.698 302.068 li
@
290.818 302.068 mo
291.538 302.068 li
@
294.658 302.068 mo
295.378 302.068 li
@
298.498 302.068 mo
299.218 302.068 li
@
302.338 302.068 mo
303.058 302.068 li
@
306.178 302.068 mo
306.898 302.068 li
@
310.018 302.068 mo
310.738 302.068 li
@
313.858 302.068 mo
314.578 302.068 li
@
317.698 302.068 mo
318.418 302.068 li
@
321.538 302.068 mo
322.258 302.068 li
@
325.378 302.068 mo
326.098 302.068 li
@
329.218 302.068 mo
329.938 302.068 li
@
333.058 302.068 mo
333.778 302.068 li
@
336.898 302.068 mo
337.618 302.068 li
@
340.738 302.068 mo
341.458 302.068 li
@
344.578 302.068 mo
345.298 302.068 li
@
348.418 302.068 mo
349.138 302.068 li
@
352.258 302.068 mo
352.978 302.068 li
@
356.098 302.068 mo
356.818 302.068 li
@
359.938 302.068 mo
360.658 302.068 li
@
363.778 302.068 mo
364.498 302.068 li
@
367.618 302.068 mo
368.338 302.068 li
@
371.458 302.068 mo
372.178 302.068 li
@
375.298 302.068 mo
376.018 302.068 li
@
379.138 302.068 mo
379.858 302.068 li
@
382.978 302.068 mo
383.698 302.068 li
@
386.818 302.068 mo
387.538 302.068 li
@
390.658 302.068 mo
391.378 302.068 li
@
394.498 302.068 mo
395.218 302.068 li
@
398.338 302.068 mo
399.058 302.068 li
@
402.178 302.068 mo
402.898 302.068 li
@
406.018 302.068 mo
406.738 302.068 li
@
409.858 302.068 mo
410.578 302.068 li
@
413.698 302.068 mo
414.418 302.068 li
@
417.538 302.068 mo
418.258 302.068 li
@
421.378 302.068 mo
422.098 302.068 li
@
425.218 302.068 mo
425.938 302.068 li
@
429.058 302.068 mo
429.778 302.068 li
@
432.898 302.068 mo
433.618 302.068 li
@
436.738 302.068 mo
437.458 302.068 li
@
440.578 302.068 mo
441.298 302.068 li
@
444.418 302.068 mo
445.138 302.068 li
@
448.258 302.068 mo
448.978 302.068 li
@
452.098 302.068 mo
452.818 302.068 li
@
455.939 302.068 mo
456.658 302.068 li
@
459.779 302.068 mo
460.499 302.068 li
@
463.619 302.068 mo
464.339 302.068 li
@
467.459 302.068 mo
468.179 302.068 li
@
471.299 302.068 mo
472.019 302.068 li
@
475.139 302.068 mo
475.859 302.068 li
@
478.979 302.068 mo
479.699 302.068 li
@
482.819 302.068 mo
483.539 302.068 li
@
486.659 302.068 mo
487.379 302.068 li
@
490.499 302.068 mo
491.219 302.068 li
@
494.339 302.068 mo
495.059 302.068 li
@
498.179 302.068 mo
498.899 302.068 li
@
502.019 302.068 mo
502.739 302.068 li
@
505.859 302.068 mo
506.579 302.068 li
@
509.699 302.068 mo
510.419 302.068 li
@
513.539 302.068 mo
514.259 302.068 li
@
517.379 302.068 mo
518.099 302.068 li
@
521.219 302.068 mo
521.939 302.068 li
@
525.059 302.068 mo
525.779 302.068 li
@
528.899 302.068 mo
529.619 302.068 li
@
532.739 302.068 mo
533.459 302.068 li
@
536.579 302.068 mo
537.299 302.068 li
@
540.419 302.068 mo
541.139 302.068 li
@
544.259 302.068 mo
544.979 302.068 li
@
548.099 302.068 mo
548.819 302.068 li
@
551.939 302.068 mo
552.659 302.068 li
@
555.779 302.068 mo
556.499 302.068 li
@
559.619 302.068 mo
560.339 302.068 li
@
563.459 302.068 mo
564.179 302.068 li
@
567.299 302.068 mo
568.019 302.068 li
@
571.139 302.068 mo
571.859 302.068 li
@
574.979 302.068 mo
575.699 302.068 li
@
578.819 302.068 mo
579.539 302.068 li
@
582.659 302.068 mo
583.379 302.068 li
@
586.499 302.068 mo
587.219 302.068 li
@
590.339 302.068 mo
591.059 302.068 li
@
594.179 302.068 mo
594.899 302.068 li
@
598.019 302.068 mo
598.739 302.068 li
@
601.859 302.068 mo
602.579 302.068 li
@
605.699 302.068 mo
606.419 302.068 li
@
609.539 302.068 mo
610.259 302.068 li
@
613.379 302.068 mo
614.099 302.068 li
@
617.219 302.068 mo
617.939 302.068 li
@
621.06 302.068 mo
621.779 302.068 li
@
624.9 302.068 mo
625.62 302.068 li
@
628.74 302.068 mo
629.46 302.068 li
@
632.58 302.068 mo
633.3 302.068 li
@
636.42 302.068 mo
637.14 302.068 li
@
640.26 302.068 mo
640.98 302.068 li
@
644.1 302.068 mo
644.82 302.068 li
@
87.2977 260.548 mo
88.0177 260.548 li
@
91.1377 260.548 mo
91.8577 260.548 li
@
94.9777 260.548 mo
95.6977 260.548 li
@
98.8177 260.548 mo
99.5377 260.548 li
@
102.658 260.548 mo
103.378 260.548 li
@
106.498 260.548 mo
107.218 260.548 li
@
110.338 260.548 mo
111.058 260.548 li
@
114.178 260.548 mo
114.898 260.548 li
@
118.018 260.548 mo
118.738 260.548 li
@
121.858 260.548 mo
122.578 260.548 li
@
125.698 260.548 mo
126.418 260.548 li
@
129.538 260.548 mo
130.258 260.548 li
@
133.378 260.548 mo
134.098 260.548 li
@
137.218 260.548 mo
137.938 260.548 li
@
141.058 260.548 mo
141.778 260.548 li
@
144.898 260.548 mo
145.618 260.548 li
@
148.738 260.548 mo
149.458 260.548 li
@
152.578 260.548 mo
153.298 260.548 li
@
156.418 260.548 mo
157.138 260.548 li
@
160.258 260.548 mo
160.978 260.548 li
@
164.098 260.548 mo
164.818 260.548 li
@
167.938 260.548 mo
168.658 260.548 li
@
171.778 260.548 mo
172.498 260.548 li
@
175.618 260.548 mo
176.338 260.548 li
@
179.458 260.548 mo
180.178 260.548 li
@
183.298 260.548 mo
184.018 260.548 li
@
187.138 260.548 mo
187.858 260.548 li
@
190.978 260.548 mo
191.698 260.548 li
@
194.818 260.548 mo
195.538 260.548 li
@
198.658 260.548 mo
199.378 260.548 li
@
202.498 260.548 mo
203.218 260.548 li
@
206.338 260.548 mo
207.058 260.548 li
@
210.178 260.548 mo
210.898 260.548 li
@
214.018 260.548 mo
214.738 260.548 li
@
217.858 260.548 mo
218.578 260.548 li
@
221.698 260.548 mo
222.418 260.548 li
@
225.538 260.548 mo
226.258 260.548 li
@
229.378 260.548 mo
230.098 260.548 li
@
233.218 260.548 mo
233.938 260.548 li
@
237.058 260.548 mo
237.778 260.548 li
@
240.898 260.548 mo
241.618 260.548 li
@
244.738 260.548 mo
245.458 260.548 li
@
248.578 260.548 mo
249.298 260.548 li
@
252.419 260.548 mo
253.139 260.548 li
@
256.259 260.548 mo
256.978 260.548 li
@
260.099 260.548 mo
260.818 260.548 li
@
263.939 260.548 mo
264.658 260.548 li
@
267.779 260.548 mo
268.498 260.548 li
@
271.618 260.548 mo
272.338 260.548 li
@
275.458 260.548 mo
276.178 260.548 li
@
279.298 260.548 mo
280.018 260.548 li
@
283.138 260.548 mo
283.858 260.548 li
@
286.978 260.548 mo
287.698 260.548 li
@
290.818 260.548 mo
291.538 260.548 li
@
294.658 260.548 mo
295.378 260.548 li
@
298.498 260.548 mo
299.218 260.548 li
@
302.338 260.548 mo
303.058 260.548 li
@
306.178 260.548 mo
306.898 260.548 li
@
310.018 260.548 mo
310.738 260.548 li
@
313.858 260.548 mo
314.578 260.548 li
@
317.698 260.548 mo
318.418 260.548 li
@
321.538 260.548 mo
322.258 260.548 li
@
325.378 260.548 mo
326.098 260.548 li
@
329.218 260.548 mo
329.938 260.548 li
@
333.058 260.548 mo
333.778 260.548 li
@
336.898 260.548 mo
337.618 260.548 li
@
340.738 260.548 mo
341.458 260.548 li
@
344.578 260.548 mo
345.298 260.548 li
@
348.418 260.548 mo
349.138 260.548 li
@
352.258 260.548 mo
352.978 260.548 li
@
356.098 260.548 mo
356.818 260.548 li
@
359.938 260.548 mo
360.658 260.548 li
@
363.778 260.548 mo
364.498 260.548 li
@
367.618 260.548 mo
368.338 260.548 li
@
371.458 260.548 mo
372.178 260.548 li
@
375.298 260.548 mo
376.018 260.548 li
@
379.138 260.548 mo
379.858 260.548 li
@
382.978 260.548 mo
383.698 260.548 li
@
386.818 260.548 mo
387.538 260.548 li
@
390.658 260.548 mo
391.378 260.548 li
@
394.498 260.548 mo
395.218 260.548 li
@
398.338 260.548 mo
399.058 260.548 li
@
402.178 260.548 mo
402.898 260.548 li
@
406.018 260.548 mo
406.738 260.548 li
@
409.858 260.548 mo
410.578 260.548 li
@
413.698 260.548 mo
414.418 260.548 li
@
417.538 260.548 mo
418.258 260.548 li
@
421.378 260.548 mo
422.098 260.548 li
@
425.218 260.548 mo
425.938 260.548 li
@
429.058 260.548 mo
429.778 260.548 li
@
432.898 260.548 mo
433.618 260.548 li
@
436.738 260.548 mo
437.458 260.548 li
@
440.578 260.548 mo
441.298 260.548 li
@
444.418 260.548 mo
445.138 260.548 li
@
448.258 260.548 mo
448.978 260.548 li
@
452.098 260.548 mo
452.818 260.548 li
@
455.939 260.548 mo
456.658 260.548 li
@
459.779 260.548 mo
460.499 260.548 li
@
463.619 260.548 mo
464.339 260.548 li
@
467.459 260.548 mo
468.179 260.548 li
@
471.299 260.548 mo
472.019 260.548 li
@
475.139 260.548 mo
475.859 260.548 li
@
478.979 260.548 mo
479.699 260.548 li
@
482.819 260.548 mo
483.539 260.548 li
@
486.659 260.548 mo
487.379 260.548 li
@
490.499 260.548 mo
491.219 260.548 li
@
494.339 260.548 mo
495.059 260.548 li
@
498.179 260.548 mo
498.899 260.548 li
@
502.019 260.548 mo
502.739 260.548 li
@
505.859 260.548 mo
506.579 260.548 li
@
509.699 260.548 mo
510.419 260.548 li
@
513.539 260.548 mo
514.259 260.548 li
@
517.379 260.548 mo
518.099 260.548 li
@
521.219 260.548 mo
521.939 260.548 li
@
525.059 260.548 mo
525.779 260.548 li
@
528.899 260.548 mo
529.619 260.548 li
@
532.739 260.548 mo
533.459 260.548 li
@
536.579 260.548 mo
537.299 260.548 li
@
540.419 260.548 mo
541.139 260.548 li
@
544.26 260.548 mo
544.979 260.548 li
@
548.1 260.548 mo
548.82 260.548 li
@
551.94 260.548 mo
552.66 260.548 li
@
555.78 260.548 mo
556.5 260.548 li
@
559.62 260.548 mo
560.34 260.548 li
@
563.46 260.548 mo
564.18 260.548 li
@
567.3 260.548 mo
568.02 260.548 li
@
571.14 260.548 mo
571.86 260.548 li
@
574.98 260.548 mo
575.7 260.548 li
@
578.82 260.548 mo
579.54 260.548 li
@
582.66 260.548 mo
583.38 260.548 li
@
586.5 260.548 mo
587.22 260.548 li
@
590.34 260.548 mo
591.06 260.548 li
@
594.18 260.548 mo
594.9 260.548 li
@
598.02 260.548 mo
598.74 260.548 li
@
601.86 260.548 mo
602.58 260.548 li
@
605.7 260.548 mo
606.42 260.548 li
@
609.54 260.548 mo
610.26 260.548 li
@
613.38 260.548 mo
614.1 260.548 li
@
617.22 260.548 mo
617.94 260.548 li
@
621.06 260.548 mo
621.78 260.548 li
@
624.9 260.548 mo
625.62 260.548 li
@
628.74 260.548 mo
629.46 260.548 li
@
632.58 260.548 mo
633.3 260.548 li
@
636.42 260.548 mo
637.14 260.548 li
@
640.26 260.548 mo
640.98 260.548 li
@
644.1 260.548 mo
644.82 260.548 li
@
87.2982 219.267 mo
88.0182 219.267 li
@
91.1382 219.267 mo
91.8582 219.267 li
@
94.9782 219.267 mo
95.6982 219.267 li
@
98.8182 219.267 mo
99.5382 219.267 li
@
102.658 219.267 mo
103.378 219.267 li
@
106.498 219.267 mo
107.218 219.267 li
@
110.338 219.267 mo
111.058 219.267 li
@
114.178 219.267 mo
114.898 219.267 li
@
118.018 219.267 mo
118.738 219.267 li
@
121.858 219.267 mo
122.578 219.267 li
@
125.698 219.267 mo
126.418 219.267 li
@
129.538 219.267 mo
130.258 219.267 li
@
133.378 219.267 mo
134.098 219.267 li
@
137.218 219.267 mo
137.938 219.267 li
@
141.058 219.267 mo
141.778 219.267 li
@
144.898 219.267 mo
145.618 219.267 li
@
148.738 219.267 mo
149.458 219.267 li
@
152.578 219.267 mo
153.298 219.267 li
@
156.418 219.267 mo
157.138 219.267 li
@
160.258 219.267 mo
160.978 219.267 li
@
164.098 219.267 mo
164.818 219.267 li
@
167.938 219.267 mo
168.658 219.267 li
@
171.778 219.267 mo
172.498 219.267 li
@
175.618 219.267 mo
176.338 219.267 li
@
179.458 219.267 mo
180.178 219.267 li
@
183.298 219.267 mo
184.018 219.267 li
@
187.138 219.267 mo
187.858 219.267 li
@
190.978 219.267 mo
191.698 219.267 li
@
194.818 219.267 mo
195.538 219.267 li
@
198.658 219.267 mo
199.378 219.267 li
@
202.498 219.267 mo
203.218 219.267 li
@
206.338 219.267 mo
207.058 219.267 li
@
210.178 219.267 mo
210.898 219.267 li
@
214.018 219.267 mo
214.738 219.267 li
@
217.858 219.267 mo
218.578 219.267 li
@
221.698 219.267 mo
222.418 219.267 li
@
225.538 219.267 mo
226.258 219.267 li
@
229.378 219.267 mo
230.098 219.267 li
@
233.218 219.267 mo
233.938 219.267 li
@
237.058 219.267 mo
237.778 219.267 li
@
240.898 219.267 mo
241.618 219.267 li
@
244.738 219.267 mo
245.458 219.267 li
@
248.578 219.267 mo
249.298 219.267 li
@
252.419 219.267 mo
253.139 219.267 li
@
256.259 219.267 mo
256.979 219.267 li
@
260.099 219.267 mo
260.819 219.267 li
@
263.939 219.267 mo
264.659 219.267 li
@
267.779 219.267 mo
268.499 219.267 li
@
271.619 219.267 mo
272.339 219.267 li
@
275.459 219.267 mo
276.179 219.267 li
@
279.299 219.267 mo
280.019 219.267 li
@
283.139 219.267 mo
283.859 219.267 li
@
286.979 219.267 mo
287.699 219.267 li
@
290.819 219.267 mo
291.539 219.267 li
@
294.659 219.267 mo
295.379 219.267 li
@
298.499 219.267 mo
299.219 219.267 li
@
302.339 219.267 mo
303.059 219.267 li
@
306.179 219.267 mo
306.899 219.267 li
@
310.019 219.267 mo
310.739 219.267 li
@
313.859 219.267 mo
314.579 219.267 li
@
317.699 219.267 mo
318.419 219.267 li
@
321.539 219.267 mo
322.259 219.267 li
@
325.379 219.267 mo
326.099 219.267 li
@
329.219 219.267 mo
329.939 219.267 li
@
333.059 219.267 mo
333.779 219.267 li
@
336.899 219.267 mo
337.619 219.267 li
@
340.739 219.267 mo
341.459 219.267 li
@
344.579 219.267 mo
345.299 219.267 li
@
348.419 219.267 mo
349.139 219.267 li
@
352.259 219.267 mo
352.979 219.267 li
@
356.099 219.267 mo
356.819 219.267 li
@
359.939 219.267 mo
360.659 219.267 li
@
363.779 219.267 mo
364.499 219.267 li
@
367.619 219.267 mo
368.339 219.267 li
@
371.459 219.267 mo
372.179 219.267 li
@
375.299 219.267 mo
376.019 219.267 li
@
379.139 219.267 mo
379.859 219.267 li
@
382.979 219.267 mo
383.699 219.267 li
@
386.819 219.267 mo
387.539 219.267 li
@
390.659 219.267 mo
391.379 219.267 li
@
394.499 219.267 mo
395.219 219.267 li
@
398.339 219.267 mo
399.059 219.267 li
@
402.179 219.267 mo
402.899 219.267 li
@
406.019 219.267 mo
406.739 219.267 li
@
409.859 219.267 mo
410.579 219.267 li
@
413.699 219.267 mo
414.419 219.267 li
@
417.539 219.267 mo
418.259 219.267 li
@
421.379 219.267 mo
422.099 219.267 li
@
425.219 219.267 mo
425.939 219.267 li
@
429.059 219.267 mo
429.779 219.267 li
@
432.899 219.267 mo
433.619 219.267 li
@
436.739 219.267 mo
437.459 219.267 li
@
440.579 219.267 mo
441.299 219.267 li
@
444.419 219.267 mo
445.139 219.267 li
@
448.259 219.267 mo
448.979 219.267 li
@
452.099 219.267 mo
452.819 219.267 li
@
455.94 219.267 mo
456.659 219.267 li
@
459.78 219.267 mo
460.5 219.267 li
@
463.62 219.267 mo
464.34 219.267 li
@
467.46 219.267 mo
468.18 219.267 li
@
471.3 219.267 mo
472.02 219.267 li
@
475.14 219.267 mo
475.86 219.267 li
@
478.98 219.267 mo
479.7 219.267 li
@
482.82 219.267 mo
483.54 219.267 li
@
486.66 219.267 mo
487.38 219.267 li
@
490.5 219.267 mo
491.22 219.267 li
@
494.34 219.267 mo
495.06 219.267 li
@
498.18 219.267 mo
498.9 219.267 li
@
502.02 219.267 mo
502.74 219.267 li
@
505.86 219.267 mo
506.58 219.267 li
@
509.7 219.267 mo
510.42 219.267 li
@
513.54 219.267 mo
514.26 219.267 li
@
517.38 219.267 mo
518.1 219.267 li
@
521.22 219.267 mo
521.94 219.267 li
@
525.06 219.267 mo
525.78 219.267 li
@
528.9 219.267 mo
529.62 219.267 li
@
532.74 219.267 mo
533.46 219.267 li
@
536.58 219.267 mo
537.3 219.267 li
@
540.42 219.267 mo
541.14 219.267 li
@
544.26 219.267 mo
544.98 219.267 li
@
548.1 219.267 mo
548.82 219.267 li
@
551.94 219.267 mo
552.66 219.267 li
@
555.78 219.267 mo
556.5 219.267 li
@
559.62 219.267 mo
560.34 219.267 li
@
563.46 219.267 mo
564.18 219.267 li
@
567.3 219.267 mo
568.02 219.267 li
@
571.14 219.267 mo
571.86 219.267 li
@
574.98 219.267 mo
575.7 219.267 li
@
578.82 219.267 mo
579.54 219.267 li
@
582.66 219.267 mo
583.38 219.267 li
@
586.5 219.267 mo
587.22 219.267 li
@
590.34 219.267 mo
591.06 219.267 li
@
594.18 219.267 mo
594.9 219.267 li
@
598.02 219.267 mo
598.74 219.267 li
@
601.86 219.267 mo
602.58 219.267 li
@
605.701 219.267 mo
606.42 219.267 li
@
609.541 219.267 mo
610.26 219.267 li
@
613.381 219.267 mo
614.101 219.267 li
@
617.221 219.267 mo
617.941 219.267 li
@
621.061 219.267 mo
621.781 219.267 li
@
624.901 219.267 mo
625.621 219.267 li
@
628.741 219.267 mo
629.461 219.267 li
@
632.581 219.267 mo
633.301 219.267 li
@
636.421 219.267 mo
637.141 219.267 li
@
640.261 219.267 mo
640.981 219.267 li
@
644.101 219.267 mo
644.821 219.267 li
@
87.2988 177.987 mo
88.0188 177.987 li
@
91.1388 177.987 mo
91.8588 177.987 li
@
94.9788 177.987 mo
95.6988 177.987 li
@
98.8188 177.987 mo
99.5387 177.987 li
@
102.659 177.987 mo
103.379 177.987 li
@
106.499 177.987 mo
107.219 177.987 li
@
110.339 177.987 mo
111.059 177.987 li
@
114.179 177.987 mo
114.899 177.987 li
@
118.019 177.987 mo
118.739 177.987 li
@
121.859 177.987 mo
122.579 177.987 li
@
125.699 177.987 mo
126.419 177.987 li
@
129.539 177.987 mo
130.259 177.987 li
@
133.379 177.987 mo
134.099 177.987 li
@
137.219 177.987 mo
137.939 177.987 li
@
141.059 177.987 mo
141.779 177.987 li
@
144.899 177.987 mo
145.619 177.987 li
@
148.739 177.987 mo
149.459 177.987 li
@
152.579 177.987 mo
153.299 177.987 li
@
156.419 177.987 mo
157.139 177.987 li
@
160.259 177.987 mo
160.979 177.987 li
@
164.099 177.987 mo
164.819 177.987 li
@
167.939 177.987 mo
168.659 177.987 li
@
171.779 177.987 mo
172.499 177.987 li
@
175.619 177.987 mo
176.339 177.987 li
@
179.459 177.987 mo
180.179 177.987 li
@
183.299 177.987 mo
184.019 177.987 li
@
187.139 177.987 mo
187.859 177.987 li
@
190.979 177.987 mo
191.699 177.987 li
@
194.819 177.987 mo
195.539 177.987 li
@
198.659 177.987 mo
199.379 177.987 li
@
202.499 177.987 mo
203.219 177.987 li
@
206.339 177.987 mo
207.059 177.987 li
@
210.179 177.987 mo
210.899 177.987 li
@
214.019 177.987 mo
214.739 177.987 li
@
217.859 177.987 mo
218.579 177.987 li
@
221.699 177.987 mo
222.419 177.987 li
@
225.539 177.987 mo
226.259 177.987 li
@
229.379 177.987 mo
230.099 177.987 li
@
233.219 177.987 mo
233.939 177.987 li
@
237.059 177.987 mo
237.779 177.987 li
@
240.899 177.987 mo
241.619 177.987 li
@
244.739 177.987 mo
245.459 177.987 li
@
248.579 177.987 mo
249.299 177.987 li
@
252.42 177.987 mo
253.14 177.987 li
@
256.26 177.987 mo
256.98 177.987 li
@
260.1 177.987 mo
260.82 177.987 li
@
263.94 177.987 mo
264.66 177.987 li
@
267.78 177.987 mo
268.5 177.987 li
@
271.62 177.987 mo
272.34 177.987 li
@
275.46 177.987 mo
276.18 177.987 li
@
279.3 177.987 mo
280.02 177.987 li
@
283.14 177.987 mo
283.86 177.987 li
@
286.98 177.987 mo
287.7 177.987 li
@
290.82 177.987 mo
291.54 177.987 li
@
294.66 177.987 mo
295.38 177.987 li
@
298.5 177.987 mo
299.22 177.987 li
@
302.34 177.987 mo
303.06 177.987 li
@
306.18 177.987 mo
306.9 177.987 li
@
310.02 177.987 mo
310.74 177.987 li
@
313.86 177.987 mo
314.58 177.987 li
@
317.7 177.987 mo
318.42 177.987 li
@
321.54 177.987 mo
322.26 177.987 li
@
325.38 177.987 mo
326.1 177.987 li
@
329.22 177.987 mo
329.94 177.987 li
@
333.06 177.987 mo
333.78 177.987 li
@
336.9 177.987 mo
337.62 177.987 li
@
340.74 177.987 mo
341.46 177.987 li
@
344.58 177.987 mo
345.299 177.987 li
@
348.42 177.987 mo
349.139 177.987 li
@
352.26 177.987 mo
352.979 177.987 li
@
356.1 177.987 mo
356.819 177.987 li
@
359.94 177.987 mo
360.659 177.987 li
@
363.78 177.987 mo
364.499 177.987 li
@
367.62 177.987 mo
368.339 177.987 li
@
371.46 177.987 mo
372.179 177.987 li
@
375.299 177.987 mo
376.019 177.987 li
@
379.139 177.987 mo
379.859 177.987 li
@
382.979 177.987 mo
383.699 177.987 li
@
386.819 177.987 mo
387.539 177.987 li
@
390.659 177.987 mo
391.379 177.987 li
@
394.499 177.987 mo
395.219 177.987 li
@
398.339 177.987 mo
399.059 177.987 li
@
402.179 177.987 mo
402.899 177.987 li
@
406.019 177.987 mo
406.739 177.987 li
@
409.859 177.987 mo
410.579 177.987 li
@
413.699 177.987 mo
414.419 177.987 li
@
417.539 177.987 mo
418.259 177.987 li
@
421.379 177.987 mo
422.099 177.987 li
@
425.219 177.987 mo
425.939 177.987 li
@
429.059 177.987 mo
429.779 177.987 li
@
432.899 177.987 mo
433.619 177.987 li
@
436.739 177.987 mo
437.459 177.987 li
@
440.579 177.987 mo
441.299 177.987 li
@
444.419 177.987 mo
445.139 177.987 li
@
448.259 177.987 mo
448.979 177.987 li
@
452.099 177.987 mo
452.819 177.987 li
@
455.94 177.987 mo
456.659 177.987 li
@
459.78 177.987 mo
460.5 177.987 li
@
463.62 177.987 mo
464.34 177.987 li
@
467.46 177.987 mo
468.18 177.987 li
@
471.3 177.987 mo
472.02 177.987 li
@
475.14 177.987 mo
475.86 177.987 li
@
478.98 177.987 mo
479.7 177.987 li
@
482.82 177.987 mo
483.54 177.987 li
@
486.66 177.987 mo
487.38 177.987 li
@
490.5 177.987 mo
491.22 177.987 li
@
494.34 177.987 mo
495.06 177.987 li
@
498.18 177.987 mo
498.9 177.987 li
@
502.02 177.987 mo
502.74 177.987 li
@
505.86 177.987 mo
506.58 177.987 li
@
509.7 177.987 mo
510.42 177.987 li
@
513.54 177.987 mo
514.26 177.987 li
@
517.38 177.987 mo
518.1 177.987 li
@
521.22 177.987 mo
521.94 177.987 li
@
525.06 177.987 mo
525.78 177.987 li
@
528.901 177.987 mo
529.62 177.987 li
@
532.741 177.987 mo
533.461 177.987 li
@
536.581 177.987 mo
537.301 177.987 li
@
540.421 177.987 mo
541.141 177.987 li
@
544.261 177.987 mo
544.981 177.987 li
@
548.101 177.987 mo
548.821 177.987 li
@
551.941 177.987 mo
552.661 177.987 li
@
555.781 177.987 mo
556.501 177.987 li
@
559.621 177.987 mo
560.341 177.987 li
@
563.461 177.987 mo
564.181 177.987 li
@
567.301 177.987 mo
568.021 177.987 li
@
571.141 177.987 mo
571.861 177.987 li
@
574.981 177.987 mo
575.701 177.987 li
@
578.821 177.987 mo
579.541 177.987 li
@
582.661 177.987 mo
583.381 177.987 li
@
586.501 177.987 mo
587.221 177.987 li
@
590.341 177.987 mo
591.061 177.987 li
@
594.181 177.987 mo
594.901 177.987 li
@
598.021 177.987 mo
598.741 177.987 li
@
601.861 177.987 mo
602.581 177.987 li
@
605.701 177.987 mo
606.421 177.987 li
@
609.541 177.987 mo
610.261 177.987 li
@
613.381 177.987 mo
614.101 177.987 li
@
617.221 177.987 mo
617.941 177.987 li
@
621.061 177.987 mo
621.781 177.987 li
@
624.901 177.987 mo
625.621 177.987 li
@
628.741 177.987 mo
629.461 177.987 li
@
632.581 177.987 mo
633.301 177.987 li
@
636.421 177.987 mo
637.141 177.987 li
@
640.261 177.987 mo
640.981 177.987 li
@
644.101 177.987 mo
644.821 177.987 li
@
87.2993 136.467 mo
88.0193 136.467 li
@
91.1393 136.467 mo
91.8593 136.467 li
@
94.9793 136.467 mo
95.6993 136.467 li
@
98.8193 136.467 mo
99.5393 136.467 li
@
102.659 136.467 mo
103.379 136.467 li
@
106.499 136.467 mo
107.219 136.467 li
@
110.339 136.467 mo
111.059 136.467 li
@
114.179 136.467 mo
114.899 136.467 li
@
118.019 136.467 mo
118.739 136.467 li
@
121.859 136.467 mo
122.579 136.467 li
@
125.699 136.467 mo
126.419 136.467 li
@
129.539 136.467 mo
130.259 136.467 li
@
133.379 136.467 mo
134.099 136.467 li
@
137.219 136.467 mo
137.939 136.467 li
@
141.059 136.467 mo
141.779 136.467 li
@
144.899 136.467 mo
145.619 136.467 li
@
148.739 136.467 mo
149.459 136.467 li
@
152.579 136.467 mo
153.299 136.467 li
@
156.419 136.467 mo
157.139 136.467 li
@
160.259 136.467 mo
160.979 136.467 li
@
164.099 136.467 mo
164.819 136.467 li
@
167.939 136.467 mo
168.659 136.467 li
@
171.779 136.467 mo
172.499 136.467 li
@
175.619 136.467 mo
176.339 136.467 li
@
179.459 136.467 mo
180.179 136.467 li
@
183.299 136.467 mo
184.019 136.467 li
@
187.139 136.467 mo
187.859 136.467 li
@
190.979 136.467 mo
191.699 136.467 li
@
194.819 136.467 mo
195.539 136.467 li
@
198.659 136.467 mo
199.379 136.467 li
@
202.499 136.467 mo
203.219 136.467 li
@
206.339 136.467 mo
207.059 136.467 li
@
210.179 136.467 mo
210.899 136.467 li
@
214.019 136.467 mo
214.739 136.467 li
@
217.859 136.467 mo
218.579 136.467 li
@
221.699 136.467 mo
222.419 136.467 li
@
225.539 136.467 mo
226.259 136.467 li
@
229.379 136.467 mo
230.099 136.467 li
@
233.219 136.467 mo
233.939 136.467 li
@
237.059 136.467 mo
237.779 136.467 li
@
240.899 136.467 mo
241.619 136.467 li
@
244.739 136.467 mo
245.459 136.467 li
@
248.579 136.467 mo
249.299 136.467 li
@
252.42 136.467 mo
253.14 136.467 li
@
256.26 136.467 mo
256.98 136.467 li
@
260.1 136.467 mo
260.82 136.467 li
@
263.94 136.467 mo
264.66 136.467 li
@
267.78 136.467 mo
268.5 136.467 li
@
271.62 136.467 mo
272.34 136.467 li
@
275.46 136.467 mo
276.18 136.467 li
@
279.3 136.467 mo
280.02 136.467 li
@
283.14 136.467 mo
283.86 136.467 li
@
286.98 136.467 mo
287.7 136.467 li
@
290.82 136.467 mo
291.54 136.467 li
@
294.66 136.467 mo
295.38 136.467 li
@
298.5 136.467 mo
299.22 136.467 li
@
302.34 136.467 mo
303.06 136.467 li
@
306.18 136.467 mo
306.9 136.467 li
@
310.02 136.467 mo
310.74 136.467 li
@
313.86 136.467 mo
314.58 136.467 li
@
317.7 136.467 mo
318.42 136.467 li
@
321.54 136.467 mo
322.26 136.467 li
@
325.38 136.467 mo
326.1 136.467 li
@
329.22 136.467 mo
329.94 136.467 li
@
333.06 136.467 mo
333.78 136.467 li
@
336.9 136.467 mo
337.62 136.467 li
@
340.74 136.467 mo
341.46 136.467 li
@
344.58 136.467 mo
345.3 136.467 li
@
348.42 136.467 mo
349.14 136.467 li
@
352.26 136.467 mo
352.98 136.467 li
@
356.1 136.467 mo
356.82 136.467 li
@
359.94 136.467 mo
360.66 136.467 li
@
363.78 136.467 mo
364.5 136.467 li
@
367.62 136.467 mo
368.34 136.467 li
@
371.46 136.467 mo
372.18 136.467 li
@
375.3 136.467 mo
376.02 136.467 li
@
379.14 136.467 mo
379.86 136.467 li
@
382.98 136.467 mo
383.7 136.467 li
@
386.82 136.467 mo
387.54 136.467 li
@
390.66 136.467 mo
391.38 136.467 li
@
394.5 136.467 mo
395.22 136.467 li
@
398.34 136.467 mo
399.06 136.467 li
@
402.18 136.467 mo
402.9 136.467 li
@
406.02 136.467 mo
406.74 136.467 li
@
409.86 136.467 mo
410.58 136.467 li
@
413.7 136.467 mo
414.42 136.467 li
@
417.54 136.467 mo
418.26 136.467 li
@
421.38 136.467 mo
422.1 136.467 li
@
425.22 136.467 mo
425.94 136.467 li
@
429.06 136.467 mo
429.78 136.467 li
@
432.9 136.467 mo
433.62 136.467 li
@
436.74 136.467 mo
437.46 136.467 li
@
440.58 136.467 mo
441.3 136.467 li
@
444.42 136.467 mo
445.14 136.467 li
@
448.26 136.467 mo
448.98 136.467 li
@
452.1 136.467 mo
452.82 136.467 li
@
455.941 136.467 mo
456.66 136.467 li
@
459.781 136.467 mo
460.501 136.467 li
@
463.621 136.467 mo
464.341 136.467 li
@
467.461 136.467 mo
468.181 136.467 li
@
471.301 136.467 mo
472.021 136.467 li
@
475.141 136.467 mo
475.861 136.467 li
@
478.981 136.467 mo
479.701 136.467 li
@
482.821 136.467 mo
483.541 136.467 li
@
486.661 136.467 mo
487.381 136.467 li
@
490.501 136.467 mo
491.221 136.467 li
@
494.341 136.467 mo
495.061 136.467 li
@
498.181 136.467 mo
498.901 136.467 li
@
502.021 136.467 mo
502.741 136.467 li
@
505.861 136.467 mo
506.581 136.467 li
@
509.701 136.467 mo
510.421 136.467 li
@
513.541 136.467 mo
514.261 136.467 li
@
517.381 136.467 mo
518.101 136.467 li
@
521.221 136.467 mo
521.941 136.467 li
@
525.061 136.467 mo
525.781 136.467 li
@
528.901 136.467 mo
529.621 136.467 li
@
532.741 136.467 mo
533.461 136.467 li
@
536.581 136.467 mo
537.301 136.467 li
@
540.421 136.467 mo
541.141 136.467 li
@
544.261 136.467 mo
544.981 136.467 li
@
548.101 136.467 mo
548.821 136.467 li
@
551.941 136.467 mo
552.661 136.467 li
@
555.781 136.467 mo
556.501 136.467 li
@
559.621 136.467 mo
560.341 136.467 li
@
563.461 136.467 mo
564.181 136.467 li
@
567.301 136.467 mo
568.021 136.467 li
@
571.141 136.467 mo
571.861 136.467 li
@
574.981 136.467 mo
575.701 136.467 li
@
578.821 136.467 mo
579.541 136.467 li
@
582.661 136.467 mo
583.381 136.467 li
@
586.501 136.467 mo
587.221 136.467 li
@
590.341 136.467 mo
591.061 136.467 li
@
594.182 136.467 mo
594.901 136.467 li
@
598.022 136.467 mo
598.742 136.467 li
@
601.862 136.467 mo
602.582 136.467 li
@
605.702 136.467 mo
606.422 136.467 li
@
609.542 136.467 mo
610.262 136.467 li
@
613.382 136.467 mo
614.102 136.467 li
@
617.222 136.467 mo
617.942 136.467 li
@
621.062 136.467 mo
621.782 136.467 li
@
624.902 136.467 mo
625.622 136.467 li
@
628.742 136.467 mo
629.462 136.467 li
@
632.582 136.467 mo
633.302 136.467 li
@
636.422 136.467 mo
637.142 136.467 li
@
640.262 136.467 mo
640.982 136.467 li
@
644.102 136.467 mo
644.822 136.467 li
@
87.2999 95.1871 mo
88.0199 95.1871 li
@
91.1399 95.1871 mo
91.8599 95.1871 li
@
94.9799 95.1871 mo
95.6999 95.1871 li
@
98.8199 95.1871 mo
99.5398 95.1871 li
@
102.66 95.1871 mo
103.38 95.1871 li
@
106.5 95.1871 mo
107.22 95.1871 li
@
110.34 95.1871 mo
111.06 95.1871 li
@
114.18 95.1871 mo
114.9 95.1871 li
@
118.02 95.1871 mo
118.74 95.1871 li
@
121.86 95.1871 mo
122.58 95.1871 li
@
125.7 95.1871 mo
126.42 95.1871 li
@
129.54 95.1871 mo
130.26 95.1871 li
@
133.38 95.1871 mo
134.1 95.1871 li
@
137.22 95.1871 mo
137.94 95.1871 li
@
141.06 95.1871 mo
141.78 95.1871 li
@
144.9 95.1871 mo
145.62 95.1871 li
@
148.74 95.1871 mo
149.46 95.1871 li
@
152.58 95.1871 mo
153.3 95.1871 li
@
156.42 95.1871 mo
157.14 95.1871 li
@
160.26 95.1871 mo
160.98 95.1871 li
@
164.1 95.1871 mo
164.82 95.1871 li
@
167.94 95.1871 mo
168.66 95.1871 li
@
171.78 95.1871 mo
172.5 95.1871 li
@
175.62 95.1871 mo
176.34 95.1871 li
@
179.46 95.1871 mo
180.18 95.1871 li
@
183.3 95.1871 mo
184.02 95.1871 li
@
187.14 95.1871 mo
187.86 95.1871 li
@
190.98 95.1871 mo
191.7 95.1871 li
@
194.82 95.1871 mo
195.54 95.1871 li
@
198.66 95.1871 mo
199.38 95.1871 li
@
202.5 95.1871 mo
203.22 95.1871 li
@
206.34 95.1871 mo
207.06 95.1871 li
@
210.18 95.1871 mo
210.9 95.1871 li
@
214.02 95.1871 mo
214.74 95.1871 li
@
217.86 95.1871 mo
218.58 95.1871 li
@
221.7 95.1871 mo
222.42 95.1871 li
@
225.54 95.1871 mo
226.26 95.1871 li
@
229.38 95.1871 mo
230.1 95.1871 li
@
233.22 95.1871 mo
233.94 95.1871 li
@
237.06 95.1871 mo
237.78 95.1871 li
@
240.9 95.1871 mo
241.62 95.1871 li
@
244.74 95.1871 mo
245.46 95.1871 li
@
248.58 95.1871 mo
249.3 95.1871 li
@
252.421 95.1871 mo
253.141 95.1871 li
@
256.261 95.1871 mo
256.981 95.1871 li
@
260.101 95.1871 mo
260.821 95.1871 li
@
263.941 95.1871 mo
264.661 95.1871 li
@
267.781 95.1871 mo
268.501 95.1871 li
@
271.621 95.1871 mo
272.341 95.1871 li
@
275.461 95.1871 mo
276.181 95.1871 li
@
279.301 95.1871 mo
280.021 95.1871 li
@
283.141 95.1871 mo
283.861 95.1871 li
@
286.981 95.1871 mo
287.701 95.1871 li
@
290.821 95.1871 mo
291.541 95.1871 li
@
294.661 95.1871 mo
295.381 95.1871 li
@
298.501 95.1871 mo
299.221 95.1871 li
@
302.341 95.1871 mo
303.061 95.1871 li
@
306.181 95.1871 mo
306.901 95.1871 li
@
310.021 95.1871 mo
310.741 95.1871 li
@
313.861 95.1871 mo
314.581 95.1871 li
@
317.701 95.1871 mo
318.421 95.1871 li
@
321.541 95.1871 mo
322.261 95.1871 li
@
325.381 95.1871 mo
326.101 95.1871 li
@
329.221 95.1871 mo
329.941 95.1871 li
@
333.061 95.1871 mo
333.781 95.1871 li
@
336.901 95.1871 mo
337.621 95.1871 li
@
340.741 95.1871 mo
341.461 95.1871 li
@
344.581 95.1871 mo
345.301 95.1871 li
@
348.421 95.1871 mo
349.141 95.1871 li
@
352.261 95.1871 mo
352.981 95.1871 li
@
356.101 95.1871 mo
356.821 95.1871 li
@
359.941 95.1871 mo
360.661 95.1871 li
@
363.781 95.1871 mo
364.501 95.1871 li
@
367.621 95.1871 mo
368.341 95.1871 li
@
371.461 95.1871 mo
372.181 95.1871 li
@
375.301 95.1871 mo
376.021 95.1871 li
@
379.141 95.1871 mo
379.861 95.1871 li
@
382.981 95.1871 mo
383.701 95.1871 li
@
386.821 95.1871 mo
387.541 95.1871 li
@
390.661 95.1871 mo
391.381 95.1871 li
@
394.501 95.1871 mo
395.221 95.1871 li
@
398.341 95.1871 mo
399.061 95.1871 li
@
402.181 95.1871 mo
402.901 95.1871 li
@
406.021 95.1871 mo
406.741 95.1871 li
@
409.861 95.1871 mo
410.581 95.1871 li
@
413.701 95.1871 mo
414.421 95.1871 li
@
417.541 95.1871 mo
418.261 95.1871 li
@
421.381 95.1871 mo
422.101 95.1871 li
@
425.221 95.1871 mo
425.941 95.1871 li
@
429.061 95.1871 mo
429.781 95.1871 li
@
432.901 95.1871 mo
433.621 95.1871 li
@
436.741 95.1871 mo
437.461 95.1871 li
@
440.581 95.1871 mo
441.301 95.1871 li
@
444.421 95.1871 mo
445.141 95.1871 li
@
448.261 95.1871 mo
448.98 95.1871 li
@
452.101 95.1871 mo
452.82 95.1871 li
@
455.942 95.1871 mo
456.661 95.1871 li
@
459.782 95.1871 mo
460.501 95.1871 li
@
463.622 95.1871 mo
464.341 95.1871 li
@
467.462 95.1871 mo
468.181 95.1871 li
@
471.302 95.1871 mo
472.021 95.1871 li
@
475.142 95.1871 mo
475.861 95.1871 li
@
478.982 95.1871 mo
479.701 95.1871 li
@
482.822 95.1871 mo
483.541 95.1871 li
@
486.661 95.1871 mo
487.381 95.1871 li
@
490.501 95.1871 mo
491.221 95.1871 li
@
494.341 95.1871 mo
495.061 95.1871 li
@
498.181 95.1871 mo
498.901 95.1871 li
@
502.021 95.1871 mo
502.741 95.1871 li
@
505.861 95.1871 mo
506.581 95.1871 li
@
509.701 95.1871 mo
510.421 95.1871 li
@
513.542 95.1871 mo
514.261 95.1871 li
@
517.382 95.1871 mo
518.102 95.1871 li
@
521.222 95.1871 mo
521.942 95.1871 li
@
525.062 95.1871 mo
525.782 95.1871 li
@
528.902 95.1871 mo
529.622 95.1871 li
@
532.742 95.1871 mo
533.462 95.1871 li
@
536.582 95.1871 mo
537.302 95.1871 li
@
540.422 95.1871 mo
541.142 95.1871 li
@
544.262 95.1871 mo
544.982 95.1871 li
@
548.102 95.1871 mo
548.822 95.1871 li
@
551.942 95.1871 mo
552.662 95.1871 li
@
555.782 95.1871 mo
556.502 95.1871 li
@
559.622 95.1871 mo
560.342 95.1871 li
@
563.462 95.1871 mo
564.182 95.1871 li
@
567.302 95.1871 mo
568.022 95.1871 li
@
571.142 95.1871 mo
571.862 95.1871 li
@
574.982 95.1871 mo
575.702 95.1871 li
@
578.822 95.1871 mo
579.542 95.1871 li
@
582.662 95.1871 mo
583.382 95.1871 li
@
586.502 95.1871 mo
587.222 95.1871 li
@
590.342 95.1871 mo
591.062 95.1871 li
@
594.182 95.1871 mo
594.902 95.1871 li
@
598.022 95.1871 mo
598.742 95.1871 li
@
601.862 95.1871 mo
602.582 95.1871 li
@
605.702 95.1871 mo
606.422 95.1871 li
@
609.542 95.1871 mo
610.262 95.1871 li
@
613.382 95.1871 mo
614.102 95.1871 li
@
617.222 95.1871 mo
617.942 95.1871 li
@
621.062 95.1871 mo
621.782 95.1871 li
@
624.902 95.1871 mo
625.622 95.1871 li
@
628.742 95.1871 mo
629.462 95.1871 li
@
632.582 95.1871 mo
633.302 95.1871 li
@
636.422 95.1871 mo
637.142 95.1871 li
@
640.262 95.1871 mo
640.982 95.1871 li
@
644.102 95.1871 mo
644.822 95.1871 li
@
87.3004 53.6661 mo
88.0204 53.6661 li
@
91.1404 53.6661 mo
91.8604 53.6661 li
@
94.9804 53.6661 mo
95.7004 53.6661 li
@
98.8204 53.6661 mo
99.5404 53.6661 li
@
102.66 53.6661 mo
103.38 53.6661 li
@
106.5 53.6661 mo
107.22 53.6661 li
@
110.34 53.6661 mo
111.06 53.6661 li
@
114.18 53.6661 mo
114.9 53.6661 li
@
118.02 53.6661 mo
118.74 53.6661 li
@
121.86 53.6661 mo
122.58 53.6661 li
@
125.7 53.6661 mo
126.42 53.6661 li
@
129.54 53.6661 mo
130.26 53.6661 li
@
133.38 53.6661 mo
134.1 53.6661 li
@
137.22 53.6661 mo
137.94 53.6661 li
@
141.06 53.6661 mo
141.78 53.6661 li
@
144.9 53.6661 mo
145.62 53.6661 li
@
148.74 53.6661 mo
149.46 53.6661 li
@
152.58 53.6661 mo
153.3 53.6661 li
@
156.42 53.6661 mo
157.14 53.6661 li
@
160.26 53.6661 mo
160.98 53.6661 li
@
164.1 53.6661 mo
164.82 53.6661 li
@
167.94 53.6661 mo
168.66 53.6661 li
@
171.78 53.6661 mo
172.5 53.6661 li
@
175.62 53.6661 mo
176.34 53.6661 li
@
179.46 53.6661 mo
180.18 53.6661 li
@
183.3 53.6661 mo
184.02 53.6661 li
@
187.14 53.6661 mo
187.86 53.6661 li
@
190.98 53.6661 mo
191.7 53.6661 li
@
194.82 53.6661 mo
195.54 53.6661 li
@
198.66 53.6661 mo
199.38 53.6661 li
@
202.5 53.6661 mo
203.22 53.6661 li
@
206.34 53.6661 mo
207.06 53.6661 li
@
210.18 53.6661 mo
210.9 53.6661 li
@
214.02 53.6661 mo
214.74 53.6661 li
@
217.86 53.6661 mo
218.58 53.6661 li
@
221.7 53.6661 mo
222.42 53.6661 li
@
225.54 53.6661 mo
226.26 53.6661 li
@
229.38 53.6661 mo
230.1 53.6661 li
@
233.22 53.6661 mo
233.94 53.6661 li
@
237.06 53.6661 mo
237.78 53.6661 li
@
240.9 53.6661 mo
241.62 53.6661 li
@
244.74 53.6661 mo
245.46 53.6661 li
@
248.58 53.6661 mo
249.3 53.6661 li
@
252.421 53.6661 mo
253.141 53.6661 li
@
256.261 53.6661 mo
256.981 53.6661 li
@
260.101 53.6661 mo
260.821 53.6661 li
@
263.941 53.6661 mo
264.661 53.6661 li
@
267.781 53.6661 mo
268.501 53.6661 li
@
271.621 53.6661 mo
272.341 53.6661 li
@
275.461 53.6661 mo
276.181 53.6661 li
@
279.301 53.6661 mo
280.021 53.6661 li
@
283.141 53.6661 mo
283.861 53.6661 li
@
286.981 53.6661 mo
287.701 53.6661 li
@
290.821 53.6661 mo
291.541 53.6661 li
@
294.661 53.6661 mo
295.381 53.6661 li
@
298.501 53.6661 mo
299.221 53.6661 li
@
302.341 53.6661 mo
303.061 53.6661 li
@
306.181 53.6661 mo
306.901 53.6661 li
@
310.021 53.6661 mo
310.741 53.6661 li
@
313.861 53.6661 mo
314.581 53.6661 li
@
317.701 53.6661 mo
318.421 53.6661 li
@
321.541 53.6661 mo
322.261 53.6661 li
@
325.381 53.6661 mo
326.101 53.6661 li
@
329.221 53.6661 mo
329.941 53.6661 li
@
333.061 53.6661 mo
333.781 53.6661 li
@
336.901 53.6661 mo
337.621 53.6661 li
@
340.741 53.6661 mo
341.461 53.6661 li
@
344.581 53.6661 mo
345.301 53.6661 li
@
348.421 53.6661 mo
349.141 53.6661 li
@
352.261 53.6661 mo
352.981 53.6661 li
@
356.101 53.6661 mo
356.821 53.6661 li
@
359.941 53.6661 mo
360.661 53.6661 li
@
363.781 53.6661 mo
364.501 53.6661 li
@
367.621 53.6661 mo
368.341 53.6661 li
@
371.461 53.6661 mo
372.181 53.6661 li
@
375.301 53.6661 mo
376.021 53.6661 li
@
379.141 53.6661 mo
379.861 53.6661 li
@
382.981 53.6661 mo
383.701 53.6661 li
@
386.821 53.6661 mo
387.541 53.6661 li
@
390.661 53.6661 mo
391.381 53.6661 li
@
394.501 53.6661 mo
395.221 53.6661 li
@
398.341 53.6661 mo
399.061 53.6661 li
@
402.181 53.6661 mo
402.901 53.6661 li
@
406.021 53.6661 mo
406.741 53.6661 li
@
409.861 53.6661 mo
410.581 53.6661 li
@
413.701 53.6661 mo
414.421 53.6661 li
@
417.541 53.6661 mo
418.261 53.6661 li
@
421.381 53.6661 mo
422.101 53.6661 li
@
425.221 53.6661 mo
425.941 53.6661 li
@
429.061 53.6661 mo
429.781 53.6661 li
@
432.901 53.6661 mo
433.621 53.6661 li
@
436.741 53.6661 mo
437.461 53.6661 li
@
440.581 53.6661 mo
441.301 53.6661 li
@
444.421 53.6661 mo
445.141 53.6661 li
@
448.261 53.6661 mo
448.981 53.6661 li
@
452.101 53.6661 mo
452.821 53.6661 li
@
455.942 53.6661 mo
456.661 53.6661 li
@
459.782 53.6661 mo
460.502 53.6661 li
@
463.622 53.6661 mo
464.342 53.6661 li
@
467.462 53.6661 mo
468.182 53.6661 li
@
471.302 53.6661 mo
472.022 53.6661 li
@
475.142 53.6661 mo
475.862 53.6661 li
@
478.982 53.6661 mo
479.702 53.6661 li
@
482.822 53.6661 mo
483.542 53.6661 li
@
486.662 53.6661 mo
487.382 53.6661 li
@
490.502 53.6661 mo
491.222 53.6661 li
@
494.342 53.6661 mo
495.062 53.6661 li
@
498.182 53.6661 mo
498.902 53.6661 li
@
502.022 53.6661 mo
502.742 53.6661 li
@
505.862 53.6661 mo
506.582 53.6661 li
@
509.702 53.6661 mo
510.422 53.6661 li
@
513.542 53.6661 mo
514.262 53.6661 li
@
517.382 53.6661 mo
518.102 53.6661 li
@
521.222 53.6661 mo
521.942 53.6661 li
@
525.062 53.6661 mo
525.782 53.6661 li
@
528.902 53.6661 mo
529.622 53.6661 li
@
532.742 53.6661 mo
533.462 53.6661 li
@
536.582 53.6661 mo
537.302 53.6661 li
@
540.422 53.6661 mo
541.142 53.6661 li
@
544.262 53.6661 mo
544.982 53.6661 li
@
548.102 53.6661 mo
548.822 53.6661 li
@
551.942 53.6661 mo
552.662 53.6661 li
@
555.782 53.6661 mo
556.502 53.6661 li
@
559.622 53.6661 mo
560.342 53.6661 li
@
563.462 53.6661 mo
564.182 53.6661 li
@
567.302 53.6661 mo
568.022 53.6661 li
@
571.142 53.6661 mo
571.862 53.6661 li
@
574.982 53.6661 mo
575.702 53.6661 li
@
578.823 53.6661 mo
579.542 53.6661 li
@
582.663 53.6661 mo
583.383 53.6661 li
@
586.503 53.6661 mo
587.223 53.6661 li
@
590.343 53.6661 mo
591.063 53.6661 li
@
594.183 53.6661 mo
594.903 53.6661 li
@
598.023 53.6661 mo
598.743 53.6661 li
@
601.863 53.6661 mo
602.583 53.6661 li
@
605.703 53.6661 mo
606.423 53.6661 li
@
609.543 53.6661 mo
610.263 53.6661 li
@
613.383 53.6661 mo
614.103 53.6661 li
@
617.223 53.6661 mo
617.943 53.6661 li
@
621.063 53.6661 mo
621.783 53.6661 li
@
624.903 53.6661 mo
625.623 53.6661 li
@
628.743 53.6661 mo
629.463 53.6661 li
@
632.583 53.6661 mo
633.303 53.6661 li
@
636.423 53.6661 mo
637.143 53.6661 li
@
640.263 53.6661 mo
640.983 53.6661 li
@
644.103 53.6661 mo
644.823 53.6661 li
@
gsave
87.3009 12.3901 mo
646.027 12.3901 li
646.027 426.388 li
87.3009 426.388 li
cp
eclp
85.6209 338.787 mo
85.6209 347.907 li
0 gry
@
81.0609 343.347 mo
90.1809 343.347 li
@
109.621 301.588 mo
109.621 310.708 li
@
105.061 306.148 mo
114.181 306.148 li
@
112.981 333.987 mo
112.981 343.107 li
@
108.421 338.547 mo
117.541 338.547 li
@
117.541 301.588 mo
117.541 310.708 li
@
112.981 306.148 mo
122.101 306.148 li
@
157.381 289.348 mo
157.381 298.468 li
@
152.821 293.908 mo
161.941 293.908 li
@
160.261 278.548 mo
160.261 287.668 li
@
155.701 283.108 mo
164.821 283.108 li
@
166.981 297.508 mo
166.981 306.628 li
@
162.421 302.068 mo
171.541 302.068 li
@
191.461 276.868 mo
191.461 285.988 li
@
186.901 281.428 mo
196.021 281.428 li
@
198.901 274.228 mo
198.901 283.348 li
@
194.341 278.788 mo
203.461 278.788 li
@
204.901 259.348 mo
204.901 268.468 li
@
200.341 263.908 mo
209.461 263.908 li
@
234.421 248.307 mo
234.421 257.428 li
@
229.861 252.867 mo
238.981 252.867 li
@
240.181 297.508 mo
240.181 306.628 li
@
235.621 302.068 mo
244.741 302.068 li
@
240.181 260.308 mo
240.181 269.428 li
@
235.621 264.868 mo
244.741 264.868 li
@
240.181 251.907 mo
240.181 261.028 li
@
235.621 256.467 mo
244.741 256.467 li
@
244.741 243.747 mo
244.741 252.867 li
@
240.181 248.307 mo
249.301 248.307 li
@
271.382 231.267 mo
271.382 240.387 li
@
266.822 235.827 mo
275.942 235.827 li
@
277.382 230.547 mo
277.382 239.667 li
@
272.822 235.107 mo
281.942 235.107 li
@
277.622 223.107 mo
277.622 232.227 li
@
273.062 227.667 mo
282.182 227.667 li
@
285.062 232.467 mo
285.062 241.587 li
@
280.502 237.027 mo
289.622 237.027 li
@
285.062 228.867 mo
285.062 237.987 li
@
280.502 233.427 mo
289.622 233.427 li
@
285.062 224.787 mo
285.062 233.907 li
@
280.502 229.347 mo
289.622 229.347 li
@
314.102 235.587 mo
314.102 244.707 li
@
309.542 240.147 mo
318.662 240.147 li
@
316.022 214.707 mo
316.022 223.827 li
@
311.462 219.267 mo
320.582 219.267 li
@
323.222 210.627 mo
323.222 219.747 li
@
318.662 215.187 mo
327.782 215.187 li
@
325.862 111.267 mo
325.862 120.387 li
@
321.302 115.827 mo
330.422 115.827 li
@
351.302 210.627 mo
351.302 219.747 li
@
346.742 215.187 mo
355.862 215.187 li
@
364.262 189.987 mo
364.262 199.107 li
@
359.702 194.547 mo
368.822 194.547 li
@
399.542 178.947 mo
399.542 188.067 li
@
394.982 183.507 mo
404.102 183.507 li
@
433.622 147.747 mo
433.622 156.867 li
@
429.062 152.307 mo
438.182 152.307 li
@
435.302 156.867 mo
435.302 165.987 li
@
430.742 161.427 mo
439.862 161.427 li
@
471.063 148.227 mo
471.063 157.347 li
@
466.503 152.787 mo
475.623 152.787 li
@
471.543 157.347 mo
471.543 166.467 li
@
466.983 161.907 mo
476.103 161.907 li
@
472.023 156.867 mo
472.023 165.987 li
@
467.463 161.427 mo
476.583 161.427 li
@
475.143 173.427 mo
475.143 182.547 li
@
470.583 177.987 mo
479.703 177.987 li
@
478.983 146.547 mo
478.983 155.667 li
@
474.423 151.107 mo
483.543 151.107 li
@
479.703 132.867 mo
479.703 141.987 li
@
475.143 137.427 mo
484.263 137.427 li
@
482.583 152.787 mo
482.583 161.907 li
@
478.023 157.347 mo
487.143 157.347 li
@
498.903 134.547 mo
498.903 143.667 li
@
494.343 139.107 mo
503.463 139.107 li
@
516.903 136.227 mo
516.903 145.347 li
@
512.343 140.787 mo
521.463 140.787 li
@
520.263 135.507 mo
520.263 144.627 li
@
515.703 140.067 mo
524.823 140.067 li
@
520.503 136.227 mo
520.503 145.347 li
@
515.943 140.787 mo
525.063 140.787 li
@
522.903 123.747 mo
522.903 132.867 li
@
518.343 128.307 mo
527.463 128.307 li
@
527.943 156.867 mo
527.943 165.987 li
@
523.383 161.427 mo
532.503 161.427 li
@
556.743 98.547 mo
556.743 107.667 li
@
552.183 103.107 mo
561.303 103.107 li
@
561.063 140.307 mo
561.063 149.427 li
@
556.503 144.867 mo
565.623 144.867 li
@
636.423 37.107 mo
636.423 46.227 li
@
631.863 41.667 mo
640.983 41.667 li
@
642.183 68.548 mo
642.183 77.668 li
@
637.623 73.108 mo
646.743 73.108 li
@
grestore
159.302 285.988 mo
159.302 288.771 157.045 291.028 154.262 291.028 cv
151.478 291.028 149.222 288.771 149.222 285.988 cv
149.222 283.204 151.478 280.948 154.262 280.948 cv
157.045 280.948 159.302 283.204 159.302 285.988 cv
0 gry
ef
159.301 285.987 mo
159.301 288.77 157.045 291.027 154.261 291.027 cv
151.478 291.027 149.221 288.77 149.221 285.987 cv
149.221 283.203 151.478 280.947 154.261 280.947 cv
157.045 280.947 159.301 283.203 159.301 285.987 cv
cp
@
159.542 284.308 mo
159.542 287.091 157.286 289.348 154.502 289.348 cv
151.718 289.348 149.462 287.091 149.462 284.308 cv
149.462 281.524 151.718 279.268 154.502 279.268 cv
157.286 279.268 159.542 281.524 159.542 284.308 cv
ef
159.541 284.307 mo
159.541 287.09 157.285 289.347 154.501 289.347 cv
151.718 289.347 149.461 287.09 149.461 284.307 cv
149.461 281.523 151.718 279.267 154.501 279.267 cv
157.285 279.267 159.541 281.523 159.541 284.307 cv
cp
@
159.782 285.988 mo
159.782 288.771 157.525 291.028 154.742 291.028 cv
151.958 291.028 149.702 288.771 149.702 285.988 cv
149.702 283.204 151.958 280.948 154.742 280.948 cv
157.525 280.948 159.782 283.204 159.782 285.988 cv
ef
159.781 285.987 mo
159.781 288.77 157.525 291.027 154.741 291.027 cv
151.958 291.027 149.701 288.77 149.701 285.987 cv
149.701 283.203 151.958 280.947 154.741 280.947 cv
157.525 280.947 159.781 283.203 159.781 285.987 cv
cp
@
169.622 280.228 mo
169.622 283.011 167.366 285.268 164.582 285.268 cv
161.799 285.268 159.542 283.011 159.542 280.228 cv
159.542 277.444 161.799 275.188 164.582 275.188 cv
167.366 275.188 169.622 277.444 169.622 280.228 cv
ef
169.621 280.227 mo
169.621 283.01 167.365 285.267 164.581 285.267 cv
161.798 285.267 159.541 283.01 159.541 280.227 cv
159.541 277.443 161.798 275.187 164.581 275.187 cv
167.365 275.187 169.621 277.443 169.621 280.227 cv
cp
@
172.022 281.188 mo
172.022 283.971 169.766 286.228 166.982 286.228 cv
164.199 286.228 161.942 283.971 161.942 281.188 cv
161.942 278.404 164.199 276.148 166.982 276.148 cv
169.766 276.148 172.022 278.404 172.022 281.188 cv
ef
172.021 281.187 mo
172.021 283.97 169.765 286.227 166.981 286.227 cv
164.198 286.227 161.941 283.97 161.941 281.187 cv
161.941 278.403 164.198 276.147 166.981 276.147 cv
169.765 276.147 172.021 278.403 172.021 281.187 cv
cp
@
172.262 281.668 mo
172.262 284.451 170.006 286.708 167.222 286.708 cv
164.439 286.708 162.182 284.451 162.182 281.668 cv
162.182 278.884 164.439 276.628 167.222 276.628 cv
170.006 276.628 172.262 278.884 172.262 281.668 cv
ef
172.261 281.667 mo
172.261 284.45 170.005 286.707 167.221 286.707 cv
164.438 286.707 162.181 284.45 162.181 281.667 cv
162.181 278.883 164.438 276.627 167.221 276.627 cv
170.005 276.627 172.261 278.883 172.261 281.667 cv
cp
@
209.942 264.148 mo
209.942 266.931 207.686 269.188 204.902 269.188 cv
202.119 269.188 199.862 266.931 199.862 264.148 cv
199.862 261.364 202.119 259.108 204.902 259.108 cv
207.686 259.108 209.942 261.364 209.942 264.148 cv
ef
209.941 264.147 mo
209.941 266.93 207.685 269.187 204.901 269.187 cv
202.118 269.187 199.861 266.93 199.861 264.147 cv
199.861 261.363 202.118 259.107 204.901 259.107 cv
207.685 259.107 209.941 261.363 209.941 264.147 cv
cp
@
237.303 246.148 mo
237.303 248.931 235.046 251.188 232.263 251.188 cv
229.479 251.188 227.223 248.931 227.223 246.148 cv
227.223 243.364 229.479 241.108 232.263 241.108 cv
235.046 241.108 237.303 243.364 237.303 246.148 cv
ef
237.301 246.146 mo
237.301 248.93 235.045 251.186 232.261 251.186 cv
229.478 251.186 227.221 248.93 227.221 246.146 cv
227.221 243.363 229.478 241.106 232.261 241.106 cv
235.045 241.106 237.301 243.363 237.301 246.146 cv
cp
@
237.783 255.268 mo
237.783 258.051 235.526 260.308 232.743 260.308 cv
229.959 260.308 227.703 258.051 227.703 255.268 cv
227.703 252.484 229.959 250.228 232.743 250.228 cv
235.526 250.228 237.783 252.484 237.783 255.268 cv
ef
237.781 255.266 mo
237.781 258.05 235.525 260.307 232.741 260.307 cv
229.958 260.307 227.701 258.05 227.701 255.266 cv
227.701 252.483 229.958 250.226 232.741 250.226 cv
235.525 250.226 237.781 252.483 237.781 255.266 cv
cp
@
239.703 256.228 mo
239.703 259.011 237.446 261.268 234.663 261.268 cv
231.879 261.268 229.623 259.011 229.623 256.228 cv
229.623 253.444 231.879 251.188 234.663 251.188 cv
237.446 251.188 239.703 253.444 239.703 256.228 cv
ef
239.701 256.226 mo
239.701 259.01 237.445 261.267 234.661 261.267 cv
231.878 261.267 229.621 259.01 229.621 256.226 cv
229.621 253.443 231.878 251.186 234.661 251.186 cv
237.445 251.186 239.701 253.443 239.701 256.226 cv
cp
@
239.703 253.348 mo
239.703 256.131 237.446 258.388 234.663 258.388 cv
231.879 258.388 229.623 256.131 229.623 253.348 cv
229.623 250.564 231.879 248.308 234.663 248.308 cv
237.446 248.308 239.703 250.564 239.703 253.348 cv
ef
239.701 253.346 mo
239.701 256.13 237.445 258.386 234.661 258.386 cv
231.878 258.386 229.621 256.13 229.621 253.346 cv
229.621 250.563 231.878 248.306 234.661 248.306 cv
237.445 248.306 239.701 250.563 239.701 253.346 cv
cp
@
240.423 247.108 mo
240.423 249.891 238.166 252.148 235.383 252.148 cv
232.599 252.148 230.343 249.891 230.343 247.108 cv
230.343 244.324 232.599 242.068 235.383 242.068 cv
238.166 242.068 240.423 244.324 240.423 247.108 cv
ef
240.421 247.106 mo
240.421 249.89 238.165 252.146 235.381 252.146 cv
232.598 252.146 230.341 249.89 230.341 247.106 cv
230.341 244.323 232.598 242.066 235.381 242.066 cv
238.165 242.066 240.421 244.323 240.421 247.106 cv
cp
@
241.863 255.508 mo
241.863 258.291 239.606 260.548 236.823 260.548 cv
234.039 260.548 231.783 258.291 231.783 255.508 cv
231.783 252.724 234.039 250.468 236.823 250.468 cv
239.606 250.468 241.863 252.724 241.863 255.508 cv
ef
241.861 255.506 mo
241.861 258.29 239.605 260.547 236.821 260.547 cv
234.038 260.547 231.781 258.29 231.781 255.506 cv
231.781 252.723 234.038 250.466 236.821 250.466 cv
239.605 250.466 241.861 252.723 241.861 255.506 cv
cp
@
279.543 237.028 mo
279.543 239.811 277.287 242.068 274.503 242.068 cv
271.72 242.068 269.463 239.811 269.463 237.028 cv
269.463 234.244 271.72 231.988 274.503 231.988 cv
277.287 231.988 279.543 234.244 279.543 237.028 cv
ef
279.542 237.026 mo
279.542 239.81 277.285 242.066 274.502 242.066 cv
271.718 242.066 269.462 239.81 269.462 237.026 cv
269.462 234.243 271.718 231.986 274.502 231.986 cv
277.285 231.986 279.542 234.243 279.542 237.026 cv
cp
@
280.023 234.628 mo
280.023 237.411 277.767 239.668 274.983 239.668 cv
272.2 239.668 269.943 237.411 269.943 234.628 cv
269.943 231.844 272.2 229.588 274.983 229.588 cv
277.767 229.588 280.023 231.844 280.023 234.628 cv
ef
280.022 234.626 mo
280.022 237.41 277.765 239.666 274.982 239.666 cv
272.198 239.666 269.942 237.41 269.942 234.626 cv
269.942 231.843 272.198 229.586 274.982 229.586 cv
277.765 229.586 280.022 231.843 280.022 234.626 cv
cp
@
280.263 231.988 mo
280.263 234.771 278.007 237.028 275.223 237.028 cv
272.44 237.028 270.183 234.771 270.183 231.988 cv
270.183 229.204 272.44 226.948 275.223 226.948 cv
278.007 226.948 280.263 229.204 280.263 231.988 cv
ef
280.262 231.986 mo
280.262 234.77 278.005 237.026 275.222 237.026 cv
272.438 237.026 270.182 234.77 270.182 231.986 cv
270.182 229.203 272.438 226.946 275.222 226.946 cv
278.005 226.946 280.262 229.203 280.262 231.986 cv
cp
@
280.983 237.748 mo
280.983 240.531 278.727 242.788 275.943 242.788 cv
273.16 242.788 270.903 240.531 270.903 237.748 cv
270.903 234.964 273.16 232.708 275.943 232.708 cv
278.727 232.708 280.983 234.964 280.983 237.748 cv
ef
280.982 237.746 mo
280.982 240.53 278.725 242.786 275.942 242.786 cv
273.158 242.786 270.902 240.53 270.902 237.746 cv
270.902 234.963 273.158 232.706 275.942 232.706 cv
278.725 232.706 280.982 234.963 280.982 237.746 cv
cp
@
291.063 233.428 mo
291.063 236.211 288.807 238.468 286.023 238.468 cv
283.24 238.468 280.983 236.211 280.983 233.428 cv
280.983 230.644 283.24 228.388 286.023 228.388 cv
288.807 228.388 291.063 230.644 291.063 233.428 cv
ef
291.062 233.426 mo
291.062 236.21 288.805 238.466 286.022 238.466 cv
283.238 238.466 280.982 236.21 280.982 233.426 cv
280.982 230.643 283.238 228.386 286.022 228.386 cv
288.805 228.386 291.062 230.643 291.062 233.426 cv
cp
@
318.903 222.868 mo
318.903 225.651 316.647 227.908 313.863 227.908 cv
311.08 227.908 308.823 225.651 308.823 222.868 cv
308.823 220.084 311.08 217.828 313.863 217.828 cv
316.647 217.828 318.903 220.084 318.903 222.868 cv
ef
318.902 222.866 mo
318.902 225.65 316.645 227.906 313.862 227.906 cv
311.078 227.906 308.822 225.65 308.822 222.866 cv
308.822 220.083 311.078 217.826 313.862 217.826 cv
316.645 217.826 318.902 220.083 318.902 222.866 cv
cp
@
319.144 217.348 mo
319.144 220.131 316.887 222.388 314.103 222.388 cv
311.32 222.388 309.063 220.131 309.063 217.348 cv
309.063 214.564 311.32 212.308 314.103 212.308 cv
316.887 212.308 319.144 214.564 319.144 217.348 cv
ef
319.142 217.346 mo
319.142 220.13 316.885 222.386 314.102 222.386 cv
311.318 222.386 309.062 220.13 309.062 217.346 cv
309.062 214.563 311.318 212.306 314.102 212.306 cv
316.885 212.306 319.142 214.563 319.142 217.346 cv
cp
@
319.624 221.428 mo
319.624 224.211 317.367 226.468 314.583 226.468 cv
311.8 226.468 309.543 224.211 309.543 221.428 cv
309.543 218.644 311.8 216.388 314.583 216.388 cv
317.367 216.388 319.624 218.644 319.624 221.428 cv
ef
319.622 221.426 mo
319.622 224.21 317.365 226.466 314.582 226.466 cv
311.798 226.466 309.542 224.21 309.542 221.426 cv
309.542 218.643 311.798 216.386 314.582 216.386 cv
317.365 216.386 319.622 218.643 319.622 221.426 cv
cp
@
326.824 215.908 mo
326.824 218.691 324.567 220.948 321.784 220.948 cv
319 220.948 316.743 218.691 316.743 215.908 cv
316.743 213.124 319 210.868 321.784 210.868 cv
324.567 210.868 326.824 213.124 326.824 215.908 cv
ef
326.822 215.906 mo
326.822 218.69 324.565 220.946 321.782 220.946 cv
318.998 220.946 316.742 218.69 316.742 215.906 cv
316.742 213.123 318.998 210.866 321.782 210.866 cv
324.565 210.866 326.822 213.123 326.822 215.906 cv
cp
@
321.544 219.028 mo
321.544 221.811 319.287 224.068 316.503 224.068 cv
313.72 224.068 311.463 221.811 311.463 219.028 cv
311.463 216.244 313.72 213.988 316.503 213.988 cv
319.287 213.988 321.544 216.244 321.544 219.028 cv
ef
321.542 219.026 mo
321.542 221.81 319.285 224.066 316.502 224.066 cv
313.718 224.066 311.462 221.81 311.462 219.026 cv
311.462 216.243 313.718 213.986 316.502 213.986 cv
319.285 213.986 321.542 216.243 321.542 219.026 cv
cp
@
323.944 216.628 mo
323.944 219.411 321.687 221.668 318.903 221.668 cv
316.12 221.668 313.863 219.411 313.863 216.628 cv
313.863 213.844 316.12 211.588 318.903 211.588 cv
321.687 211.588 323.944 213.844 323.944 216.628 cv
ef
323.942 216.626 mo
323.942 219.41 321.685 221.666 318.902 221.666 cv
316.118 221.666 313.862 219.41 313.862 216.626 cv
313.862 213.843 316.118 211.586 318.902 211.586 cv
321.685 211.586 323.942 213.843 323.942 216.626 cv
cp
@
327.064 217.108 mo
327.064 219.891 324.807 222.148 322.024 222.148 cv
319.24 222.148 316.983 219.891 316.983 217.108 cv
316.983 214.324 319.24 212.068 322.024 212.068 cv
324.807 212.068 327.064 214.324 327.064 217.108 cv
ef
327.062 217.106 mo
327.062 219.89 324.805 222.146 322.022 222.146 cv
319.238 222.146 316.982 219.89 316.982 217.106 cv
316.982 214.323 319.238 212.066 322.022 212.066 cv
324.805 212.066 327.062 214.323 327.062 217.106 cv
cp
@
329.224 217.108 mo
329.224 219.891 326.967 222.148 324.184 222.148 cv
321.4 222.148 319.144 219.891 319.144 217.108 cv
319.144 214.324 321.4 212.068 324.184 212.068 cv
326.967 212.068 329.224 214.324 329.224 217.108 cv
ef
329.222 217.106 mo
329.222 219.89 326.965 222.146 324.182 222.146 cv
321.398 222.146 319.142 219.89 319.142 217.106 cv
319.142 214.323 321.398 212.066 324.182 212.066 cv
326.965 212.066 329.222 214.323 329.222 217.106 cv
cp
@
331.864 216.628 mo
331.864 219.411 329.607 221.668 326.824 221.668 cv
324.04 221.668 321.784 219.411 321.784 216.628 cv
321.784 213.844 324.04 211.588 326.824 211.588 cv
329.607 211.588 331.864 213.844 331.864 216.628 cv
ef
331.862 216.626 mo
331.862 219.41 329.605 221.666 326.822 221.666 cv
324.038 221.666 321.782 219.41 321.782 216.626 cv
321.782 213.843 324.038 211.586 326.822 211.586 cv
329.605 211.586 331.862 213.843 331.862 216.626 cv
cp
@
359.464 202.948 mo
359.464 205.731 357.207 207.988 354.424 207.988 cv
351.64 207.988 349.384 205.731 349.384 202.948 cv
349.384 200.164 351.64 197.908 354.424 197.908 cv
357.207 197.908 359.464 200.164 359.464 202.948 cv
ef
359.462 202.946 mo
359.462 205.73 357.206 207.986 354.422 207.986 cv
351.638 207.986 349.382 205.73 349.382 202.946 cv
349.382 200.163 351.638 197.906 354.422 197.906 cv
357.206 197.906 359.462 200.163 359.462 202.946 cv
cp
@
360.664 203.908 mo
360.664 206.691 358.407 208.948 355.624 208.948 cv
352.84 208.948 350.584 206.691 350.584 203.908 cv
350.584 201.124 352.84 198.868 355.624 198.868 cv
358.407 198.868 360.664 201.124 360.664 203.908 cv
ef
360.662 203.906 mo
360.662 206.69 358.406 208.946 355.622 208.946 cv
352.838 208.946 350.582 206.69 350.582 203.906 cv
350.582 201.123 352.838 198.866 355.622 198.866 cv
358.406 198.866 360.662 201.123 360.662 203.906 cv
cp
@
360.904 201.028 mo
360.904 203.811 358.647 206.068 355.864 206.068 cv
353.08 206.068 350.824 203.811 350.824 201.028 cv
350.824 198.244 353.08 195.988 355.864 195.988 cv
358.647 195.988 360.904 198.244 360.904 201.028 cv
ef
360.902 201.026 mo
360.902 203.81 358.646 206.066 355.862 206.066 cv
353.078 206.066 350.822 203.81 350.822 201.026 cv
350.822 198.243 353.078 195.986 355.862 195.986 cv
358.646 195.986 360.902 198.243 360.902 201.026 cv
cp
@
360.904 202.708 mo
360.904 205.491 358.647 207.748 355.864 207.748 cv
353.08 207.748 350.824 205.491 350.824 202.708 cv
350.824 199.924 353.08 197.668 355.864 197.668 cv
358.647 197.668 360.904 199.924 360.904 202.708 cv
ef
360.902 202.706 mo
360.902 205.49 358.646 207.746 355.862 207.746 cv
353.078 207.746 350.822 205.49 350.822 202.706 cv
350.822 199.923 353.078 197.666 355.862 197.666 cv
358.646 197.666 360.902 199.923 360.902 202.706 cv
cp
@
362.104 201.508 mo
362.104 204.291 359.847 206.548 357.064 206.548 cv
354.28 206.548 352.024 204.291 352.024 201.508 cv
352.024 198.724 354.28 196.468 357.064 196.468 cv
359.847 196.468 362.104 198.724 362.104 201.508 cv
ef
362.102 201.506 mo
362.102 204.29 359.846 206.546 357.062 206.546 cv
354.279 206.546 352.022 204.29 352.022 201.506 cv
352.022 198.723 354.279 196.466 357.062 196.466 cv
359.846 196.466 362.102 198.723 362.102 201.506 cv
cp
@
395.944 188.308 mo
395.944 191.091 393.688 193.348 390.904 193.348 cv
388.121 193.348 385.864 191.091 385.864 188.308 cv
385.864 185.524 388.121 183.268 390.904 183.268 cv
393.688 183.268 395.944 185.524 395.944 188.308 cv
ef
395.942 188.306 mo
395.942 191.09 393.686 193.346 390.902 193.346 cv
388.119 193.346 385.862 191.09 385.862 188.306 cv
385.862 185.523 388.119 183.266 390.902 183.266 cv
393.686 183.266 395.942 185.523 395.942 188.306 cv
cp
@
396.424 187.828 mo
396.424 190.611 394.168 192.868 391.384 192.868 cv
388.601 192.868 386.344 190.611 386.344 187.828 cv
386.344 185.044 388.601 182.788 391.384 182.788 cv
394.168 182.788 396.424 185.044 396.424 187.828 cv
ef
396.422 187.826 mo
396.422 190.61 394.166 192.866 391.382 192.866 cv
388.599 192.866 386.342 190.61 386.342 187.826 cv
386.342 185.043 388.599 182.786 391.382 182.786 cv
394.166 182.786 396.422 185.043 396.422 187.826 cv
cp
@
396.904 186.628 mo
396.904 189.411 394.648 191.668 391.864 191.668 cv
389.081 191.668 386.824 189.411 386.824 186.628 cv
386.824 183.844 389.081 181.588 391.864 181.588 cv
394.648 181.588 396.904 183.844 396.904 186.628 cv
ef
396.902 186.626 mo
396.902 189.41 394.646 191.666 391.862 191.666 cv
389.079 191.666 386.822 189.41 386.822 186.626 cv
386.822 183.843 389.079 181.586 391.862 181.586 cv
394.646 181.586 396.902 183.843 396.902 186.626 cv
cp
@
397.144 185.188 mo
397.144 187.971 394.888 190.228 392.104 190.228 cv
389.321 190.228 387.064 187.971 387.064 185.188 cv
387.064 182.404 389.321 180.148 392.104 180.148 cv
394.888 180.148 397.144 182.404 397.144 185.188 cv
ef
397.142 185.186 mo
397.142 187.97 394.886 190.226 392.102 190.226 cv
389.319 190.226 387.062 187.97 387.062 185.186 cv
387.062 182.403 389.319 180.146 392.102 180.146 cv
394.886 180.146 397.142 182.403 397.142 185.186 cv
cp
@
398.344 184.228 mo
398.344 187.011 396.088 189.268 393.304 189.268 cv
390.521 189.268 388.264 187.011 388.264 184.228 cv
388.264 181.444 390.521 179.188 393.304 179.188 cv
396.088 179.188 398.344 181.444 398.344 184.228 cv
ef
398.342 184.226 mo
398.342 187.01 396.086 189.266 393.302 189.266 cv
390.519 189.266 388.262 187.01 388.262 184.226 cv
388.262 181.443 390.519 179.186 393.302 179.186 cv
396.086 179.186 398.342 181.443 398.342 184.226 cv
cp
@
436.505 171.268 mo
436.505 174.051 434.248 176.308 431.465 176.308 cv
428.681 176.308 426.424 174.051 426.424 171.268 cv
426.424 168.484 428.681 166.228 431.465 166.228 cv
434.248 166.228 436.505 168.484 436.505 171.268 cv
ef
436.502 171.266 mo
436.502 174.05 434.246 176.306 431.462 176.306 cv
428.679 176.306 426.422 174.05 426.422 171.266 cv
426.422 168.483 428.679 166.226 431.462 166.226 cv
434.246 166.226 436.502 168.483 436.502 171.266 cv
cp
@
436.745 171.028 mo
436.745 173.811 434.488 176.068 431.705 176.068 cv
428.921 176.068 426.665 173.811 426.665 171.028 cv
426.665 168.244 428.921 165.988 431.705 165.988 cv
434.488 165.988 436.745 168.244 436.745 171.028 cv
ef
436.742 171.026 mo
436.742 173.81 434.486 176.066 431.702 176.066 cv
428.919 176.066 426.662 173.81 426.662 171.026 cv
426.662 168.243 428.919 165.986 431.702 165.986 cv
434.486 165.986 436.742 168.243 436.742 171.026 cv
cp
@
438.905 169.828 mo
438.905 172.611 436.648 174.868 433.865 174.868 cv
431.081 174.868 428.825 172.611 428.825 169.828 cv
428.825 167.044 431.081 164.788 433.865 164.788 cv
436.648 164.788 438.905 167.044 438.905 169.828 cv
ef
438.902 169.826 mo
438.902 172.61 436.646 174.866 433.862 174.866 cv
431.079 174.866 428.822 172.61 428.822 169.826 cv
428.822 167.043 431.079 164.786 433.862 164.786 cv
436.646 164.786 438.902 167.043 438.902 169.826 cv
cp
@
438.905 169.588 mo
438.905 172.371 436.648 174.628 433.865 174.628 cv
431.081 174.628 428.825 172.371 428.825 169.588 cv
428.825 166.804 431.081 164.548 433.865 164.548 cv
436.648 164.548 438.905 166.804 438.905 169.588 cv
ef
438.902 169.586 mo
438.902 172.37 436.646 174.626 433.862 174.626 cv
431.079 174.626 428.822 172.37 428.822 169.586 cv
428.822 166.803 431.079 164.546 433.862 164.546 cv
436.646 164.546 438.902 166.803 438.902 169.586 cv
cp
@
441.785 166.948 mo
441.785 169.731 439.528 171.988 436.745 171.988 cv
433.961 171.988 431.705 169.731 431.705 166.948 cv
431.705 164.164 433.961 161.908 436.745 161.908 cv
439.528 161.908 441.785 164.164 441.785 166.948 cv
ef
441.782 166.946 mo
441.782 169.73 439.526 171.986 436.742 171.986 cv
433.959 171.986 431.702 169.73 431.702 166.946 cv
431.702 164.163 433.959 161.906 436.742 161.906 cv
439.526 161.906 441.782 164.163 441.782 166.946 cv
cp
@
476.345 154.228 mo
476.345 157.011 474.088 159.268 471.305 159.268 cv
468.521 159.268 466.265 157.011 466.265 154.228 cv
466.265 151.444 468.521 149.188 471.305 149.188 cv
474.088 149.188 476.345 151.444 476.345 154.228 cv
ef
476.343 154.226 mo
476.343 157.01 474.086 159.266 471.303 159.266 cv
468.519 159.266 466.263 157.01 466.263 154.226 cv
466.263 151.442 468.519 149.186 471.303 149.186 cv
474.086 149.186 476.343 151.442 476.343 154.226 cv
cp
@
476.585 152.788 mo
476.585 155.571 474.328 157.828 471.545 157.828 cv
468.761 157.828 466.505 155.571 466.505 152.788 cv
466.505 150.004 468.761 147.748 471.545 147.748 cv
474.328 147.748 476.585 150.004 476.585 152.788 cv
ef
476.583 152.786 mo
476.583 155.57 474.326 157.826 471.543 157.826 cv
468.759 157.826 466.503 155.57 466.503 152.786 cv
466.503 150.002 468.759 147.746 471.543 147.746 cv
474.326 147.746 476.583 150.002 476.583 152.786 cv
cp
@
476.825 150.868 mo
476.825 153.651 474.568 155.908 471.785 155.908 cv
469.001 155.908 466.745 153.651 466.745 150.868 cv
466.745 148.084 469.001 145.828 471.785 145.828 cv
474.568 145.828 476.825 148.084 476.825 150.868 cv
ef
476.823 150.866 mo
476.823 153.65 474.566 155.906 471.783 155.906 cv
468.999 155.906 466.743 153.65 466.743 150.866 cv
466.743 148.082 468.999 145.826 471.783 145.826 cv
474.566 145.826 476.823 148.082 476.823 150.866 cv
cp
@
477.545 153.988 mo
477.545 156.771 475.288 159.028 472.505 159.028 cv
469.721 159.028 467.465 156.771 467.465 153.988 cv
467.465 151.204 469.721 148.948 472.505 148.948 cv
475.288 148.948 477.545 151.204 477.545 153.988 cv
ef
477.543 153.986 mo
477.543 156.77 475.286 159.026 472.503 159.026 cv
469.719 159.026 467.463 156.77 467.463 153.986 cv
467.463 151.202 469.719 148.946 472.503 148.946 cv
475.286 148.946 477.543 151.202 477.543 153.986 cv
cp
@
480.185 150.388 mo
480.185 153.171 477.928 155.428 475.145 155.428 cv
472.361 155.428 470.105 153.171 470.105 150.388 cv
470.105 147.604 472.361 145.348 475.145 145.348 cv
477.928 145.348 480.185 147.604 480.185 150.388 cv
ef
480.183 150.386 mo
480.183 153.169 477.926 155.426 475.143 155.426 cv
472.359 155.426 470.103 153.169 470.103 150.386 cv
470.103 147.602 472.359 145.346 475.143 145.346 cv
477.926 145.346 480.183 147.602 480.183 150.386 cv
cp
@
515.945 136.708 mo
515.945 139.491 513.689 141.748 510.905 141.748 cv
508.122 141.748 505.865 139.491 505.865 136.708 cv
505.865 133.924 508.122 131.668 510.905 131.668 cv
513.689 131.668 515.945 133.924 515.945 136.708 cv
ef
515.943 136.706 mo
515.943 139.489 513.686 141.746 510.903 141.746 cv
508.119 141.746 505.863 139.489 505.863 136.706 cv
505.863 133.922 508.119 131.666 510.903 131.666 cv
513.686 131.666 515.943 133.922 515.943 136.706 cv
cp
@
gsave
87.3006 12.3877 mo
646.027 12.3877 li
646.027 426.387 li
87.3006 426.387 li
cp
eclp
gsave
.00460864 .00170898 mo
667.445 .00170898 li
667.445 485.709 li
.00460864 485.709 li
cp
clp
625.866 79.1077 mo
627.306 84.1477 li
632.826 84.1477 li
628.506 87.2677 li
630.186 92.5477 li
625.866 89.1877 li
621.306 92.5477 li
622.986 87.2677 li
618.666 84.1477 li
624.186 84.1477 li
1 gry
ef
.96 lw
625.863 79.1057 mo
627.303 84.1457 li
632.823 84.1457 li
628.503 87.2657 li
630.183 92.5457 li
625.863 89.1857 li
621.303 92.5457 li
622.983 87.2657 li
618.663 84.1457 li
624.183 84.1457 li
cp
0 gry
@
.72 lw
226.981 260.307 mo
1024.74 -87.2153 li
@
grestore
grestore
151.141 287.907 mo
154.021 286.707 li
@
157.141 285.507 mo
159.781 284.307 li
@
162.901 282.867 mo
165.541 281.907 li
@
168.661 280.467 mo
171.301 279.507 li
@
174.421 278.067 mo
177.061 277.107 li
@
180.181 275.667 mo
182.821 274.707 li
@
185.941 273.267 mo
188.581 272.307 li
@
191.701 270.867 mo
194.341 269.907 li
@
197.461 268.467 mo
200.101 267.507 li
@
203.221 266.067 mo
205.861 265.107 li
@
208.981 263.667 mo
211.621 262.467 li
@
214.741 261.267 mo
217.381 260.067 li
@
220.501 258.866 mo
223.141 257.666 li
@
226.26 256.466 mo
228.9 255.266 li
@
232.02 254.066 mo
234.66 252.866 li
@
237.78 251.666 mo
240.42 250.466 li
@
243.54 249.266 mo
246.42 248.066 li
@
249.54 246.626 mo
252.181 245.666 li
@
255.301 244.226 mo
257.941 243.266 li
@
261.061 241.826 mo
263.701 240.866 li
@
266.822 239.426 mo
269.461 238.466 li
@
272.582 237.026 mo
275.221 235.826 li
@
278.342 234.626 mo
280.982 233.426 li
@
284.102 232.226 mo
286.742 231.026 li
@
289.862 229.826 mo
292.502 228.626 li
@
295.622 227.426 mo
298.262 226.226 li
@
301.382 225.026 mo
304.022 223.826 li
@
307.142 222.626 mo
309.782 221.426 li
@
312.902 220.226 mo
315.542 219.026 li
@
318.662 217.826 mo
321.302 216.626 li
@
324.422 215.426 mo
327.062 214.226 li
@
330.182 213.026 mo
332.822 211.826 li
@
335.942 210.626 mo
338.582 209.426 li
@
341.702 207.986 mo
344.582 206.786 li
@
347.702 205.586 mo
350.342 204.386 li
@
353.462 203.186 mo
356.102 201.986 li
@
359.222 200.786 mo
361.862 199.586 li
@
364.982 198.386 mo
367.622 197.186 li
@
370.742 195.986 mo
373.382 194.786 li
@
376.502 193.586 mo
379.142 192.386 li
@
382.262 191.186 mo
384.902 189.986 li
@
388.022 188.786 mo
390.662 187.586 li
@
393.782 186.386 mo
396.422 185.186 li
@
399.542 183.986 mo
402.182 182.786 li
@
405.302 181.586 mo
407.942 180.386 li
@
411.062 178.946 mo
413.702 177.986 li
@
416.822 176.546 mo
419.462 175.586 li
@
422.582 174.146 mo
425.222 173.186 li
@
428.342 171.746 mo
430.982 170.786 li
@
434.102 169.346 mo
436.982 168.146 li
@
439.862 166.946 mo
442.742 165.746 li
@
445.862 164.546 mo
448.502 163.346 li
@
451.622 162.146 mo
454.262 160.946 li
@
457.383 159.746 mo
460.023 158.546 li
@
463.143 157.346 mo
465.783 156.146 li
@
468.903 154.946 mo
471.543 153.746 li
@
474.663 152.306 mo
477.303 151.346 li
@
480.423 149.906 mo
483.063 148.946 li
@
486.183 147.506 mo
488.823 146.546 li
@
491.943 145.106 mo
494.583 144.146 li
@
497.703 142.706 mo
500.343 141.746 li
@
503.463 140.306 mo
506.103 139.346 li
@
509.223 137.906 mo
511.863 136.946 li
@
514.983 135.506 mo
517.623 134.546 li
@
520.743 133.106 mo
523.383 131.906 li
@
526.503 130.706 mo
529.143 129.506 li
@
532.263 128.306 mo
535.143 127.106 li
@
538.263 125.906 mo
540.903 124.706 li
@
544.023 123.266 mo
546.663 122.306 li
@
549.783 120.866 mo
549.783 120.866 li
@
76.1819 452.448 mo
76.1819 453.969 76.1819 452.448 76.1819 453.969 cv
67.6649 453.969 76.1819 453.969 67.6649 453.969 cv
67.6529 453.588 67.7149 453.222 67.8489 452.87 cv
68.0659 452.29 68.4129 451.719 68.8909 451.156 cv
69.3689 450.594 70.0579 449.943 70.9609 449.205 cv
72.3609 448.057 73.3079 447.147 73.7999 446.476 cv
74.2919 445.805 74.5379 445.171 74.5379 444.573 cv
74.5379 443.946 74.3139 443.417 73.8659 442.987 cv
73.4169 442.556 72.8329 442.341 72.1119 442.341 cv
71.3499 442.341 70.7409 442.569 70.2839 443.026 cv
69.8269 443.483 69.5959 444.116 69.5899 444.925 cv
67.9639 444.758 69.5899 444.925 67.9639 444.758 cv
68.0749 443.545 68.4939 442.62 69.2209 441.985 cv
69.9469 441.349 70.9229 441.031 72.1469 441.031 cv
73.3839 441.031 74.3619 441.374 75.0829 442.059 cv
75.8039 442.745 76.1639 443.595 76.1639 444.608 cv
76.1639 445.124 76.0589 445.631 75.8479 446.129 cv
75.6369 446.627 75.2869 447.151 74.7969 447.702 cv
74.3079 448.253 73.4949 449.009 72.3579 449.97 cv
71.4089 450.767 70.7999 451.307 70.5299 451.591 cv
70.2609 451.875 70.0379 452.161 69.8619 452.448 cv
76.1819 452.448 69.8619 452.448 76.1819 452.448 cv
f
77.9669 447.614 mo
77.9669 446.091 78.1239 444.865 78.4369 443.936 cv
78.7509 443.007 79.2169 442.291 79.8349 441.787 cv
80.4529 441.283 81.2309 441.031 82.1679 441.031 cv
82.8599 441.031 83.4659 441.17 83.9879 441.449 cv
84.5089 441.727 84.9399 442.128 85.2799 442.653 cv
85.6199 443.177 85.8859 443.816 86.0789 444.569 cv
86.2729 445.322 86.3689 446.337 86.3689 447.614 cv
86.3689 449.126 86.2139 450.346 85.9039 451.275 cv
85.5929 452.204 85.1289 452.921 84.5109 453.428 cv
83.8919 453.935 83.1119 454.188 82.1679 454.188 cv
80.9259 454.188 79.9509 453.743 79.2409 452.852 cv
78.3919 451.78 77.9669 450.034 77.9669 447.614 cv
cp
79.5929 447.614 mo
79.5929 449.729 79.8409 451.137 80.3359 451.837 cv
80.8309 452.538 81.4419 452.888 82.1679 452.888 cv
82.8949 452.888 83.5059 452.536 84.0009 451.833 cv
84.4959 451.13 84.7429 449.724 84.7429 447.614 cv
84.7429 445.493 84.4959 444.084 84.0009 443.387 cv
83.5059 442.689 82.8889 442.341 82.1509 442.341 cv
81.4239 442.341 80.8439 442.648 80.4099 443.264 cv
79.8659 444.049 79.5929 445.499 79.5929 447.614 cv
f
88.0669 447.614 mo
88.0669 446.091 88.2239 444.865 88.5369 443.936 cv
88.8509 443.007 89.3169 442.291 89.9349 441.787 cv
90.5529 441.283 91.3309 441.031 92.2679 441.031 cv
92.9599 441.031 93.5659 441.17 94.0879 441.449 cv
94.6089 441.727 95.0399 442.128 95.3799 442.653 cv
95.7199 443.177 95.9859 443.816 96.1789 444.569 cv
96.3729 445.322 96.4689 446.337 96.4689 447.614 cv
96.4689 449.126 96.3139 450.346 96.0039 451.275 cv
95.6929 452.204 95.2289 452.921 94.6109 453.428 cv
93.9919 453.935 93.2119 454.188 92.2679 454.188 cv
91.0259 454.188 90.0509 453.743 89.3409 452.852 cv
88.4919 451.78 88.0669 450.034 88.0669 447.614 cv
cp
89.6929 447.614 mo
89.6929 449.729 89.9409 451.137 90.4359 451.837 cv
90.9309 452.538 91.5419 452.888 92.2679 452.888 cv
92.9949 452.888 93.6059 452.536 94.1009 451.833 cv
94.5959 451.13 94.8429 449.724 94.8429 447.614 cv
94.8429 445.493 94.5959 444.084 94.1009 443.387 cv
93.6059 442.689 92.9889 442.341 92.2509 442.341 cv
91.5239 442.341 90.9439 442.648 90.5099 443.264 cv
89.9659 444.049 89.6929 445.499 89.6929 447.614 cv
f
106.482 452.448 mo
106.482 453.969 106.482 452.448 106.482 453.969 cv
97.9649 453.969 106.482 453.969 97.9649 453.969 cv
97.9529 453.588 98.0149 453.222 98.1489 452.87 cv
98.3659 452.29 98.7129 451.719 99.1909 451.156 cv
99.6689 450.594 100.358 449.943 101.261 449.205 cv
102.661 448.057 103.608 447.147 104.1 446.476 cv
104.592 445.805 104.838 445.171 104.838 444.573 cv
104.838 443.946 104.614 443.417 104.166 442.987 cv
103.717 442.556 103.133 442.341 102.412 442.341 cv
101.65 442.341 101.041 442.569 100.584 443.026 cv
100.127 443.483 99.8959 444.116 99.8899 444.925 cv
98.2639 444.758 99.8899 444.925 98.2639 444.758 cv
98.3749 443.545 98.7939 442.62 99.5209 441.985 cv
100.247 441.349 101.223 441.031 102.447 441.031 cv
103.684 441.031 104.662 441.374 105.383 442.059 cv
106.104 442.745 106.464 443.595 106.464 444.608 cv
106.464 445.124 106.359 445.631 106.148 446.129 cv
105.937 446.627 105.587 447.151 105.097 447.702 cv
104.608 448.253 103.795 449.009 102.658 449.97 cv
101.709 450.767 101.1 451.307 100.83 451.591 cv
100.561 451.875 100.338 452.161 100.162 452.448 cv
106.482 452.448 100.162 452.448 106.482 452.448 cv
f
155.882 452.448 mo
155.882 453.969 155.882 452.448 155.882 453.969 cv
147.365 453.969 155.882 453.969 147.365 453.969 cv
147.353 453.588 147.415 453.222 147.549 452.87 cv
147.766 452.29 148.113 451.719 148.591 451.156 cv
149.069 450.594 149.758 449.943 150.661 449.205 cv
152.061 448.057 153.008 447.147 153.5 446.476 cv
153.992 445.805 154.238 445.171 154.238 444.573 cv
154.238 443.946 154.014 443.417 153.566 442.987 cv
153.117 442.556 152.533 442.341 151.812 442.341 cv
151.05 442.341 150.441 442.569 149.984 443.026 cv
149.527 443.483 149.296 444.116 149.29 444.925 cv
147.664 444.758 149.29 444.925 147.664 444.758 cv
147.775 443.545 148.194 442.62 148.921 441.985 cv
149.647 441.349 150.623 441.031 151.847 441.031 cv
153.084 441.031 154.062 441.374 154.783 442.059 cv
155.504 442.745 155.864 443.595 155.864 444.608 cv
155.864 445.124 155.759 445.631 155.548 446.129 cv
155.337 446.627 154.987 447.151 154.497 447.702 cv
154.008 448.253 153.195 449.009 152.058 449.97 cv
151.109 450.767 150.5 451.307 150.23 451.591 cv
149.961 451.875 149.738 452.161 149.562 452.448 cv
155.882 452.448 149.562 452.448 155.882 452.448 cv
f
157.667 447.614 mo
157.667 446.091 157.824 444.865 158.137 443.936 cv
158.451 443.007 158.917 442.291 159.535 441.787 cv
160.153 441.283 160.931 441.031 161.868 441.031 cv
162.56 441.031 163.166 441.17 163.688 441.449 cv
164.209 441.727 164.64 442.128 164.98 442.653 cv
165.32 443.177 165.586 443.816 165.779 444.569 cv
165.973 445.322 166.069 446.337 166.069 447.614 cv
166.069 449.126 165.914 450.346 165.604 451.275 cv
165.293 452.204 164.829 452.921 164.211 453.428 cv
163.592 453.935 162.812 454.188 161.868 454.188 cv
160.626 454.188 159.651 453.743 158.941 452.852 cv
158.092 451.78 157.667 450.034 157.667 447.614 cv
cp
159.293 447.614 mo
159.293 449.729 159.541 451.137 160.036 451.837 cv
160.531 452.538 161.142 452.888 161.868 452.888 cv
162.595 452.888 163.206 452.536 163.701 451.833 cv
164.196 451.13 164.443 449.724 164.443 447.614 cv
164.443 445.493 164.196 444.084 163.701 443.387 cv
163.206 442.689 162.589 442.341 161.851 442.341 cv
161.124 442.341 160.544 442.648 160.11 443.264 cv
159.566 444.049 159.293 445.499 159.293 447.614 cv
f
167.767 447.614 mo
167.767 446.091 167.924 444.865 168.237 443.936 cv
168.551 443.007 169.017 442.291 169.635 441.787 cv
170.253 441.283 171.031 441.031 171.968 441.031 cv
172.66 441.031 173.266 441.17 173.788 441.449 cv
174.309 441.727 174.74 442.128 175.08 442.653 cv
175.42 443.177 175.686 443.816 175.879 444.569 cv
176.073 445.322 176.169 446.337 176.169 447.614 cv
176.169 449.126 176.014 450.346 175.704 451.275 cv
175.393 452.204 174.929 452.921 174.311 453.428 cv
173.692 453.935 172.912 454.188 171.968 454.188 cv
170.726 454.188 169.751 453.743 169.041 452.852 cv
168.192 451.78 167.767 450.034 167.767 447.614 cv
cp
169.393 447.614 mo
169.393 449.729 169.641 451.137 170.136 451.837 cv
170.631 452.538 171.242 452.888 171.968 452.888 cv
172.695 452.888 173.306 452.536 173.801 451.833 cv
174.296 451.13 174.543 449.724 174.543 447.614 cv
174.543 445.493 174.296 444.084 173.801 443.387 cv
173.306 442.689 172.689 442.341 171.951 442.341 cv
171.224 442.341 170.644 442.648 170.21 443.264 cv
169.666 444.049 169.393 445.499 169.393 447.614 cv
f
182.838 453.969 mo
182.838 450.884 182.838 453.969 182.838 450.884 cv
177.249 450.884 182.838 450.884 177.249 450.884 cv
177.249 449.433 177.249 450.884 177.249 449.433 cv
183.128 441.084 177.249 449.433 183.128 441.084 cv
184.42 441.084 183.128 441.084 184.42 441.084 cv
184.42 449.433 184.42 441.084 184.42 449.433 cv
186.161 449.433 184.42 449.433 186.161 449.433 cv
186.161 450.884 186.161 449.433 186.161 450.884 cv
184.42 450.884 186.161 450.884 184.42 450.884 cv
184.42 453.969 184.42 450.884 184.42 453.969 cv
182.838 453.969 184.42 453.969 182.838 453.969 cv
cp
182.838 449.433 mo
182.838 443.624 182.838 449.433 182.838 443.624 cv
178.804 449.433 182.838 443.624 178.804 449.433 cv
182.838 449.433 178.804 449.433 182.838 449.433 cv
f
235.782 452.448 mo
235.782 453.969 235.782 452.448 235.782 453.969 cv
227.265 453.969 235.782 453.969 227.265 453.969 cv
227.253 453.588 227.315 453.222 227.449 452.87 cv
227.666 452.29 228.013 451.719 228.491 451.156 cv
228.969 450.594 229.658 449.943 230.561 449.205 cv
231.961 448.057 232.908 447.147 233.4 446.476 cv
233.892 445.805 234.138 445.171 234.138 444.573 cv
234.138 443.946 233.914 443.417 233.466 442.987 cv
233.017 442.556 232.433 442.341 231.712 442.341 cv
230.95 442.341 230.341 442.569 229.884 443.026 cv
229.427 443.483 229.196 444.116 229.19 444.925 cv
227.564 444.758 229.19 444.925 227.564 444.758 cv
227.675 443.545 228.094 442.62 228.821 441.985 cv
229.547 441.349 230.523 441.031 231.747 441.031 cv
232.984 441.031 233.962 441.374 234.683 442.059 cv
235.404 442.745 235.764 443.595 235.764 444.608 cv
235.764 445.124 235.659 445.631 235.448 446.129 cv
235.237 446.627 234.887 447.151 234.397 447.702 cv
233.908 448.253 233.095 449.009 231.958 449.97 cv
231.009 450.767 230.4 451.307 230.13 451.591 cv
229.861 451.875 229.638 452.161 229.462 452.448 cv
235.782 452.448 229.462 452.448 235.782 452.448 cv
f
237.567 447.614 mo
237.567 446.091 237.724 444.865 238.037 443.936 cv
238.351 443.007 238.817 442.291 239.435 441.787 cv
240.053 441.283 240.831 441.031 241.768 441.031 cv
242.46 441.031 243.066 441.17 243.588 441.449 cv
244.109 441.727 244.54 442.128 244.88 442.653 cv
245.22 443.177 245.486 443.816 245.679 444.569 cv
245.873 445.322 245.969 446.337 245.969 447.614 cv
245.969 449.126 245.814 450.346 245.504 451.275 cv
245.193 452.204 244.729 452.921 244.111 453.428 cv
243.492 453.935 242.712 454.188 241.768 454.188 cv
240.526 454.188 239.551 453.743 238.841 452.852 cv
237.992 451.78 237.567 450.034 237.567 447.614 cv
cp
239.193 447.614 mo
239.193 449.729 239.441 451.137 239.936 451.837 cv
240.431 452.538 241.042 452.888 241.768 452.888 cv
242.495 452.888 243.106 452.536 243.601 451.833 cv
244.096 451.13 244.343 449.724 244.343 447.614 cv
244.343 445.493 244.096 444.084 243.601 443.387 cv
243.106 442.689 242.489 442.341 241.751 442.341 cv
241.024 442.341 240.444 442.648 240.01 443.264 cv
239.466 444.049 239.193 445.499 239.193 447.614 cv
f
247.667 447.614 mo
247.667 446.091 247.824 444.865 248.137 443.936 cv
248.451 443.007 248.917 442.291 249.535 441.787 cv
250.153 441.283 250.931 441.031 251.868 441.031 cv
252.56 441.031 253.166 441.17 253.688 441.449 cv
254.209 441.727 254.64 442.128 254.98 442.653 cv
255.32 443.177 255.586 443.816 255.779 444.569 cv
255.973 445.322 256.069 446.337 256.069 447.614 cv
256.069 449.126 255.914 450.346 255.604 451.275 cv
255.293 452.204 254.829 452.921 254.211 453.428 cv
253.592 453.935 252.812 454.188 251.868 454.188 cv
250.626 454.188 249.651 453.743 248.941 452.852 cv
248.092 451.78 247.667 450.034 247.667 447.614 cv
cp
249.293 447.614 mo
249.293 449.729 249.541 451.137 250.036 451.837 cv
250.531 452.538 251.142 452.888 251.868 452.888 cv
252.595 452.888 253.206 452.536 253.701 451.833 cv
254.196 451.13 254.443 449.724 254.443 447.614 cv
254.443 445.493 254.196 444.084 253.701 443.387 cv
253.206 442.689 252.589 442.341 251.851 442.341 cv
251.124 442.341 250.544 442.648 250.11 443.264 cv
249.566 444.049 249.293 445.499 249.293 447.614 cv
f
265.976 444.239 mo
264.403 444.362 265.976 444.239 264.403 444.362 cv
264.262 443.741 264.063 443.29 263.805 443.009 cv
263.377 442.558 262.85 442.332 262.223 442.332 cv
261.719 442.332 261.277 442.473 260.896 442.754 cv
260.398 443.117 260.005 443.647 259.718 444.345 cv
259.431 445.042 259.282 446.035 259.27 447.324 cv
259.651 446.744 260.117 446.313 260.667 446.032 cv
261.218 445.751 261.795 445.61 262.399 445.61 cv
263.454 445.61 264.352 445.998 265.093 446.775 cv
265.834 447.551 266.205 448.555 266.205 449.785 cv
266.205 450.594 266.03 451.345 265.682 452.039 cv
265.333 452.734 264.854 453.266 264.245 453.635 cv
263.635 454.004 262.944 454.188 262.17 454.188 cv
260.852 454.188 259.777 453.703 258.945 452.734 cv
258.113 451.764 257.697 450.166 257.697 447.939 cv
257.697 445.449 258.157 443.639 259.077 442.508 cv
259.879 441.523 260.96 441.031 262.32 441.031 cv
263.334 441.031 264.164 441.315 264.812 441.884 cv
265.459 442.452 265.847 443.237 265.976 444.239 cv
cp
259.516 449.794 mo
259.516 450.339 259.632 450.86 259.863 451.358 cv
260.095 451.856 260.418 452.236 260.834 452.496 cv
261.25 452.757 261.687 452.888 262.144 452.888 cv
262.812 452.888 263.386 452.618 263.867 452.079 cv
264.347 451.54 264.587 450.807 264.587 449.882 cv
264.587 448.991 264.35 448.289 263.876 447.777 cv
263.401 447.264 262.803 447.008 262.083 447.008 cv
261.368 447.008 260.761 447.264 260.263 447.777 cv
259.765 448.289 259.516 448.962 259.516 449.794 cv
f
315.482 452.448 mo
315.482 453.969 315.482 452.448 315.482 453.969 cv
306.965 453.969 315.482 453.969 306.965 453.969 cv
306.953 453.588 307.015 453.222 307.149 452.87 cv
307.366 452.29 307.713 451.719 308.191 451.156 cv
308.669 450.594 309.358 449.943 310.261 449.205 cv
311.661 448.057 312.608 447.147 313.1 446.476 cv
313.592 445.805 313.838 445.171 313.838 444.573 cv
313.838 443.946 313.614 443.417 313.166 442.987 cv
312.717 442.556 312.133 442.341 311.412 442.341 cv
310.65 442.341 310.041 442.569 309.584 443.026 cv
309.127 443.483 308.896 444.116 308.89 444.925 cv
307.264 444.758 308.89 444.925 307.264 444.758 cv
307.375 443.545 307.794 442.62 308.521 441.985 cv
309.247 441.349 310.223 441.031 311.447 441.031 cv
312.684 441.031 313.662 441.374 314.383 442.059 cv
315.104 442.745 315.464 443.595 315.464 444.608 cv
315.464 445.124 315.359 445.631 315.148 446.129 cv
314.937 446.627 314.587 447.151 314.097 447.702 cv
313.608 448.253 312.795 449.009 311.658 449.97 cv
310.709 450.767 310.1 451.307 309.83 451.591 cv
309.561 451.875 309.338 452.161 309.162 452.448 cv
315.482 452.448 309.162 452.448 315.482 452.448 cv
f
317.267 447.614 mo
317.267 446.091 317.424 444.865 317.737 443.936 cv
318.051 443.007 318.517 442.291 319.135 441.787 cv
319.753 441.283 320.531 441.031 321.468 441.031 cv
322.16 441.031 322.766 441.17 323.288 441.449 cv
323.809 441.727 324.24 442.128 324.58 442.653 cv
324.92 443.177 325.186 443.816 325.379 444.569 cv
325.573 445.322 325.669 446.337 325.669 447.614 cv
325.669 449.126 325.514 450.346 325.204 451.275 cv
324.893 452.204 324.429 452.921 323.811 453.428 cv
323.192 453.935 322.412 454.188 321.468 454.188 cv
320.226 454.188 319.251 453.743 318.541 452.852 cv
317.692 451.78 317.267 450.034 317.267 447.614 cv
cp
318.893 447.614 mo
318.893 449.729 319.141 451.137 319.636 451.837 cv
320.131 452.538 320.742 452.888 321.468 452.888 cv
322.195 452.888 322.806 452.536 323.301 451.833 cv
323.796 451.13 324.043 449.724 324.043 447.614 cv
324.043 445.493 323.796 444.084 323.301 443.387 cv
322.806 442.689 322.189 442.341 321.451 442.341 cv
320.724 442.341 320.144 442.648 319.71 443.264 cv
319.166 444.049 318.893 445.499 318.893 447.614 cv
f
327.367 447.614 mo
327.367 446.091 327.524 444.865 327.837 443.936 cv
328.151 443.007 328.617 442.291 329.235 441.787 cv
329.853 441.283 330.631 441.031 331.568 441.031 cv
332.26 441.031 332.866 441.17 333.388 441.449 cv
333.909 441.727 334.34 442.128 334.68 442.653 cv
335.02 443.177 335.286 443.816 335.479 444.569 cv
335.673 445.322 335.769 446.337 335.769 447.614 cv
335.769 449.126 335.614 450.346 335.304 451.275 cv
334.993 452.204 334.529 452.921 333.911 453.428 cv
333.292 453.935 332.512 454.188 331.568 454.188 cv
330.326 454.188 329.351 453.743 328.641 452.852 cv
327.792 451.78 327.367 450.034 327.367 447.614 cv
cp
328.993 447.614 mo
328.993 449.729 329.241 451.137 329.736 451.837 cv
330.231 452.538 330.842 452.888 331.568 452.888 cv
332.295 452.888 332.906 452.536 333.401 451.833 cv
333.896 451.13 334.143 449.724 334.143 447.614 cv
334.143 445.493 333.896 444.084 333.401 443.387 cv
332.906 442.689 332.289 442.341 331.551 442.341 cv
330.824 442.341 330.244 442.648 329.81 443.264 cv
329.266 444.049 328.993 445.499 328.993 447.614 cv
f
339.802 446.981 mo
339.145 446.741 338.659 446.398 338.343 445.953 cv
338.026 445.508 337.868 444.975 337.868 444.353 cv
337.868 443.416 338.205 442.628 338.879 441.989 cv
339.553 441.35 340.449 441.031 341.568 441.031 cv
342.693 441.031 343.599 441.358 344.284 442.011 cv
344.97 442.664 345.312 443.46 345.312 444.397 cv
345.312 444.995 345.156 445.515 344.842 445.957 cv
344.529 446.4 344.053 446.741 343.414 446.981 cv
344.205 447.239 344.807 447.655 345.22 448.229 cv
345.633 448.804 345.84 449.489 345.84 450.286 cv
345.84 451.388 345.45 452.313 344.671 453.063 cv
343.892 453.813 342.866 454.188 341.595 454.188 cv
340.323 454.188 339.298 453.812 338.518 453.059 cv
337.739 452.306 337.349 451.367 337.349 450.242 cv
337.349 449.404 337.562 448.703 337.987 448.137 cv
338.411 447.572 339.017 447.186 339.802 446.981 cv
cp
339.485 444.301 mo
339.485 444.91 339.681 445.408 340.074 445.795 cv
340.467 446.182 340.976 446.375 341.603 446.375 cv
342.213 446.375 342.712 446.183 343.102 445.799 cv
343.492 445.415 343.686 444.945 343.686 444.389 cv
343.686 443.808 343.486 443.321 343.084 442.925 cv
342.683 442.53 342.184 442.332 341.586 442.332 cv
340.982 442.332 340.481 442.525 340.083 442.912 cv
339.685 443.299 339.485 443.762 339.485 444.301 cv
cp
338.975 450.251 mo
338.975 450.702 339.082 451.139 339.296 451.56 cv
339.51 451.982 339.828 452.309 340.25 452.54 cv
340.672 452.772 341.126 452.888 341.612 452.888 cv
342.368 452.888 342.992 452.644 343.484 452.158 cv
343.976 451.672 344.223 451.054 344.223 450.304 cv
344.223 449.542 343.969 448.912 343.462 448.414 cv
342.955 447.916 342.321 447.667 341.559 447.667 cv
340.815 447.667 340.199 447.913 339.709 448.405 cv
339.22 448.897 338.975 449.513 338.975 450.251 cv
f
395.382 452.448 mo
395.382 453.969 395.382 452.448 395.382 453.969 cv
386.865 453.969 395.382 453.969 386.865 453.969 cv
386.853 453.588 386.915 453.222 387.049 452.87 cv
387.266 452.29 387.613 451.719 388.091 451.156 cv
388.569 450.594 389.258 449.943 390.161 449.205 cv
391.561 448.057 392.508 447.147 393 446.476 cv
393.492 445.805 393.738 445.171 393.738 444.573 cv
393.738 443.946 393.514 443.417 393.066 442.987 cv
392.617 442.556 392.033 442.341 391.312 442.341 cv
390.55 442.341 389.941 442.569 389.484 443.026 cv
389.027 443.483 388.796 444.116 388.79 444.925 cv
387.164 444.758 388.79 444.925 387.164 444.758 cv
387.275 443.545 387.694 442.62 388.421 441.985 cv
389.147 441.349 390.123 441.031 391.347 441.031 cv
392.584 441.031 393.562 441.374 394.283 442.059 cv
395.004 442.745 395.364 443.595 395.364 444.608 cv
395.364 445.124 395.259 445.631 395.048 446.129 cv
394.837 446.627 394.487 447.151 393.997 447.702 cv
393.508 448.253 392.695 449.009 391.558 449.97 cv
390.609 450.767 390 451.307 389.73 451.591 cv
389.461 451.875 389.238 452.161 389.062 452.448 cv
395.382 452.448 389.062 452.448 395.382 452.448 cv
f
397.167 447.614 mo
397.167 446.091 397.324 444.865 397.637 443.936 cv
397.951 443.007 398.417 442.291 399.035 441.787 cv
399.653 441.283 400.431 441.031 401.368 441.031 cv
402.06 441.031 402.666 441.17 403.188 441.449 cv
403.709 441.727 404.14 442.128 404.48 442.653 cv
404.82 443.177 405.086 443.816 405.279 444.569 cv
405.473 445.322 405.569 446.337 405.569 447.614 cv
405.569 449.126 405.414 450.346 405.104 451.275 cv
404.793 452.204 404.329 452.921 403.711 453.428 cv
403.092 453.935 402.312 454.188 401.368 454.188 cv
400.126 454.188 399.151 453.743 398.441 452.852 cv
397.592 451.78 397.167 450.034 397.167 447.614 cv
cp
398.793 447.614 mo
398.793 449.729 399.041 451.137 399.536 451.837 cv
400.031 452.538 400.642 452.888 401.368 452.888 cv
402.095 452.888 402.706 452.536 403.201 451.833 cv
403.696 451.13 403.943 449.724 403.943 447.614 cv
403.943 445.493 403.696 444.084 403.201 443.387 cv
402.706 442.689 402.089 442.341 401.351 442.341 cv
400.624 442.341 400.044 442.648 399.61 443.264 cv
399.066 444.049 398.793 445.499 398.793 447.614 cv
f
413.226 453.969 mo
411.644 453.969 413.226 453.969 411.644 453.969 cv
411.644 443.888 411.644 453.969 411.644 443.888 cv
411.263 444.251 410.764 444.614 410.146 444.977 cv
409.527 445.341 408.972 445.613 408.48 445.795 cv
408.48 444.266 408.48 445.795 408.48 444.266 cv
409.365 443.85 410.138 443.346 410.8 442.754 cv
411.462 442.162 411.931 441.588 412.207 441.031 cv
413.226 441.031 412.207 441.031 413.226 441.031 cv
413.226 453.969 413.226 441.031 413.226 453.969 cv
f
417.367 447.614 mo
417.367 446.091 417.524 444.865 417.837 443.936 cv
418.151 443.007 418.617 442.291 419.235 441.787 cv
419.853 441.283 420.631 441.031 421.568 441.031 cv
422.26 441.031 422.866 441.17 423.388 441.449 cv
423.909 441.727 424.34 442.128 424.68 442.653 cv
425.02 443.177 425.286 443.816 425.479 444.569 cv
425.673 445.322 425.769 446.337 425.769 447.614 cv
425.769 449.126 425.614 450.346 425.304 451.275 cv
424.993 452.204 424.529 452.921 423.911 453.428 cv
423.292 453.935 422.512 454.188 421.568 454.188 cv
420.326 454.188 419.351 453.743 418.641 452.852 cv
417.792 451.78 417.367 450.034 417.367 447.614 cv
cp
418.993 447.614 mo
418.993 449.729 419.241 451.137 419.736 451.837 cv
420.231 452.538 420.842 452.888 421.568 452.888 cv
422.295 452.888 422.906 452.536 423.401 451.833 cv
423.896 451.13 424.143 449.724 424.143 447.614 cv
424.143 445.493 423.896 444.084 423.401 443.387 cv
422.906 442.689 422.289 442.341 421.551 442.341 cv
420.824 442.341 420.244 442.648 419.81 443.264 cv
419.266 444.049 418.993 445.499 418.993 447.614 cv
f
475.082 452.448 mo
475.082 453.969 475.082 452.448 475.082 453.969 cv
466.565 453.969 475.082 453.969 466.565 453.969 cv
466.553 453.588 466.615 453.222 466.749 452.87 cv
466.966 452.29 467.313 451.719 467.791 451.156 cv
468.269 450.594 468.958 449.943 469.861 449.205 cv
471.261 448.057 472.208 447.147 472.7 446.476 cv
473.192 445.805 473.438 445.171 473.438 444.573 cv
473.438 443.946 473.214 443.417 472.766 442.987 cv
472.317 442.556 471.733 442.341 471.012 442.341 cv
470.25 442.341 469.641 442.569 469.184 443.026 cv
468.727 443.483 468.496 444.116 468.49 444.925 cv
466.864 444.758 468.49 444.925 466.864 444.758 cv
466.975 443.545 467.394 442.62 468.121 441.985 cv
468.847 441.349 469.823 441.031 471.047 441.031 cv
472.284 441.031 473.262 441.374 473.983 442.059 cv
474.704 442.745 475.064 443.595 475.064 444.608 cv
475.064 445.124 474.959 445.631 474.748 446.129 cv
474.537 446.627 474.187 447.151 473.697 447.702 cv
473.208 448.253 472.395 449.009 471.258 449.97 cv
470.309 450.767 469.7 451.307 469.43 451.591 cv
469.161 451.875 468.938 452.161 468.762 452.448 cv
475.082 452.448 468.762 452.448 475.082 452.448 cv
f
476.867 447.614 mo
476.867 446.091 477.024 444.865 477.337 443.936 cv
477.651 443.007 478.117 442.291 478.735 441.787 cv
479.353 441.283 480.131 441.031 481.068 441.031 cv
481.76 441.031 482.366 441.17 482.888 441.449 cv
483.409 441.727 483.84 442.128 484.18 442.653 cv
484.52 443.177 484.786 443.816 484.979 444.569 cv
485.173 445.322 485.269 446.337 485.269 447.614 cv
485.269 449.126 485.114 450.346 484.804 451.275 cv
484.493 452.204 484.029 452.921 483.411 453.428 cv
482.792 453.935 482.012 454.188 481.068 454.188 cv
479.826 454.188 478.851 453.743 478.141 452.852 cv
477.292 451.78 476.867 450.034 476.867 447.614 cv
cp
478.493 447.614 mo
478.493 449.729 478.741 451.137 479.236 451.837 cv
479.731 452.538 480.342 452.888 481.068 452.888 cv
481.795 452.888 482.406 452.536 482.901 451.833 cv
483.396 451.13 483.643 449.724 483.643 447.614 cv
483.643 445.493 483.396 444.084 482.901 443.387 cv
482.406 442.689 481.789 442.341 481.051 442.341 cv
480.324 442.341 479.744 442.648 479.31 443.264 cv
478.766 444.049 478.493 445.499 478.493 447.614 cv
f
492.926 453.969 mo
491.344 453.969 492.926 453.969 491.344 453.969 cv
491.344 443.888 491.344 453.969 491.344 443.888 cv
490.963 444.251 490.464 444.614 489.846 444.977 cv
489.227 445.341 488.672 445.613 488.18 445.795 cv
488.18 444.266 488.18 445.795 488.18 444.266 cv
489.065 443.85 489.838 443.346 490.5 442.754 cv
491.162 442.162 491.631 441.588 491.907 441.031 cv
492.926 441.031 491.907 441.031 492.926 441.031 cv
492.926 453.969 492.926 441.031 492.926 453.969 cv
f
505.282 452.448 mo
505.282 453.969 505.282 452.448 505.282 453.969 cv
496.765 453.969 505.282 453.969 496.765 453.969 cv
496.753 453.588 496.815 453.222 496.949 452.87 cv
497.166 452.29 497.513 451.719 497.991 451.156 cv
498.469 450.594 499.158 449.943 500.061 449.205 cv
501.461 448.057 502.408 447.147 502.9 446.476 cv
503.392 445.805 503.638 445.171 503.638 444.573 cv
503.638 443.946 503.414 443.417 502.966 442.987 cv
502.517 442.556 501.933 442.341 501.212 442.341 cv
500.45 442.341 499.841 442.569 499.384 443.026 cv
498.927 443.483 498.696 444.116 498.69 444.925 cv
497.064 444.758 498.69 444.925 497.064 444.758 cv
497.175 443.545 497.594 442.62 498.321 441.985 cv
499.047 441.349 500.023 441.031 501.247 441.031 cv
502.484 441.031 503.462 441.374 504.183 442.059 cv
504.904 442.745 505.264 443.595 505.264 444.608 cv
505.264 445.124 505.159 445.631 504.948 446.129 cv
504.737 446.627 504.387 447.151 503.897 447.702 cv
503.408 448.253 502.595 449.009 501.458 449.97 cv
500.509 450.767 499.9 451.307 499.63 451.591 cv
499.361 451.875 499.138 452.161 498.962 452.448 cv
505.282 452.448 498.962 452.448 505.282 452.448 cv
f
554.982 452.448 mo
554.982 453.969 554.982 452.448 554.982 453.969 cv
546.465 453.969 554.982 453.969 546.465 453.969 cv
546.453 453.588 546.515 453.222 546.649 452.87 cv
546.866 452.29 547.213 451.719 547.691 451.156 cv
548.169 450.594 548.858 449.943 549.761 449.205 cv
551.161 448.057 552.108 447.147 552.6 446.476 cv
553.092 445.805 553.338 445.171 553.338 444.573 cv
553.338 443.946 553.114 443.417 552.666 442.987 cv
552.217 442.556 551.633 442.341 550.912 442.341 cv
550.15 442.341 549.541 442.569 549.084 443.026 cv
548.627 443.483 548.396 444.116 548.39 444.925 cv
546.764 444.758 548.39 444.925 546.764 444.758 cv
546.875 443.545 547.294 442.62 548.021 441.985 cv
548.747 441.349 549.723 441.031 550.947 441.031 cv
552.184 441.031 553.162 441.374 553.883 442.059 cv
554.604 442.745 554.964 443.595 554.964 444.608 cv
554.964 445.124 554.859 445.631 554.648 446.129 cv
554.437 446.627 554.087 447.151 553.597 447.702 cv
553.108 448.253 552.295 449.009 551.158 449.97 cv
550.209 450.767 549.6 451.307 549.33 451.591 cv
549.061 451.875 548.838 452.161 548.662 452.448 cv
554.982 452.448 548.662 452.448 554.982 452.448 cv
f
556.767 447.614 mo
556.767 446.091 556.924 444.865 557.237 443.936 cv
557.551 443.007 558.017 442.291 558.635 441.787 cv
559.253 441.283 560.031 441.031 560.968 441.031 cv
561.66 441.031 562.266 441.17 562.788 441.449 cv
563.309 441.727 563.74 442.128 564.08 442.653 cv
564.42 443.177 564.686 443.816 564.879 444.569 cv
565.073 445.322 565.169 446.337 565.169 447.614 cv
565.169 449.126 565.014 450.346 564.704 451.275 cv
564.393 452.204 563.929 452.921 563.311 453.428 cv
562.692 453.935 561.912 454.188 560.968 454.188 cv
559.726 454.188 558.751 453.743 558.041 452.852 cv
557.192 451.78 556.767 450.034 556.767 447.614 cv
cp
558.393 447.614 mo
558.393 449.729 558.641 451.137 559.136 451.837 cv
559.631 452.538 560.242 452.888 560.968 452.888 cv
561.695 452.888 562.306 452.536 562.801 451.833 cv
563.296 451.13 563.543 449.724 563.543 447.614 cv
563.543 445.493 563.296 444.084 562.801 443.387 cv
562.306 442.689 561.689 442.341 560.951 442.341 cv
560.224 442.341 559.644 442.648 559.21 443.264 cv
558.666 444.049 558.393 445.499 558.393 447.614 cv
f
572.826 453.969 mo
571.244 453.969 572.826 453.969 571.244 453.969 cv
571.244 443.888 571.244 453.969 571.244 443.888 cv
570.863 444.251 570.364 444.614 569.746 444.977 cv
569.127 445.341 568.572 445.613 568.08 445.795 cv
568.08 444.266 568.08 445.795 568.08 444.266 cv
568.965 443.85 569.738 443.346 570.4 442.754 cv
571.062 442.162 571.531 441.588 571.807 441.031 cv
572.826 441.031 571.807 441.031 572.826 441.031 cv
572.826 453.969 572.826 441.031 572.826 453.969 cv
f
582.038 453.969 mo
582.038 450.884 582.038 453.969 582.038 450.884 cv
576.449 450.884 582.038 450.884 576.449 450.884 cv
576.449 449.433 576.449 450.884 576.449 449.433 cv
582.328 441.084 576.449 449.433 582.328 441.084 cv
583.62 441.084 582.328 441.084 583.62 441.084 cv
583.62 449.433 583.62 441.084 583.62 449.433 cv
585.361 449.433 583.62 449.433 585.361 449.433 cv
585.361 450.884 585.361 449.433 585.361 450.884 cv
583.62 450.884 585.361 450.884 583.62 450.884 cv
583.62 453.969 583.62 450.884 583.62 453.969 cv
582.038 453.969 583.62 453.969 582.038 453.969 cv
cp
582.038 449.433 mo
582.038 443.624 582.038 449.433 582.038 443.624 cv
578.004 449.433 582.038 443.624 578.004 449.433 cv
582.038 449.433 578.004 449.433 582.038 449.433 cv
f
634.682 452.448 mo
634.682 453.969 634.682 452.448 634.682 453.969 cv
626.165 453.969 634.682 453.969 626.165 453.969 cv
626.153 453.588 626.215 453.222 626.349 452.87 cv
626.566 452.29 626.913 451.719 627.391 451.156 cv
627.869 450.594 628.558 449.943 629.461 449.205 cv
630.861 448.057 631.808 447.147 632.3 446.476 cv
632.792 445.805 633.038 445.171 633.038 444.573 cv
633.038 443.946 632.814 443.417 632.366 442.987 cv
631.917 442.556 631.333 442.341 630.612 442.341 cv
629.85 442.341 629.241 442.569 628.784 443.026 cv
628.327 443.483 628.096 444.116 628.09 444.925 cv
626.464 444.758 628.09 444.925 626.464 444.758 cv
626.575 443.545 626.994 442.62 627.721 441.985 cv
628.447 441.349 629.423 441.031 630.647 441.031 cv
631.884 441.031 632.862 441.374 633.583 442.059 cv
634.304 442.745 634.664 443.595 634.664 444.608 cv
634.664 445.124 634.559 445.631 634.348 446.129 cv
634.137 446.627 633.787 447.151 633.297 447.702 cv
632.808 448.253 631.995 449.009 630.858 449.97 cv
629.909 450.767 629.3 451.307 629.03 451.591 cv
628.761 451.875 628.538 452.161 628.362 452.448 cv
634.682 452.448 628.362 452.448 634.682 452.448 cv
f
636.467 447.614 mo
636.467 446.091 636.624 444.865 636.937 443.936 cv
637.251 443.007 637.717 442.291 638.335 441.787 cv
638.953 441.283 639.731 441.031 640.668 441.031 cv
641.36 441.031 641.966 441.17 642.488 441.449 cv
643.009 441.727 643.44 442.128 643.78 442.653 cv
644.12 443.177 644.386 443.816 644.579 444.569 cv
644.773 445.322 644.869 446.337 644.869 447.614 cv
644.869 449.126 644.714 450.346 644.404 451.275 cv
644.093 452.204 643.629 452.921 643.011 453.428 cv
642.392 453.935 641.612 454.188 640.668 454.188 cv
639.426 454.188 638.451 453.743 637.741 452.852 cv
636.892 451.78 636.467 450.034 636.467 447.614 cv
cp
638.093 447.614 mo
638.093 449.729 638.341 451.137 638.836 451.837 cv
639.331 452.538 639.942 452.888 640.668 452.888 cv
641.395 452.888 642.006 452.536 642.501 451.833 cv
642.996 451.13 643.243 449.724 643.243 447.614 cv
643.243 445.493 642.996 444.084 642.501 443.387 cv
642.006 442.689 641.389 442.341 640.651 442.341 cv
639.924 442.341 639.344 442.648 638.91 443.264 cv
638.366 444.049 638.093 445.499 638.093 447.614 cv
f
652.526 453.969 mo
650.944 453.969 652.526 453.969 650.944 453.969 cv
650.944 443.888 650.944 453.969 650.944 443.888 cv
650.563 444.251 650.064 444.614 649.446 444.977 cv
648.827 445.341 648.272 445.613 647.78 445.795 cv
647.78 444.266 647.78 445.795 647.78 444.266 cv
648.665 443.85 649.438 443.346 650.1 442.754 cv
650.762 442.162 651.231 441.588 651.507 441.031 cv
652.526 441.031 651.507 441.031 652.526 441.031 cv
652.526 453.969 652.526 441.031 652.526 453.969 cv
f
664.776 444.239 mo
663.203 444.362 664.776 444.239 663.203 444.362 cv
663.062 443.741 662.863 443.29 662.605 443.009 cv
662.177 442.558 661.65 442.332 661.023 442.332 cv
660.519 442.332 660.077 442.473 659.696 442.754 cv
659.198 443.117 658.805 443.647 658.518 444.345 cv
658.231 445.042 658.082 446.035 658.07 447.324 cv
658.451 446.744 658.917 446.313 659.467 446.032 cv
660.018 445.751 660.595 445.61 661.199 445.61 cv
662.254 445.61 663.152 445.998 663.893 446.775 cv
664.634 447.551 665.005 448.555 665.005 449.785 cv
665.005 450.594 664.83 451.345 664.482 452.039 cv
664.133 452.734 663.654 453.266 663.045 453.635 cv
662.435 454.004 661.744 454.188 660.97 454.188 cv
659.652 454.188 658.577 453.703 657.745 452.734 cv
656.913 451.764 656.497 450.166 656.497 447.939 cv
656.497 445.449 656.957 443.639 657.877 442.508 cv
658.679 441.523 659.76 441.031 661.12 441.031 cv
662.134 441.031 662.964 441.315 663.612 441.884 cv
664.259 442.452 664.647 443.237 664.776 444.239 cv
cp
658.316 449.794 mo
658.316 450.339 658.432 450.86 658.663 451.358 cv
658.895 451.856 659.218 452.236 659.634 452.496 cv
660.05 452.757 660.487 452.888 660.944 452.888 cv
661.612 452.888 662.186 452.618 662.667 452.079 cv
663.147 451.54 663.387 450.807 663.387 449.882 cv
663.387 448.991 663.15 448.289 662.676 447.777 cv
662.201 447.264 661.603 447.008 660.883 447.008 cv
660.168 447.008 659.561 447.264 659.063 447.777 cv
658.565 448.289 658.316 448.962 658.316 449.794 cv
f
50.1259 430.969 mo
48.5439 430.969 50.1259 430.969 48.5439 430.969 cv
48.5439 420.888 48.5439 430.969 48.5439 420.888 cv
48.1629 421.251 47.6639 421.615 47.0459 421.977 cv
46.4269 422.341 45.8719 422.613 45.3799 422.795 cv
45.3799 421.266 45.3799 422.795 45.3799 421.266 cv
46.2649 420.85 47.0379 420.346 47.6999 419.754 cv
48.3619 419.162 48.8309 418.588 49.1069 418.031 cv
50.1259 418.031 49.1069 418.031 50.1259 418.031 cv
50.1259 430.969 50.1259 418.031 50.1259 430.969 cv
f
56.6019 423.981 mo
55.9449 423.741 55.4589 423.398 55.1428 422.953 cv
54.8259 422.508 54.6679 421.975 54.6679 421.354 cv
54.6679 420.416 55.0049 419.628 55.6789 418.99 cv
56.3529 418.351 57.2489 418.031 58.3679 418.031 cv
59.4929 418.031 60.3988 418.358 61.0839 419.011 cv
61.7699 419.665 62.1119 420.46 62.1119 421.398 cv
62.1119 421.995 61.9559 422.515 61.6418 422.957 cv
61.3288 423.4 60.8529 423.741 60.2139 423.981 cv
61.0049 424.239 61.6068 424.655 62.0199 425.229 cv
62.4328 425.804 62.6399 426.489 62.6399 427.286 cv
62.6399 428.388 62.2499 429.313 61.4709 430.063 cv
60.6919 430.813 59.6659 431.188 58.3949 431.188 cv
57.1229 431.188 56.0979 430.812 55.3179 430.059 cv
54.5388 429.306 54.1488 428.367 54.1488 427.242 cv
54.1488 426.404 54.3619 425.703 54.7868 425.137 cv
55.2108 424.572 55.8168 424.186 56.6019 423.981 cv
cp
56.2849 421.301 mo
56.2849 421.91 56.4809 422.408 56.8739 422.795 cv
57.2668 423.182 57.7759 423.375 58.4029 423.375 cv
59.0129 423.375 59.5119 423.183 59.9019 422.799 cv
60.2919 422.415 60.4859 421.945 60.4859 421.389 cv
60.4859 420.809 60.2859 420.321 59.8839 419.926 cv
59.4828 419.53 58.9839 419.332 58.3858 419.332 cv
57.7818 419.332 57.2808 419.526 56.8829 419.912 cv
56.4849 420.299 56.2849 420.762 56.2849 421.301 cv
cp
55.7748 427.251 mo
55.7748 427.702 55.8819 428.139 56.0959 428.56 cv
56.3098 428.982 56.6278 429.309 57.0499 429.54 cv
57.4719 429.772 57.9258 429.888 58.4118 429.888 cv
59.1679 429.888 59.7919 429.644 60.2839 429.158 cv
60.7759 428.672 61.0229 428.054 61.0229 427.304 cv
61.0229 426.542 60.7689 425.912 60.2619 425.414 cv
59.7549 424.916 59.1208 424.667 58.3589 424.667 cv
57.6148 424.667 56.9989 424.913 56.5089 425.405 cv
56.0199 425.897 55.7748 426.513 55.7748 427.251 cv
f
64.2669 424.614 mo
64.2669 423.091 64.4239 421.865 64.7368 420.936 cv
65.0508 420.008 65.5169 419.291 66.1348 418.787 cv
66.7529 418.283 67.5309 418.031 68.4678 418.031 cv
69.1599 418.031 69.7658 418.171 70.2878 418.449 cv
70.8089 418.727 71.2399 419.129 71.5798 419.653 cv
71.9199 420.178 72.1859 420.816 72.3789 421.569 cv
72.5729 422.322 72.6689 423.337 72.6689 424.614 cv
72.6689 426.126 72.5138 427.346 72.2038 428.275 cv
71.8929 429.204 71.4288 429.921 70.8109 430.428 cv
70.1918 430.935 69.4118 431.188 68.4678 431.188 cv
67.2259 431.188 66.2508 430.743 65.5408 429.852 cv
64.6918 428.78 64.2669 427.034 64.2669 424.614 cv
cp
65.8929 424.614 mo
65.8929 426.729 66.1408 428.137 66.6358 428.837 cv
67.1309 429.538 67.7419 429.888 68.4678 429.888 cv
69.1948 429.888 69.8058 429.536 70.3008 428.833 cv
70.7959 428.13 71.0428 426.724 71.0428 424.614 cv
71.0428 422.493 70.7959 421.084 70.3008 420.387 cv
69.8058 419.69 69.1889 419.341 68.4509 419.341 cv
67.7238 419.341 67.1439 419.649 66.7098 420.264 cv
66.1658 421.049 65.8929 422.499 65.8929 424.614 cv
f
50.1259 389.669 mo
48.5439 389.669 50.1259 389.669 48.5439 389.669 cv
48.5439 379.588 48.5439 389.669 48.5439 379.588 cv
48.1629 379.951 47.6639 380.315 47.0459 380.678 cv
46.4269 381.041 45.8719 381.314 45.3799 381.495 cv
45.3799 379.966 45.3799 381.495 45.3799 379.966 cv
46.2649 379.55 47.0379 379.046 47.6999 378.454 cv
48.3619 377.862 48.8309 377.288 49.1069 376.731 cv
50.1259 376.731 49.1069 376.731 50.1259 376.731 cv
50.1259 389.669 50.1259 376.731 50.1259 389.669 cv
f
56.6019 382.682 mo
55.9449 382.442 55.4589 382.099 55.1428 381.653 cv
54.8259 381.208 54.6679 380.675 54.6679 380.054 cv
54.6679 379.116 55.0049 378.328 55.6789 377.69 cv
56.3529 377.051 57.2489 376.731 58.3679 376.731 cv
59.4929 376.731 60.3988 377.058 61.0839 377.711 cv
61.7699 378.365 62.1119 379.16 62.1119 380.098 cv
62.1119 380.695 61.9559 381.215 61.6418 381.658 cv
61.3288 382.1 60.8529 382.442 60.2139 382.682 cv
61.0049 382.939 61.6068 383.356 62.0199 383.93 cv
62.4328 384.504 62.6399 385.189 62.6399 385.986 cv
62.6399 387.088 62.2499 388.014 61.4709 388.764 cv
60.6919 389.514 59.6659 389.889 58.3949 389.889 cv
57.1229 389.889 56.0979 389.512 55.3179 388.759 cv
54.5388 388.006 54.1488 387.067 54.1488 385.942 cv
54.1488 385.105 54.3619 384.403 54.7868 383.837 cv
55.2108 383.272 55.8168 382.887 56.6019 382.682 cv
cp
56.2849 380.001 mo
56.2849 380.61 56.4809 381.108 56.8739 381.495 cv
57.2668 381.882 57.7759 382.075 58.4029 382.075 cv
59.0129 382.075 59.5119 381.883 59.9019 381.5 cv
60.2919 381.116 60.4859 380.646 60.4859 380.089 cv
60.4859 379.509 60.2859 379.021 59.8839 378.626 cv
59.4828 378.23 58.9839 378.032 58.3858 378.032 cv
57.7818 378.032 57.2808 378.226 56.8829 378.612 cv
56.4849 378.999 56.2849 379.462 56.2849 380.001 cv
cp
55.7748 385.951 mo
55.7748 386.402 55.8819 386.839 56.0959 387.261 cv
56.3098 387.683 56.6278 388.009 57.0499 388.241 cv
57.4719 388.472 57.9258 388.588 58.4118 388.588 cv
59.1679 388.588 59.7919 388.345 60.2839 387.858 cv
60.7759 387.372 61.0229 386.754 61.0229 386.004 cv
61.0229 385.242 60.7689 384.612 60.2619 384.114 cv
59.7549 383.616 59.1208 383.367 58.3589 383.367 cv
57.6148 383.367 56.9989 383.613 56.5089 384.106 cv
56.0199 384.598 55.7748 385.213 55.7748 385.951 cv
f
70.2259 389.669 mo
68.6439 389.669 70.2259 389.669 68.6439 389.669 cv
68.6439 379.588 68.6439 389.669 68.6439 379.588 cv
68.2628 379.951 67.7638 380.315 67.1459 380.678 cv
66.5268 381.041 65.9718 381.314 65.4799 381.495 cv
65.4799 379.966 65.4799 381.495 65.4799 379.966 cv
66.3649 379.55 67.1378 379.046 67.7999 378.454 cv
68.4618 377.862 68.9308 377.288 69.2068 376.731 cv
70.2259 376.731 69.2068 376.731 70.2259 376.731 cv
70.2259 389.669 70.2259 376.731 70.2259 389.669 cv
f
50.1259 348.169 mo
48.5439 348.169 50.1259 348.169 48.5439 348.169 cv
48.5439 338.088 48.5439 348.169 48.5439 338.088 cv
48.1629 338.451 47.6639 338.815 47.0459 339.178 cv
46.4269 339.541 45.8719 339.814 45.3799 339.995 cv
45.3799 338.466 45.3799 339.995 45.3799 338.466 cv
46.2649 338.05 47.0379 337.546 47.6999 336.954 cv
48.3619 336.362 48.8309 335.788 49.1069 335.231 cv
50.1259 335.231 49.1069 335.231 50.1259 335.231 cv
50.1259 348.169 50.1259 335.231 50.1259 348.169 cv
f
56.6019 341.182 mo
55.9449 340.942 55.4589 340.599 55.1428 340.153 cv
54.8259 339.708 54.6679 339.175 54.6679 338.554 cv
54.6679 337.616 55.0049 336.828 55.6789 336.19 cv
56.3529 335.551 57.2489 335.231 58.3679 335.231 cv
59.4929 335.231 60.3988 335.558 61.0839 336.211 cv
61.7699 336.865 62.1119 337.66 62.1119 338.598 cv
62.1119 339.195 61.9559 339.715 61.6418 340.158 cv
61.3288 340.6 60.8529 340.942 60.2139 341.182 cv
61.0049 341.439 61.6068 341.856 62.0199 342.43 cv
62.4328 343.004 62.6399 343.689 62.6399 344.486 cv
62.6399 345.588 62.2499 346.514 61.4709 347.264 cv
60.6919 348.014 59.6659 348.389 58.3949 348.389 cv
57.1229 348.389 56.0979 348.012 55.3179 347.259 cv
54.5388 346.506 54.1488 345.567 54.1488 344.442 cv
54.1488 343.605 54.3619 342.903 54.7868 342.337 cv
55.2108 341.772 55.8168 341.387 56.6019 341.182 cv
cp
56.2849 338.501 mo
56.2849 339.11 56.4809 339.608 56.8739 339.995 cv
57.2668 340.382 57.7759 340.575 58.4029 340.575 cv
59.0129 340.575 59.5119 340.383 59.9019 340 cv
60.2919 339.616 60.4859 339.146 60.4859 338.589 cv
60.4859 338.009 60.2859 337.521 59.8839 337.126 cv
59.4828 336.73 58.9839 336.532 58.3858 336.532 cv
57.7818 336.532 57.2808 336.726 56.8829 337.112 cv
56.4849 337.499 56.2849 337.962 56.2849 338.501 cv
cp
55.7748 344.451 mo
55.7748 344.902 55.8819 345.339 56.0959 345.761 cv
56.3098 346.183 56.6278 346.509 57.0499 346.741 cv
57.4719 346.972 57.9258 347.088 58.4118 347.088 cv
59.1679 347.088 59.7919 346.845 60.2839 346.358 cv
60.7759 345.872 61.0229 345.254 61.0229 344.504 cv
61.0229 343.742 60.7689 343.112 60.2619 342.614 cv
59.7549 342.116 59.1208 341.867 58.3589 341.867 cv
57.6148 341.867 56.9989 342.113 56.5089 342.606 cv
56.0199 343.098 55.7748 343.713 55.7748 344.451 cv
f
72.5818 346.648 mo
72.5818 348.169 72.5818 346.648 72.5818 348.169 cv
64.0648 348.169 72.5818 348.169 64.0648 348.169 cv
64.0528 347.788 64.1148 347.422 64.2488 347.07 cv
64.4658 346.49 64.8128 345.919 65.2908 345.357 cv
65.7688 344.794 66.4578 344.144 67.3608 343.405 cv
68.7608 342.257 69.7078 341.347 70.1998 340.676 cv
70.6918 340.005 70.9378 339.371 70.9378 338.773 cv
70.9378 338.147 70.7138 337.618 70.2658 337.187 cv
69.8168 336.756 69.2328 336.541 68.5118 336.541 cv
67.7498 336.541 67.1408 336.77 66.6838 337.227 cv
66.2268 337.684 65.9958 338.316 65.9898 339.125 cv
64.3638 338.958 65.9898 339.125 64.3638 338.958 cv
64.4748 337.745 64.8938 336.821 65.6208 336.185 cv
66.3468 335.549 67.3228 335.231 68.5468 335.231 cv
69.7838 335.231 70.7618 335.574 71.4828 336.26 cv
72.2038 336.945 72.5638 337.795 72.5638 338.809 cv
72.5638 339.324 72.4588 339.831 72.2478 340.329 cv
72.0368 340.827 71.6868 341.352 71.1968 341.902 cv
70.7078 342.453 69.8948 343.209 68.7578 344.17 cv
67.8088 344.967 67.1998 345.507 66.9298 345.792 cv
66.6608 346.076 66.4378 346.361 66.2618 346.648 cv
72.5818 346.648 66.2618 346.648 72.5818 346.648 cv
f
50.1258 306.869 mo
48.5438 306.869 50.1258 306.869 48.5438 306.869 cv
48.5438 296.788 48.5438 306.869 48.5438 296.788 cv
48.1628 297.151 47.6638 297.515 47.0458 297.878 cv
46.4268 298.241 45.8718 298.514 45.3798 298.695 cv
45.3798 297.166 45.3798 298.695 45.3798 297.166 cv
46.2648 296.75 47.0378 296.246 47.6998 295.654 cv
48.3618 295.062 48.8308 294.488 49.1068 293.931 cv
50.1258 293.931 49.1068 293.931 50.1258 293.931 cv
50.1258 306.869 50.1258 293.931 50.1258 306.869 cv
f
56.6018 299.882 mo
55.9448 299.642 55.4588 299.299 55.1428 298.853 cv
54.8258 298.408 54.6678 297.875 54.6678 297.254 cv
54.6678 296.316 55.0048 295.528 55.6788 294.89 cv
56.3528 294.251 57.2488 293.931 58.3678 293.931 cv
59.4928 293.931 60.3988 294.258 61.0838 294.911 cv
61.7698 295.565 62.1118 296.36 62.1118 297.298 cv
62.1118 297.895 61.9558 298.415 61.6418 298.858 cv
61.3288 299.3 60.8528 299.642 60.2138 299.882 cv
61.0048 300.139 61.6068 300.556 62.0198 301.13 cv
62.4328 301.704 62.6398 302.389 62.6398 303.186 cv
62.6398 304.288 62.2498 305.214 61.4708 305.964 cv
60.6918 306.714 59.6658 307.089 58.3948 307.089 cv
57.1228 307.089 56.0978 306.712 55.3178 305.959 cv
54.5388 305.206 54.1488 304.267 54.1488 303.142 cv
54.1488 302.305 54.3618 301.603 54.7868 301.037 cv
55.2108 300.472 55.8168 300.087 56.6018 299.882 cv
cp
56.2848 297.201 mo
56.2848 297.81 56.4808 298.308 56.8738 298.695 cv
57.2668 299.082 57.7758 299.275 58.4028 299.275 cv
59.0128 299.275 59.5118 299.083 59.9018 298.7 cv
60.2918 298.316 60.4858 297.846 60.4858 297.289 cv
60.4858 296.709 60.2858 296.221 59.8838 295.826 cv
59.4828 295.43 58.9838 295.232 58.3858 295.232 cv
57.7818 295.232 57.2808 295.426 56.8828 295.812 cv
56.4848 296.199 56.2848 296.662 56.2848 297.201 cv
cp
55.7748 303.151 mo
55.7748 303.602 55.8818 304.039 56.0958 304.461 cv
56.3098 304.883 56.6278 305.209 57.0498 305.441 cv
57.4718 305.672 57.9258 305.788 58.4118 305.788 cv
59.1678 305.788 59.7918 305.545 60.2838 305.058 cv
60.7758 304.572 61.0228 303.954 61.0228 303.204 cv
61.0228 302.442 60.7688 301.812 60.2618 301.314 cv
59.7548 300.816 59.1208 300.567 58.3588 300.567 cv
57.6148 300.567 56.9988 300.813 56.5088 301.306 cv
56.0198 301.798 55.7748 302.413 55.7748 303.151 cv
f
64.2758 303.468 mo
65.8578 303.257 64.2758 303.468 65.8578 303.257 cv
66.0398 304.153 66.3488 304.799 66.7848 305.195 cv
67.2218 305.59 67.7528 305.788 68.3798 305.788 cv
69.1248 305.788 69.7528 305.53 70.2658 305.015 cv
70.7778 304.499 71.0348 303.86 71.0348 303.098 cv
71.0348 302.372 70.7968 301.773 70.3228 301.301 cv
69.8478 300.829 69.2448 300.594 68.5118 300.594 cv
68.2128 300.594 67.8408 300.652 67.3958 300.769 cv
67.5718 299.381 67.3958 300.769 67.5718 299.381 cv
67.6768 299.392 67.7618 299.398 67.8268 299.398 cv
68.5008 299.398 69.1068 299.223 69.6458 298.871 cv
70.1848 298.519 70.4548 297.977 70.4548 297.245 cv
70.4548 296.665 70.2578 296.184 69.8658 295.804 cv
69.4728 295.423 68.9658 295.232 68.3448 295.232 cv
67.7298 295.232 67.2168 295.426 66.8068 295.812 cv
66.3968 296.199 66.1328 296.779 66.0158 297.553 cv
64.4338 297.271 66.0158 297.553 64.4338 297.271 cv
64.6268 296.211 65.0668 295.389 65.7518 294.806 cv
66.4378 294.223 67.2908 293.931 68.3098 293.931 cv
69.0128 293.931 69.6608 294.082 70.2518 294.384 cv
70.8438 294.686 71.2968 295.098 71.6098 295.619 cv
71.9238 296.14 72.0808 296.694 72.0808 297.28 cv
72.0808 297.837 71.9308 298.344 71.6318 298.801 cv
71.3338 299.258 70.8908 299.621 70.3048 299.89 cv
71.0668 300.066 71.6588 300.431 72.0808 300.985 cv
72.5018 301.538 72.7128 302.231 72.7128 303.063 cv
72.7128 304.188 72.3028 305.142 71.4828 305.924 cv
70.6628 306.706 69.6258 307.098 68.3718 307.098 cv
67.2408 307.098 66.3018 306.761 65.5548 306.087 cv
64.8078 305.413 64.3808 304.54 64.2758 303.468 cv
f
50.1258 265.369 mo
48.5438 265.369 50.1258 265.369 48.5438 265.369 cv
48.5438 255.288 48.5438 265.369 48.5438 255.288 cv
48.1628 255.651 47.6638 256.015 47.0458 256.378 cv
46.4268 256.741 45.8718 257.014 45.3798 257.195 cv
45.3798 255.666 45.3798 257.195 45.3798 255.666 cv
46.2648 255.25 47.0378 254.746 47.6998 254.154 cv
48.3618 253.562 48.8308 252.988 49.1068 252.431 cv
50.1258 252.431 49.1068 252.431 50.1258 252.431 cv
50.1258 265.369 50.1258 252.431 50.1258 265.369 cv
f
56.6018 258.382 mo
55.9448 258.142 55.4588 257.799 55.1428 257.353 cv
54.8258 256.908 54.6678 256.375 54.6678 255.754 cv
54.6678 254.816 55.0048 254.028 55.6788 253.39 cv
56.3528 252.751 57.2488 252.431 58.3678 252.431 cv
59.4928 252.431 60.3988 252.758 61.0838 253.411 cv
61.7698 254.065 62.1118 254.86 62.1118 255.798 cv
62.1118 256.395 61.9558 256.915 61.6418 257.358 cv
61.3288 257.8 60.8528 258.142 60.2138 258.382 cv
61.0048 258.639 61.6068 259.056 62.0198 259.63 cv
62.4328 260.204 62.6398 260.889 62.6398 261.686 cv
62.6398 262.788 62.2498 263.714 61.4708 264.464 cv
60.6918 265.214 59.6658 265.589 58.3948 265.589 cv
57.1228 265.589 56.0978 265.212 55.3178 264.459 cv
54.5388 263.706 54.1488 262.767 54.1488 261.642 cv
54.1488 260.805 54.3618 260.103 54.7868 259.537 cv
55.2108 258.972 55.8168 258.587 56.6018 258.382 cv
cp
56.2848 255.701 mo
56.2848 256.31 56.4808 256.808 56.8738 257.195 cv
57.2668 257.582 57.7758 257.775 58.4028 257.775 cv
59.0128 257.775 59.5118 257.583 59.9018 257.2 cv
60.2918 256.816 60.4858 256.346 60.4858 255.789 cv
60.4858 255.209 60.2858 254.721 59.8838 254.326 cv
59.4828 253.93 58.9838 253.732 58.3858 253.732 cv
57.7818 253.732 57.2808 253.926 56.8828 254.312 cv
56.4848 254.699 56.2848 255.162 56.2848 255.701 cv
cp
55.7748 261.651 mo
55.7748 262.102 55.8818 262.539 56.0958 262.961 cv
56.3098 263.383 56.6278 263.709 57.0498 263.941 cv
57.4718 264.172 57.9258 264.288 58.4118 264.288 cv
59.1678 264.288 59.7918 264.045 60.2838 263.558 cv
60.7758 263.072 61.0228 262.454 61.0228 261.704 cv
61.0228 260.942 60.7688 260.312 60.2618 259.814 cv
59.7548 259.316 59.1208 259.067 58.3588 259.067 cv
57.6148 259.067 56.9988 259.313 56.5088 259.806 cv
56.0198 260.298 55.7748 260.913 55.7748 261.651 cv
f
69.3378 265.369 mo
69.3378 262.284 69.3378 265.369 69.3378 262.284 cv
63.7488 262.284 69.3378 262.284 63.7488 262.284 cv
63.7488 260.834 63.7488 262.284 63.7488 260.834 cv
69.6278 252.484 63.7488 260.834 69.6278 252.484 cv
70.9198 252.484 69.6278 252.484 70.9198 252.484 cv
70.9198 260.834 70.9198 252.484 70.9198 260.834 cv
72.6608 260.834 70.9198 260.834 72.6608 260.834 cv
72.6608 262.284 72.6608 260.834 72.6608 262.284 cv
70.9198 262.284 72.6608 262.284 70.9198 262.284 cv
70.9198 265.369 70.9198 262.284 70.9198 265.369 cv
69.3378 265.369 70.9198 265.369 69.3378 265.369 cv
cp
69.3378 260.834 mo
69.3378 255.024 69.3378 260.834 69.3378 255.024 cv
65.3038 260.834 69.3378 255.024 65.3038 260.834 cv
69.3378 260.834 65.3038 260.834 69.3378 260.834 cv
f
50.1258 224.069 mo
48.5438 224.069 50.1258 224.069 48.5438 224.069 cv
48.5438 213.988 48.5438 224.069 48.5438 213.988 cv
48.1628 214.351 47.6638 214.715 47.0458 215.078 cv
46.4268 215.441 45.8718 215.714 45.3798 215.895 cv
45.3798 214.366 45.3798 215.895 45.3798 214.366 cv
46.2648 213.95 47.0378 213.446 47.6998 212.854 cv
48.3618 212.262 48.8308 211.688 49.1068 211.131 cv
50.1258 211.131 49.1068 211.131 50.1258 211.131 cv
50.1258 224.069 50.1258 211.131 50.1258 224.069 cv
f
56.6018 217.082 mo
55.9448 216.842 55.4588 216.499 55.1428 216.053 cv
54.8258 215.608 54.6678 215.075 54.6678 214.454 cv
54.6678 213.516 55.0048 212.728 55.6788 212.09 cv
56.3528 211.451 57.2488 211.131 58.3678 211.131 cv
59.4928 211.131 60.3988 211.458 61.0838 212.111 cv
61.7698 212.765 62.1118 213.56 62.1118 214.498 cv
62.1118 215.095 61.9558 215.615 61.6418 216.058 cv
61.3288 216.5 60.8528 216.842 60.2138 217.082 cv
61.0048 217.339 61.6068 217.756 62.0198 218.33 cv
62.4328 218.904 62.6398 219.589 62.6398 220.386 cv
62.6398 221.488 62.2498 222.414 61.4708 223.164 cv
60.6918 223.914 59.6658 224.289 58.3948 224.289 cv
57.1228 224.289 56.0978 223.912 55.3178 223.159 cv
54.5388 222.406 54.1488 221.467 54.1488 220.342 cv
54.1488 219.505 54.3618 218.803 54.7868 218.237 cv
55.2108 217.672 55.8168 217.287 56.6018 217.082 cv
cp
56.2848 214.401 mo
56.2848 215.01 56.4808 215.508 56.8738 215.895 cv
57.2668 216.282 57.7758 216.475 58.4028 216.475 cv
59.0128 216.475 59.5118 216.283 59.9018 215.9 cv
60.2918 215.516 60.4858 215.046 60.4858 214.489 cv
60.4858 213.909 60.2858 213.421 59.8838 213.026 cv
59.4828 212.63 58.9838 212.432 58.3858 212.432 cv
57.7818 212.432 57.2808 212.626 56.8828 213.012 cv
56.4848 213.399 56.2848 213.862 56.2848 214.401 cv
cp
55.7748 220.351 mo
55.7748 220.802 55.8818 221.239 56.0958 221.661 cv
56.3098 222.083 56.6278 222.409 57.0498 222.641 cv
57.4718 222.872 57.9258 222.988 58.4118 222.988 cv
59.1678 222.988 59.7918 222.745 60.2838 222.258 cv
60.7758 221.772 61.0228 221.154 61.0228 220.404 cv
61.0228 219.642 60.7688 219.012 60.2618 218.514 cv
59.7548 218.016 59.1208 217.767 58.3588 217.767 cv
57.6148 217.767 56.9988 218.013 56.5088 218.506 cv
56.0198 218.998 55.7748 219.613 55.7748 220.351 cv
f
64.2668 220.694 mo
65.9278 220.553 64.2668 220.694 65.9278 220.553 cv
66.0508 221.362 66.3368 221.97 66.7848 222.377 cv
67.2328 222.784 67.7738 222.988 68.4068 222.988 cv
69.1688 222.988 69.8128 222.701 70.3398 222.127 cv
70.8678 221.552 71.1308 220.791 71.1308 219.841 cv
71.1308 218.939 70.8778 218.227 70.3708 217.706 cv
69.8638 217.184 69.2008 216.923 68.3798 216.923 cv
67.8708 216.923 67.4108 217.039 66.9998 217.271 cv
66.5898 217.502 66.2678 217.802 66.0338 218.172 cv
64.5478 217.978 66.0338 218.172 64.5478 217.978 cv
65.7958 211.36 64.5478 217.978 65.7958 211.36 cv
72.2038 211.36 65.7958 211.36 72.2038 211.36 cv
72.2038 212.872 72.2038 211.36 72.2038 212.872 cv
67.0618 212.872 72.2038 212.872 67.0618 212.872 cv
66.3678 216.335 67.0618 212.872 66.3678 216.335 cv
67.1408 215.796 67.9528 215.526 68.8018 215.526 cv
69.9268 215.526 70.8758 215.916 71.6498 216.695 cv
72.4228 217.474 72.8098 218.476 72.8098 219.701 cv
72.8098 220.867 72.4698 221.875 71.7908 222.724 cv
70.9638 223.767 69.8358 224.289 68.4068 224.289 cv
67.2348 224.289 66.2778 223.961 65.5368 223.304 cv
64.7958 222.648 64.3728 221.778 64.2668 220.694 cv
f
50.1258 182.769 mo
48.5438 182.769 50.1258 182.769 48.5438 182.769 cv
48.5438 172.688 48.5438 182.769 48.5438 172.688 cv
48.1628 173.051 47.6638 173.415 47.0458 173.778 cv
46.4268 174.141 45.8718 174.414 45.3798 174.595 cv
45.3798 173.066 45.3798 174.595 45.3798 173.066 cv
46.2648 172.65 47.0378 172.146 47.6998 171.554 cv
48.3618 170.962 48.8308 170.388 49.1068 169.831 cv
50.1258 169.831 49.1068 169.831 50.1258 169.831 cv
50.1258 182.769 50.1258 169.831 50.1258 182.769 cv
f
56.6018 175.782 mo
55.9448 175.542 55.4588 175.199 55.1428 174.753 cv
54.8258 174.308 54.6678 173.775 54.6678 173.154 cv
54.6678 172.216 55.0048 171.428 55.6788 170.79 cv
56.3528 170.151 57.2488 169.831 58.3678 169.831 cv
59.4928 169.831 60.3988 170.158 61.0838 170.811 cv
61.7698 171.465 62.1118 172.26 62.1118 173.198 cv
62.1118 173.795 61.9558 174.315 61.6418 174.758 cv
61.3288 175.2 60.8528 175.542 60.2138 175.782 cv
61.0048 176.039 61.6068 176.456 62.0198 177.03 cv
62.4328 177.604 62.6398 178.289 62.6398 179.086 cv
62.6398 180.188 62.2498 181.114 61.4708 181.864 cv
60.6918 182.614 59.6658 182.989 58.3948 182.989 cv
57.1228 182.989 56.0978 182.612 55.3178 181.859 cv
54.5388 181.106 54.1488 180.167 54.1488 179.042 cv
54.1488 178.205 54.3618 177.503 54.7868 176.937 cv
55.2108 176.372 55.8168 175.987 56.6018 175.782 cv
cp
56.2848 173.101 mo
56.2848 173.71 56.4808 174.208 56.8738 174.595 cv
57.2668 174.982 57.7758 175.175 58.4028 175.175 cv
59.0128 175.175 59.5118 174.983 59.9018 174.6 cv
60.2918 174.216 60.4858 173.746 60.4858 173.189 cv
60.4858 172.609 60.2858 172.121 59.8838 171.726 cv
59.4828 171.33 58.9838 171.132 58.3858 171.132 cv
57.7818 171.132 57.2808 171.326 56.8828 171.712 cv
56.4848 172.099 56.2848 172.562 56.2848 173.101 cv
cp
55.7748 179.051 mo
55.7748 179.502 55.8818 179.939 56.0958 180.361 cv
56.3098 180.783 56.6278 181.109 57.0498 181.341 cv
57.4718 181.572 57.9258 181.688 58.4118 181.688 cv
59.1678 181.688 59.7918 181.445 60.2838 180.958 cv
60.7758 180.472 61.0228 179.854 61.0228 179.104 cv
61.0228 178.342 60.7688 177.712 60.2618 177.214 cv
59.7548 176.716 59.1208 176.467 58.3588 176.467 cv
57.6148 176.467 56.9988 176.713 56.5088 177.206 cv
56.0198 177.698 55.7748 178.313 55.7748 179.051 cv
f
72.4758 173.04 mo
70.9028 173.163 72.4758 173.04 70.9028 173.163 cv
70.7618 172.541 70.5628 172.09 70.3048 171.809 cv
69.8768 171.358 69.3498 171.132 68.7228 171.132 cv
68.2188 171.132 67.7768 171.273 67.3958 171.554 cv
66.8978 171.917 66.5048 172.448 66.2178 173.145 cv
65.9308 173.842 65.7818 174.835 65.7698 176.124 cv
66.1508 175.544 66.6168 175.114 67.1668 174.832 cv
67.7178 174.551 68.2948 174.411 68.8988 174.411 cv
69.9538 174.411 70.8518 174.799 71.5928 175.575 cv
72.3338 176.351 72.7048 177.355 72.7048 178.585 cv
72.7048 179.394 72.5298 180.145 72.1818 180.84 cv
71.8328 181.534 71.3538 182.066 70.7448 182.435 cv
70.1348 182.804 69.4438 182.989 68.6698 182.989 cv
67.3518 182.989 66.2768 182.504 65.4448 181.534 cv
64.6128 180.564 64.1968 178.966 64.1968 176.74 cv
64.1968 174.25 64.6568 172.439 65.5768 171.308 cv
66.3788 170.324 67.4598 169.831 68.8198 169.831 cv
69.8338 169.831 70.6638 170.116 71.3118 170.684 cv
71.9588 171.252 72.3468 172.038 72.4758 173.04 cv
cp
66.0158 178.594 mo
66.0158 179.139 66.1318 179.661 66.3628 180.159 cv
66.5948 180.657 66.9178 181.036 67.3338 181.297 cv
67.7498 181.558 68.1868 181.688 68.6438 181.688 cv
69.3118 181.688 69.8858 181.418 70.3668 180.879 cv
70.8468 180.34 71.0868 179.608 71.0868 178.682 cv
71.0868 177.792 70.8498 177.09 70.3758 176.577 cv
69.9008 176.064 69.3028 175.808 68.5828 175.808 cv
67.8678 175.808 67.2608 176.064 66.7628 176.577 cv
66.2648 177.09 66.0158 177.762 66.0158 178.594 cv
f
50.1258 141.269 mo
48.5438 141.269 50.1258 141.269 48.5438 141.269 cv
48.5438 131.188 48.5438 141.269 48.5438 131.188 cv
48.1628 131.551 47.6638 131.915 47.0458 132.278 cv
46.4268 132.641 45.8718 132.914 45.3798 133.095 cv
45.3798 131.566 45.3798 133.095 45.3798 131.566 cv
46.2648 131.15 47.0378 130.646 47.6998 130.054 cv
48.3618 129.462 48.8308 128.888 49.1068 128.331 cv
50.1258 128.331 49.1068 128.331 50.1258 128.331 cv
50.1258 141.269 50.1258 128.331 50.1258 141.269 cv
f
56.6018 134.282 mo
55.9448 134.042 55.4588 133.699 55.1428 133.253 cv
54.8258 132.808 54.6678 132.275 54.6678 131.654 cv
54.6678 130.716 55.0048 129.928 55.6788 129.29 cv
56.3528 128.651 57.2488 128.331 58.3678 128.331 cv
59.4928 128.331 60.3988 128.658 61.0838 129.311 cv
61.7698 129.965 62.1118 130.76 62.1118 131.698 cv
62.1118 132.295 61.9558 132.815 61.6418 133.258 cv
61.3288 133.7 60.8528 134.042 60.2138 134.282 cv
61.0048 134.539 61.6068 134.956 62.0198 135.53 cv
62.4328 136.104 62.6398 136.789 62.6398 137.586 cv
62.6398 138.688 62.2498 139.614 61.4708 140.364 cv
60.6918 141.114 59.6658 141.489 58.3948 141.489 cv
57.1228 141.489 56.0978 141.112 55.3178 140.359 cv
54.5388 139.606 54.1488 138.667 54.1488 137.542 cv
54.1488 136.705 54.3618 136.003 54.7868 135.437 cv
55.2108 134.872 55.8168 134.487 56.6018 134.282 cv
cp
56.2848 131.601 mo
56.2848 132.21 56.4808 132.708 56.8738 133.095 cv
57.2668 133.482 57.7758 133.675 58.4028 133.675 cv
59.0128 133.675 59.5118 133.483 59.9018 133.1 cv
60.2918 132.716 60.4858 132.246 60.4858 131.689 cv
60.4858 131.109 60.2858 130.621 59.8838 130.226 cv
59.4828 129.83 58.9838 129.632 58.3858 129.632 cv
57.7818 129.632 57.2808 129.826 56.8828 130.212 cv
56.4848 130.599 56.2848 131.062 56.2848 131.601 cv
cp
55.7748 137.551 mo
55.7748 138.002 55.8818 138.439 56.0958 138.861 cv
56.3098 139.283 56.6278 139.609 57.0498 139.841 cv
57.4718 140.072 57.9258 140.188 58.4118 140.188 cv
59.1678 140.188 59.7918 139.945 60.2838 139.458 cv
60.7758 138.972 61.0228 138.354 61.0228 137.604 cv
61.0228 136.842 60.7688 136.212 60.2618 135.714 cv
59.7548 135.216 59.1208 134.967 58.3588 134.967 cv
57.6148 134.967 56.9988 135.213 56.5088 135.706 cv
56.0198 136.198 55.7748 136.813 55.7748 137.551 cv
f
64.3728 130.072 mo
64.3728 128.551 64.3728 130.072 64.3728 128.551 cv
72.7128 128.551 64.3728 128.551 72.7128 128.551 cv
72.7128 129.782 72.7128 128.551 72.7128 129.782 cv
71.8928 130.655 71.0798 131.815 70.2738 133.262 cv
69.4688 134.709 68.8458 136.198 68.4068 137.727 cv
68.0898 138.805 67.8878 139.986 67.7998 141.269 cv
66.1738 141.269 67.7998 141.269 66.1738 141.269 cv
66.1918 140.255 66.3908 139.031 66.7718 137.595 cv
67.1528 136.16 67.6988 134.775 68.4108 133.442 cv
69.1228 132.109 69.8798 130.986 70.6828 130.072 cv
64.3728 130.072 70.6828 130.072 64.3728 130.072 cv
f
50.1258 99.9691 mo
48.5438 99.9691 50.1258 99.9691 48.5438 99.9691 cv
48.5438 89.8881 48.5438 99.9691 48.5438 89.8881 cv
48.1628 90.2511 47.6638 90.6151 47.0458 90.9781 cv
46.4268 91.3411 45.8718 91.6141 45.3798 91.7951 cv
45.3798 90.2661 45.3798 91.7951 45.3798 90.2661 cv
46.2648 89.8501 47.0378 89.3461 47.6998 88.7541 cv
48.3618 88.1621 48.8308 87.5881 49.1068 87.0311 cv
50.1258 87.0311 49.1068 87.0311 50.1258 87.0311 cv
50.1258 99.9691 50.1258 87.0311 50.1258 99.9691 cv
f
56.6018 92.9821 mo
55.9448 92.7421 55.4588 92.3991 55.1428 91.9531 cv
54.8258 91.5081 54.6678 90.9751 54.6678 90.3541 cv
54.6678 89.4161 55.0048 88.6281 55.6788 87.9901 cv
56.3528 87.3511 57.2488 87.0311 58.3678 87.0311 cv
59.4928 87.0311 60.3988 87.3581 61.0838 88.0111 cv
61.7698 88.6651 62.1118 89.4601 62.1118 90.3981 cv
62.1118 90.9951 61.9558 91.5151 61.6418 91.9581 cv
61.3288 92.4001 60.8528 92.7421 60.2138 92.9821 cv
61.0048 93.2391 61.6068 93.6561 62.0198 94.2301 cv
62.4328 94.8041 62.6398 95.4891 62.6398 96.2861 cv
62.6398 97.3881 62.2498 98.3141 61.4708 99.0641 cv
60.6918 99.8141 59.6658 100.189 58.3948 100.189 cv
57.1228 100.189 56.0978 99.8121 55.3178 99.0591 cv
54.5388 98.3061 54.1488 97.3671 54.1488 96.2421 cv
54.1488 95.4051 54.3618 94.7031 54.7868 94.1371 cv
55.2108 93.5721 55.8168 93.1871 56.6018 92.9821 cv
cp
56.2848 90.3011 mo
56.2848 90.9101 56.4808 91.4081 56.8738 91.7951 cv
57.2668 92.1821 57.7758 92.3751 58.4028 92.3751 cv
59.0128 92.3751 59.5118 92.1831 59.9018 91.8001 cv
60.2918 91.4161 60.4858 90.9461 60.4858 90.3891 cv
60.4858 89.8091 60.2858 89.3211 59.8838 88.9261 cv
59.4828 88.5301 58.9838 88.3321 58.3858 88.3321 cv
57.7818 88.3321 57.2808 88.5261 56.8828 88.9121 cv
56.4848 89.2991 56.2848 89.7621 56.2848 90.3011 cv
cp
55.7748 96.2511 mo
55.7748 96.7021 55.8818 97.1391 56.0958 97.5611 cv
56.3098 97.9831 56.6278 98.3091 57.0498 98.5411 cv
57.4718 98.7721 57.9258 98.8881 58.4118 98.8881 cv
59.1678 98.8881 59.7918 98.6451 60.2838 98.1581 cv
60.7758 97.6721 61.0228 97.0541 61.0228 96.3041 cv
61.0228 95.5421 60.7688 94.9121 60.2618 94.4141 cv
59.7548 93.9161 59.1208 93.6671 58.3588 93.6671 cv
57.6148 93.6671 56.9988 93.9131 56.5088 94.4061 cv
56.0198 94.8981 55.7748 95.5131 55.7748 96.2511 cv
f
66.7018 92.9821 mo
66.0448 92.7421 65.5588 92.3991 65.2428 91.9531 cv
64.9258 91.5081 64.7678 90.9751 64.7678 90.3541 cv
64.7678 89.4161 65.1048 88.6281 65.7788 87.9901 cv
66.4528 87.3511 67.3488 87.0311 68.4678 87.0311 cv
69.5928 87.0311 70.4988 87.3581 71.1838 88.0111 cv
71.8698 88.6651 72.2118 89.4601 72.2118 90.3981 cv
72.2118 90.9951 72.0558 91.5151 71.7418 91.9581 cv
71.4288 92.4001 70.9528 92.7421 70.3138 92.9821 cv
71.1048 93.2391 71.7068 93.6561 72.1198 94.2301 cv
72.5328 94.8041 72.7398 95.4891 72.7398 96.2861 cv
72.7398 97.3881 72.3498 98.3141 71.5708 99.0641 cv
70.7918 99.8141 69.7658 100.189 68.4948 100.189 cv
67.2228 100.189 66.1978 99.8121 65.4178 99.0591 cv
64.6388 98.3061 64.2488 97.3671 64.2488 96.2421 cv
64.2488 95.4051 64.4618 94.7031 64.8868 94.1371 cv
65.3108 93.5721 65.9168 93.1871 66.7018 92.9821 cv
cp
66.3848 90.3011 mo
66.3848 90.9101 66.5808 91.4081 66.9738 91.7951 cv
67.3668 92.1821 67.8758 92.3751 68.5028 92.3751 cv
69.1128 92.3751 69.6118 92.1831 70.0018 91.8001 cv
70.3918 91.4161 70.5858 90.9461 70.5858 90.3891 cv
70.5858 89.8091 70.3858 89.3211 69.9838 88.9261 cv
69.5828 88.5301 69.0838 88.3321 68.4858 88.3321 cv
67.8818 88.3321 67.3808 88.5261 66.9828 88.9121 cv
66.5848 89.2991 66.3848 89.7621 66.3848 90.3011 cv
cp
65.8748 96.2511 mo
65.8748 96.7021 65.9818 97.1391 66.1958 97.5611 cv
66.4098 97.9831 66.7278 98.3091 67.1498 98.5411 cv
67.5718 98.7721 68.0258 98.8881 68.5118 98.8881 cv
69.2678 98.8881 69.8918 98.6451 70.3838 98.1581 cv
70.8758 97.6721 71.1228 97.0541 71.1228 96.3041 cv
71.1228 95.5421 70.8688 94.9121 70.3618 94.4141 cv
69.8548 93.9161 69.2208 93.6671 68.4588 93.6671 cv
67.7148 93.6671 67.0988 93.9131 66.6088 94.4061 cv
66.1198 94.8981 65.8748 95.5131 65.8748 96.2511 cv
f
50.1258 58.4691 mo
48.5438 58.4691 50.1258 58.4691 48.5438 58.4691 cv
48.5438 48.3881 48.5438 58.4691 48.5438 48.3881 cv
48.1628 48.7511 47.6638 49.1151 47.0458 49.4781 cv
46.4268 49.8411 45.8718 50.1141 45.3798 50.2951 cv
45.3798 48.7661 45.3798 50.2951 45.3798 48.7661 cv
46.2648 48.3501 47.0378 47.8461 47.6998 47.2541 cv
48.3618 46.6621 48.8308 46.0881 49.1068 45.5311 cv
50.1258 45.5311 49.1068 45.5311 50.1258 45.5311 cv
50.1258 58.4691 50.1258 45.5311 50.1258 58.4691 cv
f
56.6018 51.4821 mo
55.9448 51.2421 55.4588 50.8991 55.1428 50.4531 cv
54.8258 50.0081 54.6678 49.4751 54.6678 48.8541 cv
54.6678 47.9161 55.0048 47.1281 55.6788 46.4901 cv
56.3528 45.8511 57.2488 45.5311 58.3678 45.5311 cv
59.4928 45.5311 60.3988 45.8581 61.0838 46.5111 cv
61.7698 47.1651 62.1118 47.9601 62.1118 48.8981 cv
62.1118 49.4951 61.9558 50.0151 61.6418 50.4581 cv
61.3288 50.9001 60.8528 51.2421 60.2138 51.4821 cv
61.0048 51.7391 61.6068 52.1561 62.0198 52.7301 cv
62.4328 53.3041 62.6398 53.9891 62.6398 54.7861 cv
62.6398 55.8881 62.2498 56.8141 61.4708 57.5641 cv
60.6918 58.3141 59.6658 58.6891 58.3948 58.6891 cv
57.1228 58.6891 56.0978 58.3121 55.3178 57.5591 cv
54.5388 56.8061 54.1488 55.8671 54.1488 54.7421 cv
54.1488 53.9051 54.3618 53.2031 54.7868 52.6371 cv
55.2108 52.0721 55.8168 51.6871 56.6018 51.4821 cv
cp
56.2848 48.8011 mo
56.2848 49.4101 56.4808 49.9081 56.8738 50.2951 cv
57.2668 50.6821 57.7758 50.8751 58.4028 50.8751 cv
59.0128 50.8751 59.5118 50.6831 59.9018 50.3001 cv
60.2918 49.9161 60.4858 49.4461 60.4858 48.8891 cv
60.4858 48.3091 60.2858 47.8211 59.8838 47.4261 cv
59.4828 47.0301 58.9838 46.8321 58.3858 46.8321 cv
57.7818 46.8321 57.2808 47.0261 56.8828 47.4121 cv
56.4848 47.7991 56.2848 48.2621 56.2848 48.8011 cv
cp
55.7748 54.7511 mo
55.7748 55.2021 55.8818 55.6391 56.0958 56.0611 cv
56.3098 56.4831 56.6278 56.8091 57.0498 57.0411 cv
57.4718 57.2721 57.9258 57.3881 58.4118 57.3881 cv
59.1678 57.3881 59.7918 57.1451 60.2838 56.6581 cv
60.7758 56.1721 61.0228 55.5541 61.0228 54.8041 cv
61.0228 54.0421 60.7688 53.4121 60.2618 52.9141 cv
59.7548 52.4161 59.1208 52.1671 58.3588 52.1671 cv
57.6148 52.1671 56.9988 52.4131 56.5088 52.9061 cv
56.0198 53.3981 55.7748 54.0131 55.7748 54.7511 cv
f
64.5038 55.4901 mo
66.0248 55.3491 64.5038 55.4901 66.0248 55.3491 cv
66.1538 56.0641 66.3998 56.5821 66.7628 56.9051 cv
67.1258 57.2271 67.5918 57.3881 68.1608 57.3881 cv
68.6468 57.3881 69.0728 57.2771 69.4388 57.0541 cv
69.8058 56.8311 70.1058 56.5341 70.3398 56.1621 cv
70.5748 55.7901 70.7708 55.2871 70.9288 54.6551 cv
71.0868 54.0221 71.1668 53.3771 71.1668 52.7211 cv
71.1668 52.6511 71.1638 52.5451 71.1578 52.4051 cv
70.8408 52.9081 70.4088 53.3171 69.8608 53.6311 cv
69.3138 53.9441 68.7198 54.1011 68.0818 54.1011 cv
67.0148 54.1011 66.1128 53.7141 65.3738 52.9411 cv
64.6358 52.1671 64.2668 51.1481 64.2668 49.8821 cv
64.2668 48.5751 64.6518 47.5241 65.4228 46.7271 cv
66.1928 45.9301 67.1588 45.5311 68.3188 45.5311 cv
69.1568 45.5311 69.9228 45.7571 70.6168 46.2081 cv
71.3118 46.6591 71.8388 47.3021 72.1988 48.1371 cv
72.5598 48.9721 72.7398 50.1811 72.7398 51.7631 cv
72.7398 53.4091 72.5608 54.7201 72.2038 55.6961 cv
71.8458 56.6721 71.3138 57.4141 70.6078 57.9241 cv
69.9018 58.4341 69.0748 58.6891 68.1248 58.6891 cv
67.1178 58.6891 66.2938 58.4091 65.6558 57.8491 cv
65.0168 57.2901 64.6328 56.5031 64.5038 55.4901 cv
cp
70.9818 49.8031 mo
70.9818 48.8951 70.7398 48.1741 70.2568 47.6411 cv
69.7728 47.1081 69.1918 46.8411 68.5118 46.8411 cv
67.8088 46.8411 67.1968 47.1281 66.6748 47.7021 cv
66.1538 48.2771 65.8928 49.0211 65.8928 49.9351 cv
65.8928 50.7551 66.1408 51.4221 66.6358 51.9341 cv
67.1308 52.4471 67.7418 52.7031 68.4678 52.7031 cv
69.2008 52.7031 69.8028 52.4471 70.2738 51.9341 cv
70.7458 51.4221 70.9818 50.7111 70.9818 49.8031 cv
f
50.1258 17.1691 mo
48.5438 17.1691 50.1258 17.1691 48.5438 17.1691 cv
48.5438 7.0881 48.5438 17.1691 48.5438 7.0881 cv
48.1628 7.45111 47.6638 7.81512 47.0458 8.1781 cv
46.4268 8.54111 45.8718 8.81412 45.3798 8.99512 cv
45.3798 7.46613 45.3798 8.99512 45.3798 7.46613 cv
46.2648 7.05011 47.0378 6.54611 47.6998 5.9541 cv
48.3618 5.36212 48.8308 4.78812 49.1068 4.23111 cv
50.1258 4.23111 49.1068 4.23111 50.1258 4.23111 cv
50.1258 17.1691 50.1258 4.23111 50.1258 17.1691 cv
f
54.4038 14.1901 mo
55.9248 14.0491 54.4038 14.1901 55.9248 14.0491 cv
56.0538 14.7641 56.2998 15.2821 56.6628 15.6051 cv
57.0258 15.9271 57.4918 16.0881 58.0608 16.0881 cv
58.5468 16.0881 58.9728 15.9771 59.3388 15.7541 cv
59.7058 15.5311 60.0058 15.2341 60.2398 14.8621 cv
60.4748 14.4901 60.6708 13.9871 60.8288 13.3551 cv
60.9868 12.7221 61.0668 12.0771 61.0668 11.4211 cv
61.0668 11.3511 61.0638 11.2451 61.0578 11.1051 cv
60.7408 11.6081 60.3088 12.0171 59.7608 12.3311 cv
59.2138 12.6441 58.6198 12.8011 57.9818 12.8011 cv
56.9148 12.8011 56.0128 12.4141 55.2738 11.6411 cv
54.5358 10.8671 54.1668 9.84811 54.1668 8.58212 cv
54.1668 7.27512 54.5518 6.22412 55.3228 5.42712 cv
56.0928 4.6301 57.0588 4.23111 58.2188 4.23111 cv
59.0568 4.23111 59.8228 4.45712 60.5168 4.90811 cv
61.2118 5.3591 61.7388 6.00211 62.0988 6.8371 cv
62.4598 7.67212 62.6398 8.8811 62.6398 10.4631 cv
62.6398 12.1091 62.4608 13.4201 62.1038 14.3961 cv
61.7458 15.3721 61.2138 16.1141 60.5078 16.6241 cv
59.8018 17.1341 58.9748 17.3891 58.0248 17.3891 cv
57.0178 17.3891 56.1938 17.1091 55.5558 16.5491 cv
54.9168 15.9901 54.5328 15.2031 54.4038 14.1901 cv
cp
60.8818 8.50311 mo
60.8818 7.59512 60.6398 6.87411 60.1568 6.34109 cv
59.6728 5.80811 59.0918 5.54111 58.4118 5.54111 cv
57.7088 5.54111 57.0968 5.82809 56.5748 6.4021 cv
56.0538 6.97711 55.7928 7.7211 55.7928 8.6351 cv
55.7928 9.45511 56.0408 10.1221 56.5358 10.6341 cv
57.0308 11.1471 57.6418 11.4031 58.3678 11.4031 cv
59.1008 11.4031 59.7028 11.1471 60.1738 10.6341 cv
60.6458 10.1221 60.8818 9.4111 60.8818 8.50311 cv
f
64.2668 10.8151 mo
64.2668 9.29111 64.4238 8.06509 64.7368 7.13611 cv
65.0508 6.2081 65.5168 5.49112 66.1348 4.98712 cv
66.7528 4.48312 67.5308 4.23111 68.4678 4.23111 cv
69.1598 4.23111 69.7658 4.37112 70.2878 4.64911 cv
70.8088 4.92712 71.2398 5.3291 71.5798 5.85312 cv
71.9198 6.37811 72.1858 7.01611 72.3788 7.7691 cv
72.5728 8.52209 72.6688 9.53711 72.6688 10.8151 cv
72.6688 12.3261 72.5138 13.5461 72.2038 14.4751 cv
71.8928 15.4041 71.4288 16.1221 70.8108 16.6281 cv
70.1918 17.1351 69.4118 17.3891 68.4678 17.3891 cv
67.2258 17.3891 66.2508 16.9431 65.5408 16.0531 cv
64.6918 14.9811 64.2668 13.2341 64.2668 10.8151 cv
cp
65.8928 10.8151 mo
65.8928 12.9301 66.1408 14.3371 66.6358 15.0381 cv
67.1308 15.7381 67.7418 16.0881 68.4678 16.0881 cv
69.1948 16.0881 69.8058 15.7361 70.3008 15.0331 cv
70.7958 14.3301 71.0428 12.9241 71.0428 10.8151 cv
71.0428 8.69312 70.7958 7.28412 70.3008 6.5871 cv
69.8058 5.89011 69.1888 5.54111 68.4508 5.54111 cv
67.7238 5.54111 67.1438 5.84912 66.7098 6.46411 cv
66.1658 7.24911 65.8928 8.6991 65.8928 10.8151 cv
f
1.68 lw
127.141 425.938 mo
127.141 421.858 li
@
166.981 426.443 mo
166.981 418.283 li
@
207.061 425.223 mo
207.061 421.143 li
@
246.901 425.729 mo
246.901 417.568 li
@
286.742 425.223 mo
286.742 421.143 li
@
326.582 425.729 mo
326.582 417.568 li
@
366.662 425.223 mo
366.662 421.143 li
@
406.502 425.729 mo
406.502 417.568 li
@
446.342 425.223 mo
446.342 421.143 li
@
486.183 425.729 mo
486.183 417.568 li
@
526.023 425.223 mo
526.023 421.143 li
@
566.103 425.729 mo
566.103 417.568 li
@
605.943 425.223 mo
605.943 421.143 li
@
87.3009 426.147 mo
645.783 426.147 li
@
88.2249 405.507 mo
92.3049 405.507 li
@
87.7199 384.867 mo
95.8799 384.867 li
@
88.2249 363.987 mo
92.3049 363.987 li
@
88.4349 343.347 mo
96.5949 343.347 li
@
88.2249 322.707 mo
92.3049 322.707 li
@
87.7199 302.068 mo
95.8799 302.068 li
@
88.2249 281.428 mo
92.3049 281.428 li
@
88.4349 260.548 mo
96.5949 260.548 li
@
87.5109 239.907 mo
91.5909 239.907 li
@
88.4349 219.267 mo
96.5949 219.267 li
@
88.2249 198.627 mo
92.3049 198.627 li
@
88.4349 177.987 mo
96.5949 177.987 li
@
88.2249 157.107 mo
92.3049 157.107 li
@
87.7199 136.467 mo
95.8799 136.467 li
@
88.2249 115.827 mo
92.3049 115.827 li
@
87.7199 95.187 mo
95.8799 95.187 li
@
88.2249 74.547 mo
92.3049 74.547 li
@
87.7199 53.666 mo
95.8799 53.666 li
@
88.2249 33.026 mo
92.3049 33.026 li
@
87.3009 426.146 mo
87.3009 12.386 li
@
645.637 426.857 mo
645.637 13.096 li
@
87.2969 12.927 mo
645.779 12.927 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+ArialMT def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (ArialMT) def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 114 /r put
def
/FontBBox {-665 -325 2000 1006} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368
260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A
577DC235F833AFCC30669C812FBF097879E1> |-
/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A
2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D47
14AF52ABD0227B6CDD854C568D5A6F3817645C5> |-
/comma <1C60D8A8C9B854D0F42C7AF5C4668C35A6B5F5176B9FC6F495643D40
00A6D27DE0DDA4D01F0D89D11ABC5445CF8C34A3A1CF> |-
/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06
742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81
A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF6
26A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA
1EAAF79B76AA2B52CCF0307B360E6D> |-
/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D96214
58876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD
52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612
941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13
CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A0
65D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D55
9B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C2
47BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC
9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD8
8F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF57
5C72F67F4BEBB98F8AFA57505EC9> |-
/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE11285789
4FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619AD
D420F549AB7C795751D32E8EE6> |-
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIXS+ArialMT /PBAAAA+ArialMT findfont ct_VMDictPut
/KGZIXS+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 53{/.notdef}rp 
/b /.notdef /d /e /.notdef /g 10{/.notdef}rp /r 
141{/.notdef}rp]
KGZIXS+ArialMT nf
KGZIXS+ArialMT*1 [19 0 0 -19 0 0 ]msf
106.995 407.502 mo
(\(b\))sh
%ADOBeginSubsetFont: HIBBAA+Arial-ItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Arial-ItalicMT def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (Arial-ItalicMT) def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 116 /t put
def
/FontBBox {-517 -325 1359 998} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/t <1C60D8A8C9B854D0F47C238C0374D9401BE88F4E827DBF6ACD1493D30155
5AE9FDB97705B5DEB246C70D14D40A9195312074E63C52F6E3D89F7577AB6EB9
D86C962D4AACF9757FAC6B7871A41A5812D02B983576BB62D7A8BC6D6B98DD85
59487E3FB838CA3E0A199191> |-
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIXT+Arial-ItalicMT /HIBBAA+Arial-ItalicMT findfont ct_VMDictPut
/KGZIXT+Arial-ItalicMT*1 
[116{/.notdef}rp /t 139{/.notdef}rp]
KGZIXT+Arial-ItalicMT nf
KGZIXT+Arial-ItalicMT*1 [19 0 0 -19 0 0 ]msf
353.888 480.821 mo
(t)sh
%ADOBeginSubsetFont: QJJAAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+CMMI10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMMI10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 181 /theta put
def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 453 466] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/theta <1C60D8A8C9B08A95ABF63B6290C8E174A2262A2DA3C5C5CC2C67FFE6
7E50BD11EF2C35A221F2D5E6E67F3923D592FAA534A825EF4EE0703EF3670C6B
0A19F1C0B0911976D90781D4C9295B74FC252B12D695486C8BC98CD766FB4FA5
9E4C3B5E7C72BE22C3D82781FE170B85681DE7E30984B5BEA60CAC3F9BEC6268
5E363F5CCA2B81> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIXU+CMMI10 /QJJAAA+CMMI10 findfont ct_VMDictPut
/KGZIXU+CMMI10*1 
[181{/.notdef}rp /theta 74{/.notdef}rp]
KGZIXU+CMMI10 nf
KGZIXU+CMMI10*1 [0 -22.91 -22.91 0 0 0 ]msf
21.4106 235.637 mo
(\265)sh
KGZIXS+ArialMT*1 [0 -19 -19 0 0 0 ]msf
21.1896 224.876 mo
(, degr)
[-5.28198 -5.28201 -10.564 -10.564 -10.564 0 ]ysh
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 44 /comma put
dup 97 /a put
dup 101 /e put
dup 114 /r put
dup 115 /s put
dup 121 /y put
def
/FontBBox {-665 -325 2000 1006} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/space <1C60D8A8C9B854D00D> |-
/comma <1C60D8A8C9B854D0F42C7AF5C4668C35A6B5F5176B9FC6F495643D40
00A6D27DE0DDA4D01F0D89D11ABC5445CF8C34A3A1CF> |-
/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7D
C8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA
6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA
48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD
710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CE
C10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53
463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2
879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177
B5D88A> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE11285789
4FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619AD
D420F549AB7C795751D32E8EE6> |-
/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F
80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2
BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD9
6538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1
B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB32
87CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B843
5558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F41
72D53C8FCAF4D28F2B78D3A4BF03> |-
/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA
18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836
B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA734
8AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIXV+ArialMT /ArialMT findfont ct_VMDictPut
/KGZIXV+ArialMT*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 52{/.notdef}rp /a 3{/.notdef}rp /e 
12{/.notdef}rp /r /s 5{/.notdef}rp /y 134{/.notdef}rp]
KGZIXV+ArialMT nf
KGZIXV+ArialMT*1 [19 0 0 -19 0 0 ]msf
361.97 480.682 mo
(, years)
[5.28198 5.28198 9.49997 10.564 10.564 6.32684 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/KGZIXT+Arial-ItalicMT*1 uf
/KGZIXT+Arial-ItalicMT uf
/HIBBAA+Arial-ItalicMT uf
/KGZIXS+ArialMT*1 uf
/KGZIXS+ArialMT uf
/PBAAAA+ArialMT uf
/KGZIXU+CMMI10*1 uf
/KGZIXU+CMMI10 uf
/QJJAAA+CMMI10 uf
/KGZIXV+ArialMT*1 uf
/KGZIXV+ArialMT uf
/ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
