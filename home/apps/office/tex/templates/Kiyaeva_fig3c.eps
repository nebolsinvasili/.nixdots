%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP5F55.tmp.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: we
%%CreationDate: 13.07.2020, 16:38:31
%%BoundingBox: 0 0 369 479
%%HiResBoundingBox: 0 0 368.6471 478.2102
%%CropBox: 0 0 368.6471 478.2102
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 964 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2020-07-13T16:30:43+04:00"
   xmp:CreatorTool="OriginLab Corporation"
   xmp:ModifyDate="2020-07-13T16:30:43+04:00"
   pdf:Producer="Acrobat Distiller 10.1.16 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:420ce1cd-dfc8-424d-80eb-fc3d7d4b4c40"
   xmpMM:InstanceID="uuid:1ac2a66c-22e9-4e6a-a998-758c50ef648e">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">d:GaiaADS 48ADS48-artABULLGraphKiyaeva_fig3c.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceRGB] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -478.21 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 478.21 li
368.647 478.21 li
368.647 0 li
cp
clp
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
115.968 417.798 mo
115.968 417.079 li
false sop
.50196 .50196 .50196 rgb
@
115.968 413.958 mo
115.968 413.239 li
@
115.968 410.118 mo
115.968 409.399 li
@
115.968 406.279 mo
115.968 405.559 li
@
115.968 402.439 mo
115.968 401.719 li
@
115.968 398.599 mo
115.968 397.879 li
@
115.968 394.759 mo
115.968 394.039 li
@
115.968 390.919 mo
115.968 390.199 li
@
115.968 387.079 mo
115.968 386.359 li
@
115.968 383.239 mo
115.968 382.519 li
@
115.968 379.399 mo
115.968 378.679 li
@
115.968 375.559 mo
115.968 374.839 li
@
115.968 371.719 mo
115.968 370.999 li
@
115.968 367.879 mo
115.968 367.159 li
@
115.968 364.039 mo
115.968 363.319 li
@
115.968 360.199 mo
115.968 359.479 li
@
115.968 356.359 mo
115.968 355.639 li
@
115.968 352.519 mo
115.968 351.799 li
@
115.968 348.679 mo
115.968 347.959 li
@
115.968 344.839 mo
115.968 344.119 li
@
115.968 340.999 mo
115.968 340.279 li
@
115.968 337.159 mo
115.968 336.439 li
@
115.968 333.319 mo
115.968 332.599 li
@
115.968 329.479 mo
115.968 328.759 li
@
115.968 325.639 mo
115.968 324.919 li
@
115.968 321.799 mo
115.968 321.079 li
@
115.968 317.959 mo
115.968 317.239 li
@
115.968 314.119 mo
115.968 313.399 li
@
115.968 310.279 mo
115.968 309.559 li
@
115.968 306.439 mo
115.968 305.719 li
@
115.968 302.599 mo
115.968 301.879 li
@
115.968 298.759 mo
115.968 298.039 li
@
115.968 294.919 mo
115.968 294.199 li
@
115.968 291.079 mo
115.968 290.359 li
@
115.968 287.239 mo
115.968 286.519 li
@
115.968 283.399 mo
115.968 282.679 li
@
115.968 279.559 mo
115.968 278.839 li
@
115.968 275.719 mo
115.968 274.999 li
@
115.968 271.879 mo
115.968 271.159 li
@
115.968 268.039 mo
115.968 267.319 li
@
115.968 264.199 mo
115.968 263.479 li
@
115.968 260.359 mo
115.968 259.639 li
@
115.968 256.519 mo
115.968 255.799 li
@
115.968 252.679 mo
115.968 251.959 li
@
115.968 248.839 mo
115.968 248.119 li
@
115.968 244.999 mo
115.968 244.279 li
@
115.968 241.159 mo
115.968 240.439 li
@
115.968 237.319 mo
115.968 236.599 li
@
115.968 233.479 mo
115.968 232.759 li
@
115.968 229.639 mo
115.968 228.919 li
@
115.968 225.799 mo
115.968 225.079 li
@
115.968 221.959 mo
115.968 221.239 li
@
115.968 218.119 mo
115.968 217.399 li
@
115.968 214.279 mo
115.968 213.559 li
@
115.968 210.439 mo
115.968 209.719 li
@
115.968 206.599 mo
115.968 205.879 li
@
115.968 202.759 mo
115.968 202.039 li
@
115.968 198.919 mo
115.968 198.199 li
@
115.968 195.079 mo
115.968 194.359 li
@
115.968 191.239 mo
115.968 190.519 li
@
115.968 187.399 mo
115.968 186.679 li
@
115.968 183.559 mo
115.968 182.839 li
@
115.968 179.719 mo
115.968 178.999 li
@
115.968 175.879 mo
115.968 175.159 li
@
115.968 172.039 mo
115.968 171.319 li
@
115.968 168.199 mo
115.968 167.479 li
@
115.968 164.359 mo
115.968 163.639 li
@
115.968 160.519 mo
115.968 159.799 li
@
115.968 156.679 mo
115.968 155.959 li
@
115.968 152.839 mo
115.968 152.119 li
@
115.968 148.999 mo
115.968 148.279 li
@
115.968 145.159 mo
115.968 144.439 li
@
115.968 141.319 mo
115.968 140.599 li
@
115.968 137.479 mo
115.968 136.759 li
@
115.968 133.639 mo
115.968 132.919 li
@
115.968 129.799 mo
115.968 129.079 li
@
115.968 125.959 mo
115.968 125.239 li
@
115.968 122.119 mo
115.968 121.399 li
@
115.968 118.279 mo
115.968 117.559 li
@
115.968 114.439 mo
115.968 113.719 li
@
115.968 110.599 mo
115.968 109.879 li
@
115.968 106.759 mo
115.968 106.039 li
@
115.968 102.919 mo
115.968 102.199 li
@
115.968 99.0788 mo
115.968 98.3588 li
@
115.968 95.2388 mo
115.968 94.5188 li
@
115.968 91.3988 mo
115.968 90.6788 li
@
115.968 87.5588 mo
115.968 86.8388 li
@
115.968 83.7188 mo
115.968 82.9988 li
@
115.968 79.8788 mo
115.968 79.1588 li
@
115.968 76.0388 mo
115.968 75.3188 li
@
115.968 72.1988 mo
115.968 71.4789 li
@
115.968 68.3588 mo
115.968 67.6389 li
@
115.968 64.5188 mo
115.968 63.7989 li
@
115.968 60.6788 mo
115.968 59.9589 li
@
115.968 56.8388 mo
115.968 56.1189 li
@
115.968 52.9988 mo
115.968 52.2789 li
@
115.968 49.1588 mo
115.968 48.4389 li
@
115.968 45.3188 mo
115.968 44.5989 li
@
115.968 41.4789 mo
115.968 40.7589 li
@
115.968 37.6389 mo
115.968 36.9189 li
@
115.968 33.7989 mo
115.968 33.0789 li
@
115.968 29.9589 mo
115.968 29.2389 li
@
115.968 26.1189 mo
115.968 25.3989 li
@
115.968 22.2789 mo
115.968 21.5589 li
@
115.968 18.4389 mo
115.968 17.7189 li
@
115.968 14.5989 mo
115.968 13.8789 li
@
115.968 10.7589 mo
115.968 10.0389 li
@
115.968 6.91888 mo
115.968 6.19891 li
@
164.688 417.799 mo
164.688 417.079 li
@
164.688 413.959 mo
164.688 413.239 li
@
164.688 410.119 mo
164.688 409.399 li
@
164.688 406.279 mo
164.688 405.559 li
@
164.688 402.439 mo
164.688 401.719 li
@
164.688 398.599 mo
164.688 397.879 li
@
164.688 394.759 mo
164.688 394.039 li
@
164.688 390.919 mo
164.688 390.199 li
@
164.688 387.079 mo
164.688 386.359 li
@
164.688 383.239 mo
164.688 382.519 li
@
164.688 379.399 mo
164.688 378.679 li
@
164.688 375.559 mo
164.688 374.839 li
@
164.688 371.719 mo
164.688 370.999 li
@
164.688 367.879 mo
164.688 367.159 li
@
164.688 364.039 mo
164.688 363.319 li
@
164.688 360.199 mo
164.688 359.479 li
@
164.688 356.359 mo
164.688 355.639 li
@
164.688 352.519 mo
164.688 351.799 li
@
164.688 348.679 mo
164.688 347.959 li
@
164.688 344.839 mo
164.688 344.119 li
@
164.688 340.999 mo
164.688 340.279 li
@
164.688 337.159 mo
164.688 336.439 li
@
164.688 333.319 mo
164.688 332.599 li
@
164.688 329.479 mo
164.688 328.759 li
@
164.688 325.639 mo
164.688 324.919 li
@
164.688 321.799 mo
164.688 321.079 li
@
164.688 317.959 mo
164.688 317.239 li
@
164.688 314.119 mo
164.688 313.399 li
@
164.688 310.279 mo
164.688 309.559 li
@
164.688 306.439 mo
164.688 305.719 li
@
164.688 302.599 mo
164.688 301.879 li
@
164.688 298.759 mo
164.688 298.039 li
@
164.688 294.919 mo
164.688 294.199 li
@
164.688 291.079 mo
164.688 290.359 li
@
164.688 287.239 mo
164.688 286.519 li
@
164.688 283.399 mo
164.688 282.679 li
@
164.688 279.559 mo
164.688 278.839 li
@
164.688 275.719 mo
164.688 274.999 li
@
164.688 271.879 mo
164.688 271.159 li
@
164.688 268.039 mo
164.688 267.319 li
@
164.688 264.199 mo
164.688 263.479 li
@
164.688 260.359 mo
164.688 259.639 li
@
164.688 256.519 mo
164.688 255.799 li
@
164.688 252.679 mo
164.688 251.959 li
@
164.688 248.839 mo
164.688 248.119 li
@
164.688 244.999 mo
164.688 244.279 li
@
164.688 241.159 mo
164.688 240.439 li
@
164.688 237.319 mo
164.688 236.599 li
@
164.688 233.479 mo
164.688 232.759 li
@
164.688 229.639 mo
164.688 228.919 li
@
164.688 225.799 mo
164.688 225.079 li
@
164.688 221.959 mo
164.688 221.239 li
@
164.688 218.119 mo
164.688 217.399 li
@
164.688 214.279 mo
164.688 213.559 li
@
164.688 210.439 mo
164.688 209.719 li
@
164.688 206.599 mo
164.688 205.879 li
@
164.688 202.759 mo
164.688 202.039 li
@
164.688 198.919 mo
164.688 198.199 li
@
164.688 195.079 mo
164.688 194.359 li
@
164.688 191.239 mo
164.688 190.519 li
@
164.688 187.399 mo
164.688 186.679 li
@
164.688 183.559 mo
164.688 182.839 li
@
164.688 179.719 mo
164.688 178.999 li
@
164.688 175.879 mo
164.688 175.159 li
@
164.688 172.039 mo
164.688 171.319 li
@
164.688 168.199 mo
164.688 167.479 li
@
164.688 164.359 mo
164.688 163.639 li
@
164.688 160.519 mo
164.688 159.799 li
@
164.688 156.679 mo
164.688 155.959 li
@
164.688 152.839 mo
164.688 152.119 li
@
164.688 148.999 mo
164.688 148.279 li
@
164.688 145.159 mo
164.688 144.439 li
@
164.688 141.319 mo
164.688 140.599 li
@
164.688 137.479 mo
164.688 136.759 li
@
164.688 133.639 mo
164.688 132.919 li
@
164.688 129.799 mo
164.688 129.079 li
@
164.688 125.959 mo
164.688 125.239 li
@
164.688 122.119 mo
164.688 121.399 li
@
164.688 118.279 mo
164.688 117.559 li
@
164.688 114.439 mo
164.688 113.719 li
@
164.688 110.599 mo
164.688 109.879 li
@
164.688 106.759 mo
164.688 106.039 li
@
164.688 102.919 mo
164.688 102.199 li
@
164.688 99.0792 mo
164.688 98.3592 li
@
164.688 95.2392 mo
164.688 94.5192 li
@
164.688 91.3992 mo
164.688 90.6792 li
@
164.688 87.5592 mo
164.688 86.8392 li
@
164.688 83.7192 mo
164.688 82.9992 li
@
164.688 79.8792 mo
164.688 79.1592 li
@
164.688 76.0392 mo
164.688 75.3192 li
@
164.688 72.1992 mo
164.688 71.4792 li
@
164.688 68.3592 mo
164.688 67.6393 li
@
164.688 64.5192 mo
164.688 63.7993 li
@
164.688 60.6792 mo
164.688 59.9593 li
@
164.688 56.8392 mo
164.688 56.1193 li
@
164.688 52.9992 mo
164.688 52.2793 li
@
164.688 49.1592 mo
164.688 48.4393 li
@
164.688 45.3192 mo
164.688 44.5993 li
@
164.688 41.4792 mo
164.688 40.7593 li
@
164.688 37.6393 mo
164.688 36.9193 li
@
164.688 33.7993 mo
164.688 33.0793 li
@
164.688 29.9593 mo
164.688 29.2393 li
@
164.688 26.1193 mo
164.688 25.3993 li
@
164.688 22.2793 mo
164.688 21.5593 li
@
164.688 18.4393 mo
164.688 17.7193 li
@
164.688 14.5993 mo
164.688 13.8793 li
@
164.688 10.7593 mo
164.688 10.0393 li
@
164.688 6.91928 mo
164.688 6.19931 li
@
213.648 417.799 mo
213.648 417.079 li
@
213.648 413.959 mo
213.648 413.239 li
@
213.648 410.119 mo
213.648 409.399 li
@
213.648 406.279 mo
213.648 405.559 li
@
213.648 402.439 mo
213.648 401.719 li
@
213.648 398.599 mo
213.648 397.879 li
@
213.648 394.759 mo
213.648 394.039 li
@
213.648 390.919 mo
213.648 390.199 li
@
213.648 387.079 mo
213.648 386.359 li
@
213.648 383.239 mo
213.648 382.519 li
@
213.648 379.399 mo
213.648 378.679 li
@
213.648 375.559 mo
213.648 374.839 li
@
213.648 371.719 mo
213.648 370.999 li
@
213.648 367.879 mo
213.648 367.159 li
@
213.648 364.039 mo
213.648 363.319 li
@
213.648 360.199 mo
213.648 359.479 li
@
213.648 356.359 mo
213.648 355.639 li
@
213.648 352.519 mo
213.648 351.799 li
@
213.648 348.679 mo
213.648 347.959 li
@
213.648 344.839 mo
213.648 344.119 li
@
213.648 340.999 mo
213.648 340.279 li
@
213.648 337.159 mo
213.648 336.439 li
@
213.648 333.319 mo
213.648 332.599 li
@
213.648 329.479 mo
213.648 328.759 li
@
213.648 325.639 mo
213.648 324.919 li
@
213.648 321.799 mo
213.648 321.079 li
@
213.648 317.959 mo
213.648 317.239 li
@
213.648 314.119 mo
213.648 313.399 li
@
213.648 310.279 mo
213.648 309.559 li
@
213.648 306.439 mo
213.648 305.719 li
@
213.648 302.599 mo
213.648 301.879 li
@
213.648 298.759 mo
213.648 298.039 li
@
213.648 294.919 mo
213.648 294.199 li
@
213.648 291.079 mo
213.648 290.359 li
@
213.648 287.239 mo
213.648 286.519 li
@
213.648 283.399 mo
213.648 282.679 li
@
213.648 279.559 mo
213.648 278.839 li
@
213.648 275.719 mo
213.648 274.999 li
@
213.648 271.879 mo
213.648 271.159 li
@
213.648 268.039 mo
213.648 267.319 li
@
213.648 264.199 mo
213.648 263.479 li
@
213.648 260.359 mo
213.648 259.639 li
@
213.648 256.519 mo
213.648 255.799 li
@
213.648 252.679 mo
213.648 251.959 li
@
213.648 248.839 mo
213.648 248.119 li
@
213.648 244.999 mo
213.648 244.279 li
@
213.648 241.159 mo
213.648 240.439 li
@
213.648 237.319 mo
213.648 236.599 li
@
213.648 233.479 mo
213.648 232.759 li
@
213.648 229.639 mo
213.648 228.919 li
@
213.648 225.799 mo
213.648 225.079 li
@
213.648 221.959 mo
213.648 221.24 li
@
213.648 218.119 mo
213.648 217.4 li
@
213.648 214.279 mo
213.648 213.56 li
@
213.648 210.439 mo
213.648 209.72 li
@
213.648 206.599 mo
213.648 205.88 li
@
213.648 202.759 mo
213.648 202.04 li
@
213.648 198.919 mo
213.648 198.2 li
@
213.648 195.079 mo
213.648 194.36 li
@
213.648 191.24 mo
213.648 190.52 li
@
213.648 187.4 mo
213.648 186.68 li
@
213.648 183.56 mo
213.648 182.84 li
@
213.648 179.72 mo
213.648 179 li
@
213.648 175.88 mo
213.648 175.16 li
@
213.648 172.04 mo
213.648 171.32 li
@
213.648 168.2 mo
213.648 167.48 li
@
213.648 164.36 mo
213.648 163.64 li
@
213.648 160.52 mo
213.648 159.8 li
@
213.648 156.68 mo
213.648 155.96 li
@
213.648 152.84 mo
213.648 152.12 li
@
213.648 149 mo
213.648 148.28 li
@
213.648 145.16 mo
213.648 144.44 li
@
213.648 141.32 mo
213.648 140.6 li
@
213.648 137.48 mo
213.648 136.76 li
@
213.648 133.64 mo
213.648 132.92 li
@
213.648 129.8 mo
213.648 129.08 li
@
213.648 125.96 mo
213.648 125.24 li
@
213.648 122.12 mo
213.648 121.4 li
@
213.648 118.28 mo
213.648 117.56 li
@
213.648 114.44 mo
213.648 113.72 li
@
213.648 110.6 mo
213.648 109.88 li
@
213.648 106.76 mo
213.648 106.04 li
@
213.648 102.92 mo
213.648 102.2 li
@
213.648 99.0796 mo
213.648 98.3596 li
@
213.648 95.2396 mo
213.648 94.5196 li
@
213.648 91.3996 mo
213.648 90.6796 li
@
213.648 87.5596 mo
213.648 86.8396 li
@
213.648 83.7196 mo
213.648 82.9996 li
@
213.648 79.8796 mo
213.648 79.1596 li
@
213.648 76.0396 mo
213.648 75.3196 li
@
213.648 72.1996 mo
213.648 71.4796 li
@
213.648 68.3596 mo
213.648 67.6396 li
@
213.648 64.5196 mo
213.648 63.7997 li
@
213.648 60.6796 mo
213.648 59.9597 li
@
213.648 56.8396 mo
213.648 56.1197 li
@
213.648 52.9996 mo
213.648 52.2797 li
@
213.648 49.1596 mo
213.648 48.4397 li
@
213.648 45.3196 mo
213.648 44.5997 li
@
213.648 41.4796 mo
213.648 40.7597 li
@
213.648 37.6396 mo
213.648 36.9197 li
@
213.648 33.7997 mo
213.648 33.0797 li
@
213.648 29.9597 mo
213.648 29.2397 li
@
213.648 26.1197 mo
213.648 25.3997 li
@
213.648 22.2797 mo
213.648 21.5597 li
@
213.648 18.4397 mo
213.648 17.7197 li
@
213.648 14.5997 mo
213.648 13.8797 li
@
213.648 10.7597 mo
213.648 10.0397 li
@
213.648 6.91968 mo
213.648 6.19971 li
@
262.368 417.8 mo
262.368 417.08 li
@
262.368 413.96 mo
262.368 413.24 li
@
262.368 410.12 mo
262.368 409.4 li
@
262.368 406.28 mo
262.368 405.56 li
@
262.368 402.44 mo
262.368 401.72 li
@
262.368 398.6 mo
262.368 397.88 li
@
262.368 394.76 mo
262.368 394.04 li
@
262.368 390.92 mo
262.368 390.2 li
@
262.368 387.08 mo
262.368 386.36 li
@
262.368 383.24 mo
262.368 382.52 li
@
262.368 379.4 mo
262.368 378.68 li
@
262.368 375.56 mo
262.368 374.84 li
@
262.368 371.72 mo
262.368 371 li
@
262.368 367.88 mo
262.368 367.16 li
@
262.368 364.04 mo
262.368 363.32 li
@
262.368 360.2 mo
262.368 359.48 li
@
262.368 356.36 mo
262.368 355.64 li
@
262.368 352.52 mo
262.368 351.8 li
@
262.368 348.68 mo
262.368 347.96 li
@
262.368 344.84 mo
262.368 344.12 li
@
262.368 341 mo
262.368 340.28 li
@
262.368 337.16 mo
262.368 336.44 li
@
262.368 333.32 mo
262.368 332.6 li
@
262.368 329.48 mo
262.368 328.76 li
@
262.368 325.64 mo
262.368 324.92 li
@
262.368 321.8 mo
262.368 321.08 li
@
262.368 317.96 mo
262.368 317.24 li
@
262.368 314.12 mo
262.368 313.4 li
@
262.368 310.28 mo
262.368 309.56 li
@
262.368 306.44 mo
262.368 305.72 li
@
262.368 302.6 mo
262.368 301.88 li
@
262.368 298.76 mo
262.368 298.04 li
@
262.368 294.92 mo
262.368 294.2 li
@
262.368 291.08 mo
262.368 290.36 li
@
262.368 287.24 mo
262.368 286.52 li
@
262.368 283.4 mo
262.368 282.68 li
@
262.368 279.56 mo
262.368 278.84 li
@
262.368 275.72 mo
262.368 275 li
@
262.368 271.88 mo
262.368 271.16 li
@
262.368 268.04 mo
262.368 267.32 li
@
262.368 264.2 mo
262.368 263.48 li
@
262.368 260.36 mo
262.368 259.64 li
@
262.368 256.52 mo
262.368 255.8 li
@
262.368 252.68 mo
262.368 251.96 li
@
262.368 248.84 mo
262.368 248.12 li
@
262.368 245 mo
262.368 244.28 li
@
262.368 241.16 mo
262.368 240.44 li
@
262.368 237.32 mo
262.368 236.6 li
@
262.368 233.48 mo
262.368 232.76 li
@
262.368 229.64 mo
262.368 228.92 li
@
262.368 225.8 mo
262.368 225.08 li
@
262.368 221.96 mo
262.368 221.24 li
@
262.368 218.12 mo
262.368 217.4 li
@
262.368 214.28 mo
262.368 213.56 li
@
262.368 210.44 mo
262.368 209.72 li
@
262.368 206.6 mo
262.368 205.88 li
@
262.368 202.76 mo
262.368 202.04 li
@
262.368 198.92 mo
262.368 198.2 li
@
262.368 195.08 mo
262.368 194.36 li
@
262.368 191.24 mo
262.368 190.52 li
@
262.368 187.4 mo
262.368 186.68 li
@
262.368 183.56 mo
262.368 182.84 li
@
262.368 179.72 mo
262.368 179 li
@
262.368 175.88 mo
262.368 175.16 li
@
262.368 172.04 mo
262.368 171.32 li
@
262.368 168.2 mo
262.368 167.48 li
@
262.368 164.36 mo
262.368 163.64 li
@
262.368 160.52 mo
262.368 159.8 li
@
262.368 156.68 mo
262.368 155.96 li
@
262.368 152.84 mo
262.368 152.12 li
@
262.368 149 mo
262.368 148.28 li
@
262.368 145.16 mo
262.368 144.44 li
@
262.368 141.32 mo
262.368 140.6 li
@
262.368 137.48 mo
262.368 136.76 li
@
262.368 133.64 mo
262.368 132.92 li
@
262.368 129.8 mo
262.368 129.08 li
@
262.369 125.96 mo
262.369 125.24 li
@
262.369 122.12 mo
262.369 121.4 li
@
262.369 118.28 mo
262.369 117.56 li
@
262.369 114.44 mo
262.369 113.72 li
@
262.369 110.6 mo
262.369 109.88 li
@
262.369 106.76 mo
262.369 106.04 li
@
262.369 102.92 mo
262.369 102.2 li
@
262.369 99.08 mo
262.369 98.36 li
@
262.369 95.24 mo
262.369 94.52 li
@
262.369 91.4 mo
262.369 90.68 li
@
262.369 87.56 mo
262.369 86.84 li
@
262.369 83.72 mo
262.369 83 li
@
262.369 79.88 mo
262.369 79.16 li
@
262.369 76.04 mo
262.369 75.32 li
@
262.369 72.2 mo
262.369 71.48 li
@
262.369 68.36 mo
262.369 67.64 li
@
262.369 64.52 mo
262.369 63.8 li
@
262.369 60.68 mo
262.369 59.9601 li
@
262.369 56.84 mo
262.369 56.1201 li
@
262.369 53 mo
262.369 52.2801 li
@
262.369 49.16 mo
262.369 48.4401 li
@
262.369 45.32 mo
262.369 44.6001 li
@
262.369 41.48 mo
262.369 40.7601 li
@
262.369 37.64 mo
262.369 36.9201 li
@
262.369 33.8 mo
262.369 33.0801 li
@
262.369 29.9601 mo
262.369 29.2401 li
@
262.369 26.1201 mo
262.369 25.4001 li
@
262.369 22.2801 mo
262.369 21.5601 li
@
262.369 18.4401 mo
262.369 17.7201 li
@
262.369 14.6001 mo
262.369 13.8801 li
@
262.369 10.7601 mo
262.369 10.0401 li
@
262.369 6.92007 mo
262.369 6.2001 li
@
311.089 417.8 mo
311.089 417.08 li
@
311.089 413.96 mo
311.089 413.24 li
@
311.089 410.12 mo
311.089 409.4 li
@
311.089 406.28 mo
311.089 405.56 li
@
311.089 402.44 mo
311.089 401.72 li
@
311.089 398.6 mo
311.089 397.88 li
@
311.089 394.76 mo
311.089 394.04 li
@
311.089 390.92 mo
311.089 390.2 li
@
311.089 387.08 mo
311.089 386.36 li
@
311.089 383.24 mo
311.089 382.52 li
@
311.089 379.4 mo
311.089 378.68 li
@
311.089 375.56 mo
311.089 374.84 li
@
311.089 371.72 mo
311.089 371 li
@
311.089 367.88 mo
311.089 367.16 li
@
311.089 364.04 mo
311.089 363.32 li
@
311.089 360.2 mo
311.089 359.48 li
@
311.089 356.36 mo
311.089 355.64 li
@
311.089 352.52 mo
311.089 351.8 li
@
311.089 348.68 mo
311.089 347.96 li
@
311.089 344.84 mo
311.089 344.12 li
@
311.089 341 mo
311.089 340.28 li
@
311.089 337.16 mo
311.089 336.44 li
@
311.089 333.32 mo
311.089 332.6 li
@
311.089 329.48 mo
311.089 328.76 li
@
311.089 325.64 mo
311.089 324.92 li
@
311.089 321.8 mo
311.089 321.08 li
@
311.089 317.96 mo
311.089 317.24 li
@
311.089 314.12 mo
311.089 313.4 li
@
311.089 310.28 mo
311.089 309.56 li
@
311.089 306.44 mo
311.089 305.72 li
@
311.089 302.6 mo
311.089 301.88 li
@
311.089 298.76 mo
311.089 298.04 li
@
311.089 294.92 mo
311.089 294.2 li
@
311.089 291.08 mo
311.089 290.36 li
@
311.089 287.24 mo
311.089 286.52 li
@
311.089 283.4 mo
311.089 282.68 li
@
311.089 279.56 mo
311.089 278.84 li
@
311.089 275.72 mo
311.089 275 li
@
311.089 271.88 mo
311.089 271.16 li
@
311.089 268.04 mo
311.089 267.32 li
@
311.089 264.2 mo
311.089 263.48 li
@
311.089 260.36 mo
311.089 259.64 li
@
311.089 256.52 mo
311.089 255.8 li
@
311.089 252.68 mo
311.089 251.96 li
@
311.089 248.84 mo
311.089 248.12 li
@
311.089 245 mo
311.089 244.28 li
@
311.089 241.16 mo
311.089 240.44 li
@
311.089 237.32 mo
311.089 236.6 li
@
311.089 233.48 mo
311.089 232.76 li
@
311.089 229.64 mo
311.089 228.92 li
@
311.089 225.8 mo
311.089 225.08 li
@
311.089 221.96 mo
311.089 221.24 li
@
311.089 218.12 mo
311.089 217.4 li
@
311.089 214.28 mo
311.089 213.56 li
@
311.089 210.44 mo
311.089 209.72 li
@
311.089 206.6 mo
311.089 205.88 li
@
311.089 202.76 mo
311.089 202.04 li
@
311.089 198.92 mo
311.089 198.2 li
@
311.089 195.08 mo
311.089 194.36 li
@
311.089 191.24 mo
311.089 190.52 li
@
311.089 187.4 mo
311.089 186.68 li
@
311.089 183.56 mo
311.089 182.84 li
@
311.089 179.72 mo
311.089 179 li
@
311.089 175.88 mo
311.089 175.16 li
@
311.089 172.04 mo
311.089 171.32 li
@
311.089 168.2 mo
311.089 167.48 li
@
311.089 164.36 mo
311.089 163.64 li
@
311.089 160.52 mo
311.089 159.8 li
@
311.089 156.68 mo
311.089 155.96 li
@
311.089 152.84 mo
311.089 152.12 li
@
311.089 149 mo
311.089 148.28 li
@
311.089 145.16 mo
311.089 144.44 li
@
311.089 141.32 mo
311.089 140.6 li
@
311.089 137.48 mo
311.089 136.76 li
@
311.089 133.64 mo
311.089 132.92 li
@
311.089 129.8 mo
311.089 129.08 li
@
311.089 125.96 mo
311.089 125.24 li
@
311.089 122.12 mo
311.089 121.4 li
@
311.089 118.28 mo
311.089 117.56 li
@
311.089 114.44 mo
311.089 113.72 li
@
311.089 110.6 mo
311.089 109.88 li
@
311.089 106.76 mo
311.089 106.04 li
@
311.089 102.92 mo
311.089 102.2 li
@
311.089 99.0804 mo
311.089 98.3604 li
@
311.089 95.2404 mo
311.089 94.5204 li
@
311.089 91.4004 mo
311.089 90.6804 li
@
311.089 87.5604 mo
311.089 86.8404 li
@
311.089 83.7204 mo
311.089 83.0004 li
@
311.089 79.8804 mo
311.089 79.1604 li
@
311.089 76.0404 mo
311.089 75.3204 li
@
311.089 72.2004 mo
311.089 71.4804 li
@
311.089 68.3604 mo
311.089 67.6404 li
@
311.089 64.5204 mo
311.089 63.8004 li
@
311.089 60.6804 mo
311.089 59.9604 li
@
311.089 56.8404 mo
311.089 56.1205 li
@
311.089 53.0004 mo
311.089 52.2805 li
@
311.089 49.1604 mo
311.089 48.4405 li
@
311.089 45.3204 mo
311.089 44.6005 li
@
311.089 41.4804 mo
311.089 40.7605 li
@
311.089 37.6404 mo
311.089 36.9205 li
@
311.089 33.8004 mo
311.089 33.0805 li
@
311.089 29.9604 mo
311.089 29.2405 li
@
311.089 26.1205 mo
311.089 25.4005 li
@
311.089 22.2805 mo
311.089 21.5605 li
@
311.089 18.4405 mo
311.089 17.7205 li
@
311.089 14.6005 mo
311.089 13.8805 li
@
311.089 10.7605 mo
311.089 10.0405 li
@
311.089 6.92047 mo
311.089 6.2005 li
@
67.2472 378.44 mo
67.9672 378.44 li
@
71.0872 378.44 mo
71.8072 378.44 li
@
74.9272 378.44 mo
75.6472 378.44 li
@
78.7672 378.44 mo
79.4872 378.44 li
@
82.6072 378.44 mo
83.3272 378.44 li
@
86.4472 378.44 mo
87.1672 378.44 li
@
90.2872 378.44 mo
91.0072 378.44 li
@
94.1272 378.44 mo
94.8472 378.44 li
@
97.9672 378.44 mo
98.6872 378.44 li
@
101.807 378.44 mo
102.527 378.44 li
@
105.647 378.44 mo
106.367 378.44 li
@
109.487 378.44 mo
110.207 378.44 li
@
113.327 378.44 mo
114.047 378.44 li
@
117.167 378.44 mo
117.887 378.44 li
@
121.007 378.44 mo
121.727 378.44 li
@
124.847 378.44 mo
125.567 378.44 li
@
128.687 378.44 mo
129.407 378.44 li
@
132.527 378.44 mo
133.247 378.44 li
@
136.367 378.44 mo
137.087 378.44 li
@
140.207 378.44 mo
140.927 378.44 li
@
144.047 378.44 mo
144.767 378.44 li
@
147.887 378.44 mo
148.607 378.44 li
@
151.727 378.44 mo
152.447 378.44 li
@
155.567 378.44 mo
156.287 378.44 li
@
159.407 378.44 mo
160.127 378.44 li
@
163.247 378.44 mo
163.967 378.44 li
@
167.087 378.44 mo
167.807 378.44 li
@
170.927 378.44 mo
171.647 378.44 li
@
174.767 378.44 mo
175.487 378.44 li
@
178.607 378.44 mo
179.327 378.44 li
@
182.447 378.44 mo
183.167 378.44 li
@
186.287 378.44 mo
187.007 378.44 li
@
190.127 378.44 mo
190.847 378.44 li
@
193.967 378.44 mo
194.687 378.44 li
@
197.807 378.44 mo
198.527 378.44 li
@
201.647 378.44 mo
202.367 378.44 li
@
205.487 378.44 mo
206.207 378.44 li
@
209.327 378.44 mo
210.047 378.44 li
@
213.167 378.44 mo
213.887 378.44 li
@
217.007 378.44 mo
217.727 378.44 li
@
220.847 378.44 mo
221.567 378.44 li
@
224.687 378.44 mo
225.407 378.44 li
@
228.527 378.44 mo
229.247 378.44 li
@
232.367 378.44 mo
233.087 378.44 li
@
236.207 378.44 mo
236.927 378.44 li
@
240.047 378.44 mo
240.767 378.44 li
@
243.887 378.44 mo
244.607 378.44 li
@
247.727 378.44 mo
248.447 378.44 li
@
251.567 378.44 mo
252.287 378.44 li
@
255.407 378.44 mo
256.127 378.44 li
@
259.247 378.44 mo
259.967 378.44 li
@
263.087 378.44 mo
263.807 378.44 li
@
266.927 378.44 mo
267.647 378.44 li
@
270.767 378.44 mo
271.487 378.44 li
@
274.607 378.44 mo
275.327 378.44 li
@
278.447 378.44 mo
279.167 378.44 li
@
282.287 378.44 mo
283.007 378.44 li
@
286.127 378.44 mo
286.847 378.44 li
@
289.967 378.44 mo
290.687 378.44 li
@
293.807 378.44 mo
294.527 378.44 li
@
297.65 378.44 mo
298.37 378.44 li
@
301.49 378.44 mo
302.21 378.44 li
@
305.33 378.44 mo
306.05 378.44 li
@
309.17 378.44 mo
309.89 378.44 li
@
313.01 378.44 mo
313.73 378.44 li
@
316.85 378.44 mo
317.57 378.44 li
@
320.69 378.44 mo
321.41 378.44 li
@
324.53 378.44 mo
325.25 378.44 li
@
328.37 378.44 mo
329.09 378.44 li
@
332.21 378.44 mo
332.93 378.44 li
@
336.05 378.44 mo
336.77 378.44 li
@
339.89 378.44 mo
340.61 378.44 li
@
343.73 378.44 mo
344.45 378.44 li
@
347.57 378.44 mo
348.29 378.44 li
@
351.41 378.44 mo
352.13 378.44 li
@
355.25 378.44 mo
355.97 378.44 li
@
359.09 378.44 mo
359.57 378.44 li
@
67.247 339.08 mo
67.967 339.08 li
@
71.087 339.08 mo
71.807 339.08 li
@
74.927 339.08 mo
75.647 339.08 li
@
78.767 339.08 mo
79.487 339.08 li
@
82.607 339.08 mo
83.327 339.08 li
@
86.447 339.08 mo
87.1669 339.08 li
@
90.287 339.08 mo
91.0069 339.08 li
@
94.127 339.08 mo
94.8469 339.08 li
@
97.9669 339.08 mo
98.6869 339.08 li
@
101.807 339.08 mo
102.527 339.08 li
@
105.647 339.08 mo
106.367 339.08 li
@
109.487 339.08 mo
110.207 339.08 li
@
113.327 339.08 mo
114.047 339.08 li
@
117.167 339.08 mo
117.887 339.08 li
@
121.007 339.08 mo
121.727 339.08 li
@
124.847 339.08 mo
125.567 339.08 li
@
128.687 339.08 mo
129.407 339.08 li
@
132.527 339.08 mo
133.247 339.08 li
@
136.367 339.08 mo
137.087 339.08 li
@
140.207 339.08 mo
140.927 339.08 li
@
144.047 339.08 mo
144.767 339.08 li
@
147.887 339.08 mo
148.607 339.08 li
@
151.727 339.08 mo
152.447 339.08 li
@
155.567 339.08 mo
156.287 339.08 li
@
159.407 339.08 mo
160.127 339.08 li
@
163.247 339.08 mo
163.967 339.08 li
@
167.087 339.08 mo
167.807 339.08 li
@
170.927 339.08 mo
171.647 339.08 li
@
174.767 339.08 mo
175.487 339.08 li
@
178.607 339.08 mo
179.327 339.08 li
@
182.447 339.08 mo
183.167 339.08 li
@
186.287 339.08 mo
187.007 339.08 li
@
190.127 339.08 mo
190.847 339.08 li
@
193.967 339.08 mo
194.687 339.08 li
@
197.807 339.08 mo
198.527 339.08 li
@
201.647 339.08 mo
202.367 339.08 li
@
205.487 339.08 mo
206.207 339.08 li
@
209.327 339.08 mo
210.047 339.08 li
@
213.167 339.08 mo
213.887 339.08 li
@
217.007 339.08 mo
217.727 339.08 li
@
220.847 339.08 mo
221.567 339.08 li
@
224.687 339.08 mo
225.407 339.08 li
@
228.527 339.08 mo
229.247 339.08 li
@
232.367 339.08 mo
233.087 339.08 li
@
236.207 339.08 mo
236.927 339.08 li
@
240.047 339.08 mo
240.767 339.08 li
@
243.887 339.08 mo
244.607 339.08 li
@
247.727 339.08 mo
248.447 339.08 li
@
251.567 339.08 mo
252.287 339.08 li
@
255.407 339.08 mo
256.127 339.08 li
@
259.247 339.08 mo
259.967 339.08 li
@
263.087 339.08 mo
263.807 339.08 li
@
266.927 339.08 mo
267.647 339.08 li
@
270.767 339.08 mo
271.487 339.08 li
@
274.607 339.08 mo
275.327 339.08 li
@
278.447 339.08 mo
279.167 339.08 li
@
282.287 339.08 mo
283.007 339.08 li
@
286.127 339.08 mo
286.847 339.08 li
@
289.967 339.08 mo
290.687 339.08 li
@
293.807 339.08 mo
294.527 339.08 li
@
297.647 339.08 mo
298.367 339.08 li
@
301.487 339.08 mo
302.207 339.08 li
@
305.327 339.08 mo
306.047 339.08 li
@
309.167 339.08 mo
309.887 339.08 li
@
313.007 339.08 mo
313.727 339.08 li
@
316.847 339.08 mo
317.567 339.08 li
@
320.687 339.08 mo
321.407 339.08 li
@
324.527 339.08 mo
325.247 339.08 li
@
328.367 339.08 mo
329.087 339.08 li
@
332.207 339.08 mo
332.927 339.08 li
@
336.047 339.08 mo
336.767 339.08 li
@
339.887 339.08 mo
340.607 339.08 li
@
343.727 339.08 mo
344.447 339.08 li
@
347.567 339.08 mo
348.287 339.08 li
@
351.407 339.08 mo
352.127 339.08 li
@
355.247 339.08 mo
355.967 339.08 li
@
359.087 339.08 mo
359.567 339.08 li
@
67.2437 299.48 mo
67.9637 299.48 li
@
71.0837 299.48 mo
71.8037 299.48 li
@
74.9237 299.48 mo
75.6437 299.48 li
@
78.7637 299.48 mo
79.4837 299.48 li
@
82.6037 299.48 mo
83.3237 299.48 li
@
86.4437 299.48 mo
87.1637 299.48 li
@
90.2837 299.48 mo
91.0037 299.48 li
@
94.1237 299.48 mo
94.8437 299.48 li
@
97.9637 299.48 mo
98.6837 299.48 li
@
101.804 299.48 mo
102.524 299.48 li
@
105.644 299.48 mo
106.364 299.48 li
@
109.484 299.48 mo
110.204 299.48 li
@
113.324 299.48 mo
114.044 299.48 li
@
117.164 299.48 mo
117.884 299.48 li
@
121.004 299.48 mo
121.724 299.48 li
@
124.844 299.48 mo
125.564 299.48 li
@
128.684 299.48 mo
129.404 299.48 li
@
132.524 299.48 mo
133.244 299.48 li
@
136.364 299.48 mo
137.084 299.48 li
@
140.204 299.48 mo
140.924 299.48 li
@
144.044 299.48 mo
144.764 299.48 li
@
147.884 299.48 mo
148.604 299.48 li
@
151.724 299.48 mo
152.444 299.48 li
@
155.564 299.48 mo
156.284 299.48 li
@
159.404 299.48 mo
160.124 299.48 li
@
163.244 299.48 mo
163.964 299.48 li
@
167.084 299.48 mo
167.804 299.48 li
@
170.924 299.48 mo
171.644 299.48 li
@
174.764 299.48 mo
175.484 299.48 li
@
178.604 299.48 mo
179.324 299.48 li
@
182.444 299.48 mo
183.164 299.48 li
@
186.284 299.48 mo
187.004 299.48 li
@
190.124 299.48 mo
190.844 299.48 li
@
193.964 299.48 mo
194.684 299.48 li
@
197.804 299.48 mo
198.524 299.48 li
@
201.644 299.48 mo
202.364 299.48 li
@
205.484 299.48 mo
206.204 299.48 li
@
209.324 299.48 mo
210.044 299.48 li
@
213.164 299.48 mo
213.884 299.48 li
@
217.004 299.48 mo
217.724 299.48 li
@
220.844 299.48 mo
221.564 299.48 li
@
224.684 299.48 mo
225.404 299.48 li
@
228.524 299.48 mo
229.244 299.48 li
@
232.364 299.48 mo
233.084 299.48 li
@
236.204 299.48 mo
236.924 299.48 li
@
240.044 299.48 mo
240.764 299.48 li
@
243.884 299.48 mo
244.604 299.48 li
@
247.724 299.48 mo
248.444 299.48 li
@
251.564 299.48 mo
252.284 299.48 li
@
255.404 299.48 mo
256.124 299.48 li
@
259.244 299.48 mo
259.964 299.48 li
@
263.084 299.48 mo
263.803 299.48 li
@
266.924 299.48 mo
267.643 299.48 li
@
270.764 299.48 mo
271.483 299.48 li
@
274.604 299.48 mo
275.323 299.48 li
@
278.444 299.48 mo
279.163 299.48 li
@
282.284 299.48 mo
283.003 299.48 li
@
286.124 299.48 mo
286.843 299.48 li
@
289.964 299.48 mo
290.683 299.48 li
@
293.803 299.48 mo
294.523 299.48 li
@
297.643 299.48 mo
298.363 299.48 li
@
301.483 299.48 mo
302.203 299.48 li
@
305.323 299.48 mo
306.043 299.48 li
@
309.163 299.48 mo
309.883 299.48 li
@
313.003 299.48 mo
313.723 299.48 li
@
316.843 299.48 mo
317.563 299.48 li
@
320.683 299.48 mo
321.403 299.48 li
@
324.523 299.48 mo
325.243 299.48 li
@
328.363 299.48 mo
329.083 299.48 li
@
332.203 299.48 mo
332.923 299.48 li
@
336.043 299.48 mo
336.763 299.48 li
@
339.883 299.48 mo
340.603 299.48 li
@
343.723 299.48 mo
344.443 299.48 li
@
347.563 299.48 mo
348.283 299.48 li
@
351.403 299.48 mo
352.123 299.48 li
@
355.243 299.48 mo
355.963 299.48 li
@
359.083 299.48 mo
359.563 299.48 li
@
67.2404 260.12 mo
67.9604 260.12 li
@
71.0804 260.12 mo
71.8004 260.12 li
@
74.9204 260.12 mo
75.6404 260.12 li
@
78.7604 260.12 mo
79.4804 260.12 li
@
82.6004 260.12 mo
83.3204 260.12 li
@
86.4404 260.12 mo
87.1604 260.12 li
@
90.2804 260.12 mo
91.0004 260.12 li
@
94.1204 260.12 mo
94.8404 260.12 li
@
97.9604 260.12 mo
98.6804 260.12 li
@
101.8 260.12 mo
102.52 260.12 li
@
105.64 260.12 mo
106.36 260.12 li
@
109.48 260.12 mo
110.2 260.12 li
@
113.32 260.12 mo
114.04 260.12 li
@
117.16 260.12 mo
117.88 260.12 li
@
121 260.12 mo
121.72 260.12 li
@
124.84 260.12 mo
125.56 260.12 li
@
128.68 260.12 mo
129.4 260.12 li
@
132.52 260.12 mo
133.24 260.12 li
@
136.36 260.12 mo
137.08 260.12 li
@
140.2 260.12 mo
140.92 260.12 li
@
144.04 260.12 mo
144.76 260.12 li
@
147.88 260.12 mo
148.6 260.12 li
@
151.72 260.12 mo
152.44 260.12 li
@
155.56 260.12 mo
156.28 260.12 li
@
159.4 260.12 mo
160.12 260.12 li
@
163.24 260.12 mo
163.96 260.12 li
@
167.08 260.12 mo
167.8 260.12 li
@
170.92 260.12 mo
171.64 260.12 li
@
174.76 260.12 mo
175.48 260.12 li
@
178.607 260.12 mo
179.327 260.12 li
@
182.447 260.12 mo
183.167 260.12 li
@
186.287 260.12 mo
187.007 260.12 li
@
190.127 260.12 mo
190.847 260.12 li
@
193.967 260.12 mo
194.687 260.12 li
@
197.807 260.12 mo
198.527 260.12 li
@
201.647 260.12 mo
202.367 260.12 li
@
205.487 260.12 mo
206.207 260.12 li
@
209.327 260.12 mo
210.047 260.12 li
@
213.167 260.12 mo
213.887 260.12 li
@
217.007 260.12 mo
217.727 260.12 li
@
220.847 260.12 mo
221.567 260.12 li
@
224.687 260.12 mo
225.407 260.12 li
@
228.527 260.12 mo
229.247 260.12 li
@
232.367 260.12 mo
233.087 260.12 li
@
236.207 260.12 mo
236.927 260.12 li
@
240.047 260.12 mo
240.767 260.12 li
@
243.887 260.12 mo
244.607 260.12 li
@
247.727 260.12 mo
248.447 260.12 li
@
251.567 260.12 mo
252.287 260.12 li
@
255.407 260.12 mo
256.127 260.12 li
@
259.247 260.12 mo
259.967 260.12 li
@
263.087 260.12 mo
263.807 260.12 li
@
266.927 260.12 mo
267.647 260.12 li
@
270.767 260.12 mo
271.487 260.12 li
@
274.607 260.12 mo
275.327 260.12 li
@
278.447 260.12 mo
279.167 260.12 li
@
282.287 260.12 mo
283.007 260.12 li
@
286.127 260.12 mo
286.847 260.12 li
@
289.967 260.12 mo
290.687 260.12 li
@
293.807 260.12 mo
294.527 260.12 li
@
297.647 260.12 mo
298.367 260.12 li
@
301.487 260.12 mo
302.207 260.12 li
@
305.327 260.12 mo
306.047 260.12 li
@
309.167 260.12 mo
309.887 260.12 li
@
313.007 260.12 mo
313.727 260.12 li
@
316.847 260.12 mo
317.567 260.12 li
@
320.687 260.12 mo
321.407 260.12 li
@
324.527 260.12 mo
325.247 260.12 li
@
328.367 260.12 mo
329.087 260.12 li
@
332.207 260.12 mo
332.927 260.12 li
@
336.047 260.12 mo
336.767 260.12 li
@
339.887 260.12 mo
340.607 260.12 li
@
343.727 260.12 mo
344.447 260.12 li
@
347.567 260.12 mo
348.287 260.12 li
@
351.407 260.12 mo
352.127 260.12 li
@
355.247 260.12 mo
355.967 260.12 li
@
359.087 260.12 mo
359.567 260.12 li
@
67.2442 220.76 mo
67.9642 220.76 li
@
71.0842 220.76 mo
71.8042 220.76 li
@
74.9242 220.76 mo
75.6441 220.76 li
@
78.7642 220.76 mo
79.4841 220.76 li
@
82.6042 220.76 mo
83.3241 220.76 li
@
86.4442 220.76 mo
87.1641 220.76 li
@
90.2841 220.76 mo
91.0041 220.76 li
@
94.1241 220.76 mo
94.8441 220.76 li
@
97.9641 220.76 mo
98.6841 220.76 li
@
101.804 220.76 mo
102.524 220.76 li
@
105.644 220.76 mo
106.364 220.76 li
@
109.484 220.76 mo
110.204 220.76 li
@
113.324 220.76 mo
114.044 220.76 li
@
117.164 220.76 mo
117.884 220.76 li
@
121.004 220.76 mo
121.724 220.76 li
@
124.844 220.76 mo
125.564 220.76 li
@
128.684 220.76 mo
129.404 220.76 li
@
132.524 220.76 mo
133.244 220.76 li
@
136.364 220.76 mo
137.084 220.76 li
@
140.204 220.76 mo
140.924 220.76 li
@
144.044 220.76 mo
144.764 220.76 li
@
147.884 220.76 mo
148.604 220.76 li
@
151.724 220.76 mo
152.444 220.76 li
@
155.564 220.76 mo
156.284 220.76 li
@
159.404 220.76 mo
160.124 220.76 li
@
163.244 220.76 mo
163.964 220.76 li
@
167.084 220.76 mo
167.804 220.76 li
@
170.924 220.76 mo
171.644 220.76 li
@
174.764 220.76 mo
175.484 220.76 li
@
178.604 220.76 mo
179.324 220.76 li
@
182.444 220.76 mo
183.164 220.76 li
@
186.284 220.76 mo
187.004 220.76 li
@
190.124 220.76 mo
190.844 220.76 li
@
193.964 220.76 mo
194.684 220.76 li
@
197.804 220.76 mo
198.524 220.76 li
@
201.644 220.76 mo
202.364 220.76 li
@
205.484 220.76 mo
206.204 220.76 li
@
209.324 220.76 mo
210.044 220.76 li
@
213.164 220.76 mo
213.884 220.76 li
@
217.004 220.76 mo
217.724 220.76 li
@
220.844 220.76 mo
221.564 220.76 li
@
224.684 220.76 mo
225.404 220.76 li
@
228.524 220.76 mo
229.244 220.76 li
@
232.364 220.76 mo
233.084 220.76 li
@
236.204 220.76 mo
236.924 220.76 li
@
240.044 220.76 mo
240.764 220.76 li
@
243.884 220.76 mo
244.604 220.76 li
@
247.724 220.76 mo
248.444 220.76 li
@
251.564 220.76 mo
252.284 220.76 li
@
255.404 220.76 mo
256.124 220.76 li
@
259.244 220.76 mo
259.964 220.76 li
@
263.084 220.76 mo
263.804 220.76 li
@
266.924 220.76 mo
267.644 220.76 li
@
270.764 220.76 mo
271.484 220.76 li
@
274.604 220.76 mo
275.324 220.76 li
@
278.444 220.76 mo
279.164 220.76 li
@
282.284 220.76 mo
283.004 220.76 li
@
286.124 220.76 mo
286.844 220.76 li
@
289.964 220.76 mo
290.684 220.76 li
@
293.804 220.76 mo
294.524 220.76 li
@
297.644 220.76 mo
298.364 220.76 li
@
301.484 220.76 mo
302.204 220.76 li
@
305.324 220.76 mo
306.044 220.76 li
@
309.164 220.76 mo
309.884 220.76 li
@
313.004 220.76 mo
313.724 220.76 li
@
316.844 220.76 mo
317.564 220.76 li
@
320.684 220.76 mo
321.404 220.76 li
@
324.524 220.76 mo
325.244 220.76 li
@
328.364 220.76 mo
329.084 220.76 li
@
332.204 220.76 mo
332.924 220.76 li
@
336.044 220.76 mo
336.764 220.76 li
@
339.884 220.76 mo
340.604 220.76 li
@
343.724 220.76 mo
344.444 220.76 li
@
347.564 220.76 mo
348.284 220.76 li
@
351.404 220.76 mo
352.124 220.76 li
@
355.244 220.76 mo
355.964 220.76 li
@
359.084 220.76 mo
359.564 220.76 li
@
67.2409 181.4 mo
67.9609 181.4 li
@
71.0809 181.4 mo
71.8009 181.4 li
@
74.9209 181.4 mo
75.6409 181.4 li
@
78.7609 181.4 mo
79.4809 181.4 li
@
82.6009 181.4 mo
83.3209 181.4 li
@
86.4409 181.4 mo
87.1609 181.4 li
@
90.2809 181.4 mo
91.0009 181.4 li
@
94.1209 181.4 mo
94.8409 181.4 li
@
97.9609 181.4 mo
98.6809 181.4 li
@
101.801 181.4 mo
102.521 181.4 li
@
105.641 181.4 mo
106.361 181.4 li
@
109.481 181.4 mo
110.201 181.4 li
@
113.321 181.4 mo
114.041 181.4 li
@
117.161 181.4 mo
117.881 181.4 li
@
121.001 181.4 mo
121.721 181.4 li
@
124.841 181.4 mo
125.561 181.4 li
@
128.681 181.4 mo
129.401 181.4 li
@
132.521 181.4 mo
133.241 181.4 li
@
136.361 181.4 mo
137.081 181.4 li
@
140.201 181.4 mo
140.921 181.4 li
@
144.041 181.4 mo
144.761 181.4 li
@
147.881 181.4 mo
148.601 181.4 li
@
151.721 181.4 mo
152.441 181.4 li
@
155.561 181.4 mo
156.281 181.4 li
@
159.401 181.4 mo
160.121 181.4 li
@
163.241 181.4 mo
163.961 181.4 li
@
167.081 181.4 mo
167.801 181.4 li
@
170.921 181.4 mo
171.641 181.4 li
@
174.761 181.4 mo
175.481 181.4 li
@
178.601 181.4 mo
179.321 181.4 li
@
182.441 181.4 mo
183.161 181.4 li
@
186.281 181.4 mo
187.001 181.4 li
@
190.121 181.4 mo
190.841 181.4 li
@
193.961 181.4 mo
194.681 181.4 li
@
197.801 181.4 mo
198.521 181.4 li
@
201.641 181.4 mo
202.361 181.4 li
@
205.481 181.4 mo
206.201 181.4 li
@
209.321 181.4 mo
210.041 181.4 li
@
213.161 181.4 mo
213.881 181.4 li
@
217.001 181.4 mo
217.721 181.4 li
@
220.841 181.4 mo
221.561 181.4 li
@
224.681 181.4 mo
225.401 181.4 li
@
228.521 181.4 mo
229.241 181.4 li
@
232.361 181.4 mo
233.081 181.4 li
@
236.201 181.4 mo
236.921 181.4 li
@
240.041 181.4 mo
240.761 181.4 li
@
243.881 181.4 mo
244.601 181.4 li
@
247.721 181.4 mo
248.441 181.4 li
@
251.561 181.4 mo
252.281 181.4 li
@
255.401 181.4 mo
256.121 181.4 li
@
259.241 181.4 mo
259.961 181.4 li
@
263.081 181.4 mo
263.801 181.4 li
@
266.921 181.4 mo
267.641 181.4 li
@
270.761 181.4 mo
271.481 181.4 li
@
274.601 181.4 mo
275.321 181.4 li
@
278.441 181.4 mo
279.161 181.4 li
@
282.281 181.4 mo
283.001 181.4 li
@
286.121 181.4 mo
286.841 181.4 li
@
289.961 181.4 mo
290.681 181.4 li
@
293.801 181.4 mo
294.521 181.4 li
@
297.641 181.4 mo
298.361 181.4 li
@
301.481 181.4 mo
302.201 181.4 li
@
305.321 181.4 mo
306.041 181.4 li
@
309.161 181.4 mo
309.881 181.4 li
@
313.001 181.4 mo
313.721 181.4 li
@
316.841 181.4 mo
317.561 181.4 li
@
320.681 181.4 mo
321.401 181.4 li
@
324.521 181.4 mo
325.241 181.4 li
@
328.361 181.4 mo
329.081 181.4 li
@
332.201 181.4 mo
332.921 181.4 li
@
336.041 181.4 mo
336.761 181.4 li
@
339.881 181.4 mo
340.601 181.4 li
@
343.721 181.4 mo
344.441 181.4 li
@
347.561 181.4 mo
348.281 181.4 li
@
351.401 181.4 mo
352.121 181.4 li
@
355.249 181.4 mo
355.969 181.4 li
@
359.089 181.4 mo
359.569 181.4 li
@
67.2456 142.04 mo
67.9656 142.04 li
@
71.0856 142.04 mo
71.8056 142.04 li
@
74.9256 142.04 mo
75.6456 142.04 li
@
78.7656 142.04 mo
79.4856 142.04 li
@
82.6056 142.04 mo
83.3256 142.04 li
@
86.4456 142.04 mo
87.1656 142.04 li
@
90.2856 142.04 mo
91.0056 142.04 li
@
94.1256 142.04 mo
94.8456 142.04 li
@
97.9656 142.04 mo
98.6856 142.04 li
@
101.806 142.04 mo
102.526 142.04 li
@
105.646 142.04 mo
106.366 142.04 li
@
109.486 142.04 mo
110.206 142.04 li
@
113.326 142.04 mo
114.046 142.04 li
@
117.166 142.04 mo
117.886 142.04 li
@
121.006 142.04 mo
121.726 142.04 li
@
124.846 142.04 mo
125.566 142.04 li
@
128.686 142.04 mo
129.406 142.04 li
@
132.526 142.04 mo
133.246 142.04 li
@
136.366 142.04 mo
137.086 142.04 li
@
140.206 142.04 mo
140.926 142.04 li
@
144.046 142.04 mo
144.766 142.04 li
@
147.886 142.04 mo
148.606 142.04 li
@
151.726 142.04 mo
152.446 142.04 li
@
155.566 142.04 mo
156.286 142.04 li
@
159.406 142.04 mo
160.126 142.04 li
@
163.246 142.04 mo
163.966 142.04 li
@
167.086 142.04 mo
167.806 142.04 li
@
170.926 142.04 mo
171.646 142.04 li
@
174.766 142.04 mo
175.486 142.04 li
@
178.606 142.04 mo
179.326 142.04 li
@
182.446 142.04 mo
183.165 142.04 li
@
186.286 142.04 mo
187.005 142.04 li
@
190.126 142.04 mo
190.845 142.04 li
@
193.966 142.04 mo
194.685 142.04 li
@
197.806 142.04 mo
198.525 142.04 li
@
201.646 142.04 mo
202.365 142.04 li
@
205.486 142.04 mo
206.205 142.04 li
@
209.326 142.04 mo
210.045 142.04 li
@
213.165 142.04 mo
213.885 142.04 li
@
217.005 142.04 mo
217.725 142.04 li
@
220.845 142.04 mo
221.565 142.04 li
@
224.685 142.04 mo
225.405 142.04 li
@
228.525 142.04 mo
229.245 142.04 li
@
232.365 142.04 mo
233.085 142.04 li
@
236.205 142.04 mo
236.925 142.04 li
@
240.045 142.04 mo
240.765 142.04 li
@
243.885 142.04 mo
244.605 142.04 li
@
247.725 142.04 mo
248.445 142.04 li
@
251.565 142.04 mo
252.285 142.04 li
@
255.405 142.04 mo
256.125 142.04 li
@
259.245 142.04 mo
259.965 142.04 li
@
263.085 142.04 mo
263.805 142.04 li
@
266.925 142.04 mo
267.645 142.04 li
@
270.765 142.04 mo
271.485 142.04 li
@
274.605 142.04 mo
275.325 142.04 li
@
278.445 142.04 mo
279.165 142.04 li
@
282.285 142.04 mo
283.005 142.04 li
@
286.125 142.04 mo
286.845 142.04 li
@
289.965 142.04 mo
290.685 142.04 li
@
293.805 142.04 mo
294.525 142.04 li
@
297.645 142.04 mo
298.365 142.04 li
@
301.485 142.04 mo
302.205 142.04 li
@
305.325 142.04 mo
306.045 142.04 li
@
309.165 142.04 mo
309.885 142.04 li
@
313.005 142.04 mo
313.725 142.04 li
@
316.845 142.04 mo
317.565 142.04 li
@
320.685 142.04 mo
321.405 142.04 li
@
324.525 142.04 mo
325.245 142.04 li
@
328.365 142.04 mo
329.085 142.04 li
@
332.205 142.04 mo
332.925 142.04 li
@
336.045 142.04 mo
336.765 142.04 li
@
339.885 142.04 mo
340.605 142.04 li
@
343.725 142.04 mo
344.445 142.04 li
@
347.565 142.04 mo
348.285 142.04 li
@
351.405 142.04 mo
352.125 142.04 li
@
355.245 142.04 mo
355.965 142.04 li
@
359.085 142.04 mo
359.565 142.04 li
@
67.2424 102.44 mo
67.9624 102.44 li
@
71.0824 102.44 mo
71.8024 102.44 li
@
74.9224 102.44 mo
75.6423 102.44 li
@
78.7624 102.44 mo
79.4823 102.44 li
@
82.6024 102.44 mo
83.3223 102.44 li
@
86.4424 102.44 mo
87.1623 102.44 li
@
90.2823 102.44 mo
91.0023 102.44 li
@
94.1223 102.44 mo
94.8423 102.44 li
@
97.9623 102.44 mo
98.6823 102.44 li
@
101.802 102.44 mo
102.522 102.44 li
@
105.642 102.44 mo
106.362 102.44 li
@
109.482 102.44 mo
110.202 102.44 li
@
113.322 102.44 mo
114.042 102.44 li
@
117.162 102.44 mo
117.882 102.44 li
@
121.002 102.44 mo
121.722 102.44 li
@
124.842 102.44 mo
125.562 102.44 li
@
128.682 102.44 mo
129.402 102.44 li
@
132.522 102.44 mo
133.242 102.44 li
@
136.362 102.44 mo
137.082 102.44 li
@
140.202 102.44 mo
140.922 102.44 li
@
144.042 102.44 mo
144.762 102.44 li
@
147.882 102.44 mo
148.602 102.44 li
@
151.722 102.44 mo
152.442 102.44 li
@
155.562 102.44 mo
156.282 102.44 li
@
159.402 102.44 mo
160.122 102.44 li
@
163.242 102.44 mo
163.962 102.44 li
@
167.082 102.44 mo
167.802 102.44 li
@
170.922 102.44 mo
171.642 102.44 li
@
174.762 102.44 mo
175.482 102.44 li
@
178.602 102.44 mo
179.322 102.44 li
@
182.442 102.44 mo
183.162 102.44 li
@
186.282 102.44 mo
187.002 102.44 li
@
190.122 102.44 mo
190.842 102.44 li
@
193.962 102.44 mo
194.682 102.44 li
@
197.802 102.44 mo
198.522 102.44 li
@
201.642 102.44 mo
202.362 102.44 li
@
205.482 102.44 mo
206.202 102.44 li
@
209.322 102.44 mo
210.042 102.44 li
@
213.162 102.44 mo
213.882 102.44 li
@
217.002 102.44 mo
217.722 102.44 li
@
220.842 102.44 mo
221.562 102.44 li
@
224.682 102.44 mo
225.402 102.44 li
@
228.522 102.44 mo
229.242 102.44 li
@
232.362 102.44 mo
233.082 102.44 li
@
236.202 102.44 mo
236.922 102.44 li
@
240.042 102.44 mo
240.762 102.44 li
@
243.882 102.44 mo
244.602 102.44 li
@
247.722 102.44 mo
248.442 102.44 li
@
251.562 102.44 mo
252.282 102.44 li
@
255.402 102.44 mo
256.122 102.44 li
@
259.242 102.44 mo
259.962 102.44 li
@
263.082 102.44 mo
263.802 102.44 li
@
266.922 102.44 mo
267.642 102.44 li
@
270.762 102.44 mo
271.482 102.44 li
@
274.602 102.44 mo
275.322 102.44 li
@
278.442 102.44 mo
279.162 102.44 li
@
282.282 102.44 mo
283.002 102.44 li
@
286.122 102.44 mo
286.842 102.44 li
@
289.962 102.44 mo
290.682 102.44 li
@
293.802 102.44 mo
294.522 102.44 li
@
297.642 102.44 mo
298.362 102.44 li
@
301.482 102.44 mo
302.202 102.44 li
@
305.322 102.44 mo
306.042 102.44 li
@
309.162 102.44 mo
309.882 102.44 li
@
313.002 102.44 mo
313.722 102.44 li
@
316.842 102.44 mo
317.562 102.44 li
@
320.682 102.44 mo
321.402 102.44 li
@
324.522 102.44 mo
325.242 102.44 li
@
328.362 102.44 mo
329.082 102.44 li
@
332.202 102.44 mo
332.922 102.44 li
@
336.042 102.44 mo
336.762 102.44 li
@
339.882 102.44 mo
340.602 102.44 li
@
343.722 102.44 mo
344.442 102.44 li
@
347.562 102.44 mo
348.282 102.44 li
@
351.402 102.44 mo
352.122 102.44 li
@
355.242 102.44 mo
355.962 102.44 li
@
359.082 102.44 mo
359.562 102.44 li
@
67.2391 63.0804 mo
67.9591 63.0804 li
@
71.0791 63.0804 mo
71.7991 63.0804 li
@
74.9191 63.0804 mo
75.6391 63.0804 li
@
78.7591 63.0804 mo
79.4791 63.0804 li
@
82.5991 63.0804 mo
83.3191 63.0804 li
@
86.4391 63.0804 mo
87.1591 63.0804 li
@
90.2791 63.0804 mo
90.9991 63.0804 li
@
94.1191 63.0804 mo
94.8391 63.0804 li
@
97.9591 63.0804 mo
98.6791 63.0804 li
@
101.799 63.0804 mo
102.519 63.0804 li
@
105.639 63.0804 mo
106.359 63.0804 li
@
109.479 63.0804 mo
110.199 63.0804 li
@
113.319 63.0804 mo
114.039 63.0804 li
@
117.159 63.0804 mo
117.879 63.0804 li
@
120.999 63.0804 mo
121.719 63.0804 li
@
124.839 63.0804 mo
125.559 63.0804 li
@
128.679 63.0804 mo
129.399 63.0804 li
@
132.519 63.0804 mo
133.239 63.0804 li
@
136.359 63.0804 mo
137.079 63.0804 li
@
140.199 63.0804 mo
140.919 63.0804 li
@
144.039 63.0804 mo
144.759 63.0804 li
@
147.879 63.0804 mo
148.599 63.0804 li
@
151.719 63.0804 mo
152.439 63.0804 li
@
155.559 63.0804 mo
156.279 63.0804 li
@
159.399 63.0804 mo
160.119 63.0804 li
@
163.239 63.0804 mo
163.959 63.0804 li
@
167.079 63.0804 mo
167.799 63.0804 li
@
170.919 63.0804 mo
171.639 63.0804 li
@
174.759 63.0804 mo
175.479 63.0804 li
@
178.599 63.0804 mo
179.319 63.0804 li
@
182.439 63.0804 mo
183.159 63.0804 li
@
186.279 63.0804 mo
186.999 63.0804 li
@
190.119 63.0804 mo
190.839 63.0804 li
@
193.959 63.0804 mo
194.679 63.0804 li
@
197.799 63.0804 mo
198.519 63.0804 li
@
201.639 63.0804 mo
202.359 63.0804 li
@
205.479 63.0804 mo
206.199 63.0804 li
@
209.319 63.0804 mo
210.039 63.0804 li
@
213.159 63.0804 mo
213.879 63.0804 li
@
216.999 63.0804 mo
217.719 63.0804 li
@
220.839 63.0804 mo
221.559 63.0804 li
@
224.679 63.0804 mo
225.399 63.0804 li
@
228.519 63.0804 mo
229.239 63.0804 li
@
232.359 63.0804 mo
233.079 63.0804 li
@
236.207 63.0804 mo
236.927 63.0804 li
@
240.047 63.0804 mo
240.767 63.0804 li
@
243.887 63.0804 mo
244.607 63.0804 li
@
247.727 63.0804 mo
248.447 63.0804 li
@
251.567 63.0804 mo
252.287 63.0804 li
@
255.407 63.0804 mo
256.127 63.0804 li
@
259.247 63.0804 mo
259.967 63.0804 li
@
263.087 63.0804 mo
263.807 63.0804 li
@
266.927 63.0804 mo
267.647 63.0804 li
@
270.767 63.0804 mo
271.487 63.0804 li
@
274.607 63.0804 mo
275.327 63.0804 li
@
278.447 63.0804 mo
279.167 63.0804 li
@
282.287 63.0804 mo
283.007 63.0804 li
@
286.127 63.0804 mo
286.847 63.0804 li
@
289.967 63.0804 mo
290.687 63.0804 li
@
293.807 63.0804 mo
294.527 63.0804 li
@
297.647 63.0804 mo
298.367 63.0804 li
@
301.487 63.0804 mo
302.207 63.0804 li
@
305.327 63.0804 mo
306.047 63.0804 li
@
309.167 63.0804 mo
309.887 63.0804 li
@
313.007 63.0804 mo
313.727 63.0804 li
@
316.847 63.0804 mo
317.567 63.0804 li
@
320.687 63.0804 mo
321.407 63.0804 li
@
351.407 63.0804 mo
352.127 63.0804 li
@
355.247 63.0804 mo
355.967 63.0804 li
@
359.087 63.0804 mo
359.567 63.0804 li
@
67.2439 23.7205 mo
67.9639 23.7205 li
@
71.0839 23.7205 mo
71.8038 23.7205 li
@
74.9239 23.7205 mo
75.6438 23.7205 li
@
78.7639 23.7205 mo
79.4838 23.7205 li
@
82.6039 23.7205 mo
83.3238 23.7205 li
@
86.4438 23.7205 mo
87.1638 23.7205 li
@
90.2838 23.7205 mo
91.0038 23.7205 li
@
94.1238 23.7205 mo
94.8438 23.7205 li
@
97.9638 23.7205 mo
98.6838 23.7205 li
@
101.804 23.7205 mo
102.524 23.7205 li
@
105.644 23.7205 mo
106.364 23.7205 li
@
109.484 23.7205 mo
110.204 23.7205 li
@
113.324 23.7205 mo
114.044 23.7205 li
@
117.164 23.7205 mo
117.884 23.7205 li
@
121.004 23.7205 mo
121.724 23.7205 li
@
124.844 23.7205 mo
125.564 23.7205 li
@
128.684 23.7205 mo
129.404 23.7205 li
@
132.524 23.7205 mo
133.244 23.7205 li
@
136.364 23.7205 mo
137.084 23.7205 li
@
140.204 23.7205 mo
140.924 23.7205 li
@
144.044 23.7205 mo
144.764 23.7205 li
@
147.884 23.7205 mo
148.604 23.7205 li
@
151.724 23.7205 mo
152.444 23.7205 li
@
155.564 23.7205 mo
156.284 23.7205 li
@
159.404 23.7205 mo
160.124 23.7205 li
@
163.244 23.7205 mo
163.964 23.7205 li
@
167.084 23.7205 mo
167.804 23.7205 li
@
170.924 23.7205 mo
171.644 23.7205 li
@
174.764 23.7205 mo
175.484 23.7205 li
@
178.604 23.7205 mo
179.324 23.7205 li
@
182.444 23.7205 mo
183.164 23.7205 li
@
186.284 23.7205 mo
187.004 23.7205 li
@
190.124 23.7205 mo
190.844 23.7205 li
@
193.964 23.7205 mo
194.684 23.7205 li
@
197.804 23.7205 mo
198.524 23.7205 li
@
201.644 23.7205 mo
202.364 23.7205 li
@
205.484 23.7205 mo
206.204 23.7205 li
@
209.324 23.7205 mo
210.044 23.7205 li
@
213.164 23.7205 mo
213.884 23.7205 li
@
217.004 23.7205 mo
217.724 23.7205 li
@
220.844 23.7205 mo
221.564 23.7205 li
@
224.684 23.7205 mo
225.404 23.7205 li
@
228.524 23.7205 mo
229.244 23.7205 li
@
232.364 23.7205 mo
233.084 23.7205 li
@
236.204 23.7205 mo
236.924 23.7205 li
@
240.044 23.7205 mo
240.764 23.7205 li
@
243.884 23.7205 mo
244.604 23.7205 li
@
247.724 23.7205 mo
248.444 23.7205 li
@
251.564 23.7205 mo
252.284 23.7205 li
@
255.404 23.7205 mo
256.124 23.7205 li
@
259.244 23.7205 mo
259.964 23.7205 li
@
263.084 23.7205 mo
263.804 23.7205 li
@
266.924 23.7205 mo
267.644 23.7205 li
@
270.764 23.7205 mo
271.484 23.7205 li
@
274.604 23.7205 mo
275.324 23.7205 li
@
278.444 23.7205 mo
279.164 23.7205 li
@
282.284 23.7205 mo
283.004 23.7205 li
@
286.124 23.7205 mo
286.844 23.7205 li
@
289.964 23.7205 mo
290.684 23.7205 li
@
293.804 23.7205 mo
294.524 23.7205 li
@
297.644 23.7205 mo
298.364 23.7205 li
@
301.484 23.7205 mo
302.204 23.7205 li
@
305.324 23.7205 mo
306.044 23.7205 li
@
309.164 23.7205 mo
309.884 23.7205 li
@
313.004 23.7205 mo
313.724 23.7205 li
@
316.844 23.7205 mo
317.564 23.7205 li
@
320.684 23.7205 mo
321.404 23.7205 li
@
324.524 23.7205 mo
325.244 23.7205 li
@
328.364 23.7205 mo
329.084 23.7205 li
@
332.204 23.7205 mo
332.924 23.7205 li
@
336.044 23.7205 mo
336.764 23.7205 li
@
339.884 23.7205 mo
340.604 23.7205 li
@
343.724 23.7205 mo
344.444 23.7205 li
@
347.564 23.7205 mo
348.284 23.7205 li
@
351.404 23.7205 mo
352.124 23.7205 li
@
355.244 23.7205 mo
355.964 23.7205 li
@
359.084 23.7205 mo
359.564 23.7205 li
@
213.647 254.36 mo
214.847 258.2 li
218.927 258.2 li
215.567 260.6 li
217.007 264.68 li
213.647 262.28 li
210.047 264.68 li
211.487 260.6 li
208.127 258.2 li
212.207 258.2 li
cp
0 0 0 rgb
ef
213.647 254.36 mo
214.847 258.2 li
218.927 258.2 li
215.567 260.6 li
217.007 264.68 li
213.647 262.28 li
210.047 264.68 li
211.487 260.6 li
208.127 258.2 li
212.207 258.2 li
cp
@
1.2 lw
234.527 376.76 mo
233.327 377 li
@
228.287 378.2 mo
227.087 378.44 li
@
222.047 379.4 mo
220.847 379.4 li
@
215.807 379.88 mo
214.607 379.88 li
@
209.567 379.88 mo
208.367 379.88 li
@
203.327 379.4 mo
202.127 379.4 li
@
197.087 378.44 mo
195.887 378.2 li
@
191.327 377 mo
190.127 376.52 li
@
185.327 375.08 mo
184.127 374.6 li
@
179.567 372.92 mo
178.607 372.44 li
@
173.807 370.04 mo
172.847 369.56 li
@
168.527 366.92 mo
167.567 366.44 li
@
163.247 363.56 mo
162.287 362.84 li
@
158.207 359.96 mo
157.247 359.24 li
@
153.407 355.88 mo
152.447 355.16 li
@
148.847 351.8 mo
147.887 350.84 li
@
144.527 347.48 mo
143.567 346.52 li
@
139.967 342.68 mo
139.247 341.72 li
@
135.887 337.64 mo
135.167 336.92 li
@
132.047 332.84 mo
131.327 331.88 li
@
128.687 327.8 mo
127.967 326.84 li
@
125.087 322.52 mo
124.367 321.56 li
@
121.727 317 mo
121.007 316.04 li
@
118.367 311.24 mo
117.887 310.28 li
@
115.487 305.72 mo
115.007 304.76 li
@
112.847 300.2 mo
112.367 299 li
@
110.447 294.44 mo
109.727 293.24 li
@
108.047 288.44 mo
107.327 287.24 li
@
105.647 282.68 mo
105.167 281.48 li
@
103.727 276.68 mo
103.247 275.48 li
@
101.807 270.68 mo
101.327 269.48 li
@
99.8867 264.68 mo
99.6467 263.48 li
@
98.4467 258.44 mo
98.2067 257.24 li
@
96.7667 252.44 mo
96.5267 251.24 li
@
95.8067 246.2 mo
95.5667 245 li
@
94.6067 239.96 mo
94.3667 239 li
@
93.6467 233.96 mo
93.4067 232.76 li
@
92.6867 227.72 mo
92.6867 226.52 li
@
92.2067 221.48 mo
91.9667 220.28 li
@
91.7267 215.24 mo
91.4867 214.04 li
@
91.2467 209 mo
91.2467 207.801 li
@
91.0067 202.76 mo
91.0067 201.561 li
@
91.0067 196.521 mo
91.0067 195.321 li
@
91.0067 190.281 mo
91.2467 189.081 li
@
91.2467 184.041 mo
91.4867 182.841 li
@
91.7267 177.801 mo
91.9667 176.601 li
@
92.2067 171.561 mo
92.4467 170.361 li
@
93.1667 165.321 mo
93.1667 164.121 li
@
93.8867 159.081 mo
94.1267 157.881 li
@
94.8467 153.081 mo
95.3267 151.881 li
@
96.2867 146.841 mo
96.5267 145.641 li
@
97.7267 140.841 mo
97.9667 139.641 li
@
99.1667 134.841 mo
99.4067 133.641 li
@
100.847 128.601 mo
101.327 127.641 li
@
102.767 122.601 mo
103.247 121.641 li
@
105.167 116.601 mo
105.407 115.641 li
@
107.327 111.081 mo
107.807 110.121 li
@
109.727 105.561 mo
110.447 104.361 li
@
112.367 99.8006 mo
112.847 98.8406 li
@
115.487 94.2806 mo
116.207 93.0806 li
@
118.847 88.7606 mo
119.327 87.8006 li
@
122.447 83.2406 mo
123.167 82.2806 li
@
126.047 77.9606 mo
126.767 77.2407 li
@
130.127 72.6806 mo
130.847 71.9607 li
@
134.207 68.3606 mo
134.927 67.4006 li
@
138.527 63.8006 mo
139.487 63.0807 li
@
143.087 59.7206 mo
144.047 59.0007 li
@
148.127 55.8806 mo
149.087 54.9207 li
@
153.167 52.2806 mo
154.127 51.5607 li
@
158.687 48.9207 mo
159.647 48.2007 li
@
164.207 45.8007 mo
165.407 45.3207 li
@
169.967 43.6407 mo
170.927 43.1607 li
@
175.967 41.4807 mo
177.167 41.0007 li
@
182.207 40.0406 mo
183.167 39.8007 li
@
188.207 38.8406 mo
189.407 38.8406 li
@
194.447 38.6006 mo
195.647 38.6006 li
@
200.687 38.6006 mo
201.887 38.6006 li
@
206.927 39.0807 mo
208.127 39.3207 li
@
213.167 40.2807 mo
214.367 40.5207 li
@
219.407 41.9607 mo
220.367 42.2007 li
@
225.407 43.8807 mo
226.607 44.3607 li
@
230.687 46.0407 mo
231.647 46.5207 li
@
236.447 48.9207 mo
237.647 49.6407 li
@
241.727 52.0407 mo
242.687 52.5207 li
@
247.007 55.4007 mo
247.967 56.1207 li
@
252.047 59.2407 mo
253.007 59.9607 li
@
256.607 62.8407 mo
257.567 63.8007 li
@
261.407 67.4007 mo
262.127 68.1207 li
@
265.727 71.7207 mo
266.447 72.4407 li
@
270.047 76.5207 mo
270.767 77.4807 li
@
274.127 81.3206 mo
274.847 82.5207 li
@
277.967 86.6006 mo
278.687 87.8007 li
@
281.567 91.8806 mo
282.287 92.8407 li
@
285.167 97.1606 mo
285.887 98.1207 li
@
288.527 102.681 mo
289.007 103.641 li
@
291.647 108.201 mo
292.127 109.161 li
@
294.527 113.721 mo
295.007 114.681 li
@
296.927 119.241 mo
297.407 120.201 li
@
299.567 125.001 mo
299.807 125.961 li
@
301.727 130.761 mo
302.207 131.961 li
@
304.127 136.761 mo
304.367 137.721 li
@
306.047 142.761 mo
306.527 143.961 li
@
307.967 148.761 mo
308.447 149.961 li
@
309.647 154.761 mo
310.127 155.721 li
@
311.327 160.761 mo
311.567 161.961 li
@
312.767 166.761 mo
313.007 167.961 li
@
313.967 173.001 mo
314.207 174.201 li
@
315.167 179.241 mo
315.167 180.441 li
@
315.887 185.481 mo
316.127 186.681 li
@
316.847 191.721 mo
317.087 192.921 li
@
317.567 197.961 mo
317.567 199.161 li
@
317.807 204.201 mo
318.047 205.401 li
@
318.287 210.441 mo
318.287 211.641 li
@
318.527 216.681 mo
318.527 217.881 li
@
318.527 222.921 mo
318.527 224.121 li
@
318.287 229.161 mo
318.287 230.361 li
@
318.047 235.401 mo
318.047 236.601 li
@
317.567 241.641 mo
317.567 242.841 li
@
317.087 247.88 mo
316.847 249.081 li
@
316.127 254.12 mo
316.127 255.32 li
@
315.167 260.36 mo
315.167 261.32 li
@
314.447 266.36 mo
314.207 267.56 li
@
313.007 272.6 mo
312.767 273.801 li
@
311.567 278.6 mo
311.327 279.801 li
@
309.887 284.6 mo
309.647 285.801 li
@
308.207 290.6 mo
307.727 291.801 li
@
306.047 296.6 mo
305.807 297.56 li
@
304.127 302.36 mo
303.647 303.56 li
@
301.727 308.12 mo
301.247 309.32 li
@
299.087 313.88 mo
298.607 315.08 li
@
296.447 319.64 mo
295.727 320.6 li
@
293.327 325.16 mo
292.847 326.12 li
@
289.967 330.68 mo
289.487 331.64 li
@
286.847 335.72 mo
286.127 336.68 li
@
283.247 340.52 mo
282.287 341.48 li
@
279.407 345.32 mo
278.687 346.28 li
@
275.567 349.88 mo
274.607 350.84 li
@
271.007 354.44 mo
270.047 355.4 li
@
265.967 359 mo
265.007 359.72 li
@
260.927 363.08 mo
259.967 363.8 li
@
255.887 366.68 mo
254.927 367.4 li
@
250.607 369.8 mo
249.407 370.52 li
@
244.847 372.68 mo
243.887 373.16 li
@
239.087 375.08 mo
237.887 375.56 li
@
2.16 lw
149.326 346.04 mo
147.406 342.92 li
145.246 339.56 li
141.406 332.84 li
138.046 325.64 li
133.726 314.12 li
132.526 310.28 li
131.566 306.2 li
130.366 302.12 li
129.646 297.8 li
128.686 293.72 li
128.206 289.4 li
127.486 285.08 li
127.246 280.76 li
126.766 276.44 li
126.526 272.12 li
126.526 258.68 li
126.766 254.36 li
127.006 250.04 li
127.486 245.72 li
127.966 241.16 li
130.126 228.2 li
131.086 224.12 li
132.046 219.8 li
133.246 215.72 li
134.206 211.4 li
135.646 207.32 li
136.846 203.48 li
138.286 199.4 li
139.726 195.56 li
141.406 191.72 li
142.846 187.88 li
144.526 184.28 li
146.446 180.68 li
148.126 177.08 li
150.046 173.48 li
153.886 166.76 li
160.366 157.4 li
166.846 148.76 li
174.046 140.84 li
178.846 136.04 li
183.646 131.72 li
190.757 125.797 198.47 120.421 206.927 116.6 cv
209.567 115.4 li
211.967 114.2 li
217.247 112.28 li
225.167 110.12 li
227.807 109.64 li
230.207 109.16 li
232.847 108.92 li
235.487 108.44 li
238.127 108.44 li
240.527 108.2 li
243.167 108.2 li
247.967 108.68 li
256.73 109.132 263.794 111.698 271.727 115.16 cv
278.207 118.76 li
280.127 119.96 li
282.287 121.4 li
284.207 123.08 li
286.367 124.52 li
290.207 127.88 li
293.807 131.48 li
295.487 133.4 li
297.407 135.32 li
300.767 139.64 li
302.207 141.8 li
303.887 143.96 li
309.648 153.56 li
315.648 166.76 li
319.488 178.28 li
320.208 181.4 li
322.974 191.707 324.431 202.673 325.008 213.32 cv
325.248 216.68 li
325.248 227 li
325.008 230.6 li
325.008 233.96 li
324.768 237.56 li
324.288 240.92 li
324.048 244.52 li
323.568 248.12 li
323.088 251.48 li
322.368 255.08 li
321.888 258.68 li
320.928 262.28 li
320.208 265.88 li
319.488 269.24 li
316.491 281.218 312.026 292.775 307.007 304.04 cv
303.647 310.76 li
301.967 313.88 li
300.047 317.24 li
296.207 323.48 li
290.574 332.9 283.23 341.132 275.807 349.16 cv
267.887 356.36 li
265.247 358.52 li
259.487 362.84 li
256.607 364.76 li
247.967 369.8 li
244.847 371.48 li
241.727 372.68 li
238.607 374.12 li
235.487 375.08 li
232.367 376.28 li
229.247 377 li
226.127 377.96 li
223.007 378.44 li
219.647 378.92 li
216.527 379.4 li
213.407 379.64 li
210.047 379.64 li
206.927 379.4 li
203.807 379.4 li
200.446 378.92 li
197.326 378.44 li
191.086 377 li
180.609 374.07 170.024 367.776 162.046 360.44 cv
157.006 355.4 li
154.606 352.76 li
152.206 349.88 li
150.046 347 li
@
1.2 lw
145.966 252.44 mo
147.406 247.64 li
@
149.086 242.36 mo
150.526 237.8 li
@
152.446 232.52 mo
154.366 227.96 li
@
156.526 222.92 mo
158.446 218.84 li
@
161.086 213.8 mo
163.486 209.48 li
@
166.366 204.92 mo
168.766 200.84 li
@
171.886 196.28 mo
174.766 192.44 li
@
178.366 187.88 mo
181.246 184.28 li
@
184.846 180.44 mo
188.446 176.84 li
@
192.526 173 mo
196.366 169.4 li
@
200.686 166.04 mo
204.766 162.92 li
@
209.326 159.8 mo
213.406 157.4 li
@
218.446 154.76 mo
223.006 152.36 li
@
228.046 150.2 mo
232.606 149 li
@
237.886 147.32 mo
242.686 146.36 li
@
248.206 145.64 mo
253.006 145.4 li
@
258.526 145.4 mo
263.326 145.88 li
@
268.846 146.84 mo
273.406 148.04 li
@
278.686 149.96 mo
283.006 151.88 li
@
287.806 154.52 mo
291.406 157.16 li
@
295.966 160.76 mo
299.326 163.88 li
@
303.166 168.2 mo
306.286 172.04 li
@
309.406 176.84 mo
311.806 181.16 li
@
314.446 186.2 mo
316.126 190.52 li
@
318.046 195.8 mo
319.726 200.361 li
@
320.926 205.88 mo
321.886 210.44 li
@
322.606 215.96 mo
323.326 220.76 li
@
323.806 226.28 mo
323.806 231.08 li
@
323.806 236.6 mo
323.806 241.4 li
@
323.326 246.92 mo
322.846 251.72 li
@
321.886 257 mo
321.166 261.8 li
@
320.206 267.32 mo
319.006 271.88 li
@
317.566 277.16 mo
316.126 281.72 li
@
314.446 287 mo
312.766 291.32 li
@
310.606 296.6 mo
308.926 300.92 li
@
306.526 305.96 mo
304.126 310.52 li
@
301.486 315.32 mo
299.086 319.4 li
@
296.206 323.96 mo
293.566 327.8 li
@
290.686 332.12 mo
287.566 335.96 li
@
283.966 340.28 mo
280.846 343.64 li
@
276.766 347.72 mo
273.406 351.08 li
@
269.086 355.16 mo
265.486 358.04 li
@
261.166 361.4 mo
257.326 364.04 li
@
252.526 367.16 mo
248.446 369.32 li
@
243.406 371.72 mo
238.846 373.88 li
@
233.566 375.8 mo
228.766 377 li
@
223.486 378.2 mo
218.686 378.92 li
@
213.166 379.64 mo
208.366 379.64 li
@
202.846 379.16 mo
198.046 378.68 li
@
192.766 377.24 mo
188.206 375.8 li
@
183.166 373.64 mo
179.086 371.48 li
@
174.766 368.6 mo
170.926 365.72 li
@
166.606 362.12 mo
163.246 358.52 li
@
159.646 354.2 mo
156.766 350.12 li
@
153.886 345.08 mo
151.726 340.76 li
@
149.326 335.72 mo
147.406 331.16 li
@
145.726 325.88 mo
144.526 321.081 li
@
143.326 315.56 mo
142.366 310.76 li
@
141.646 305.48 mo
141.406 300.68 li
@
141.166 295.16 mo
140.926 290.361 li
@
141.166 284.84 mo
141.406 280.04 li
@
142.126 274.52 mo
142.606 269.72 li
@
143.566 264.2 mo
144.286 259.64 li
@
145.486 254.12 mo
146.206 251.961 li
@
.72 lw
137.326 271.16 mo
137.566 267.56 li
138.526 260.84 li
139.246 257.48 li
139.966 253.88 li
142.959 239.148 147.809 224.815 154.606 211.401 cv
156.046 208.281 li
157.726 205.16 li
164.43 192.892 172.691 181.553 182.206 171.32 cv
188.686 164.841 li
193.007 161 li
195.167 159.32 li
197.567 157.401 li
201.887 154.04 li
204.047 152.6 li
206.447 151.16 li
209.518 149.109 214.275 146.122 217.727 144.921 cv
219.887 143.72 li
222.287 142.76 li
224.447 141.801 li
226.607 141.081 li
230.234 139.767 233.981 138.88 237.647 137.72 cv
239.807 137.48 li
241.967 137 li
245.282 136.746 249.296 135.941 252.527 136.04 cv
256.607 136.04 li
258.767 136.28 li
262.607 136.76 li
264.767 137 li
266.687 137.241 li
268.367 137.72 li
274.127 139.16 li
275.807 139.88 li
277.727 140.6 li
279.407 141.32 li
282.72 142.56 284.784 143.927 287.807 145.641 cv
289.247 146.6 li
290.927 147.561 li
292.367 148.76 li
299.68 153.76 305.392 160.716 310.368 167.961 cv
311.328 169.641 li
312.528 171.32 li
313.488 173 li
314.448 174.921 li
315.168 176.6 li
316.128 178.281 li
316.848 180.201 li
317.808 182.121 li
318.528 184.04 li
319.248 185.72 li
319.968 187.641 li
320.955 191.016 322.228 194.307 322.848 197.72 cv
323.568 199.88 li
323.808 201.801 li
324.288 203.961 li
326.533 214.038 326.859 224.388 326.688 234.681 cv
326.448 237.081 li
326.448 239.241 li
326.208 241.641 li
325.968 243.801 li
325.728 246.201 li
325.488 248.6 li
325.248 250.76 li
325.008 253.16 li
324.528 255.561 li
324.048 257.72 li
323.568 260.12 li
323.328 262.52 li
322.608 264.68 li
321.648 269.48 li
320.503 273.32 319.569 277.108 318.288 281 cv
317.568 283.16 li
316.608 285.56 li
315.888 287.72 li
314.928 289.88 li
314.02 293.052 311.808 298.322 310.128 301.16 cv
309.168 303.32 li
307.968 305.48 li
306.492 309.049 304.022 312.793 302.208 316.28 cv
301.008 318.201 li
299.567 320.361 li
298.368 322.52 li
295.487 326.361 li
294.047 328.52 li
288.287 336.201 li
286.607 337.88 li
285.167 339.8 li
282.461 342.697 279.961 345.757 277.007 348.44 cv
275.087 350.12 li
273.407 351.8 li
271.727 353.24 li
269.807 354.68 li
267.157 357.547 263.792 359.569 260.687 361.88 cv
258.767 363.32 li
256.847 364.52 li
253.72 366.652 250.3 368.204 247.007 370.04 cv
244.847 371 li
242.927 371.96 li
240.767 372.921 li
238.847 373.641 li
236.687 374.6 li
234.527 375.32 li
232.607 375.8 li
230.447 376.52 li
228.287 377 li
226.127 377.72 li
223.967 377.96 li
221.807 378.44 li
219.647 378.68 li
217.727 379.16 li
213.986 379.258 210.777 379.533 206.927 379.4 cv
204.767 379.4 li
200.447 378.921 li
190.35 377.49 180.566 373.613 172.126 367.88 cv
170.446 366.44 li
168.526 365 li
166.846 363.56 li
164.926 361.88 li
156.716 354.406 150.601 344.8 145.966 334.76 cv
144.046 329.48 li
138.595 316.026 136.844 301.415 136.606 287 cv
136.606 280.28 li
136.846 276.921 li
137.326 270.201 li
@
311.568 288.44 mo
311.568 297.56 li
@
307.008 293 mo
316.128 293 li
@
310.608 290.6 mo
310.608 299.72 li
@
306.048 295.16 mo
315.168 295.16 li
@
312.288 292.76 mo
312.288 301.88 li
@
307.728 297.32 mo
316.848 297.32 li
@
311.568 291.8 mo
311.568 300.921 li
@
307.008 296.36 mo
316.128 296.36 li
@
308.208 299.48 mo
308.208 308.6 li
@
303.648 304.04 mo
312.768 304.04 li
@
304.128 299.96 mo
304.128 309.08 li
@
299.568 304.52 mo
308.688 304.52 li
@
300.288 305.48 mo
300.288 314.6 li
@
295.728 310.04 mo
304.848 310.04 li
@
301.008 311.72 mo
301.008 320.84 li
@
296.448 316.28 mo
305.568 316.28 li
@
300.288 315.32 mo
300.288 324.44 li
@
295.728 319.88 mo
304.848 319.88 li
@
292.128 316.52 mo
292.128 325.64 li
@
287.568 321.08 mo
296.688 321.08 li
@
295.728 321.56 mo
295.728 330.68 li
@
291.168 326.12 mo
300.288 326.12 li
@
294.528 323.96 mo
294.528 333.08 li
@
289.968 328.52 mo
299.088 328.52 li
@
292.128 322.52 mo
292.128 331.64 li
@
287.568 327.08 mo
296.688 327.08 li
@
291.648 325.4 mo
291.648 334.52 li
@
287.088 329.96 mo
296.208 329.96 li
@
293.568 328.76 mo
293.568 337.88 li
@
289.008 333.32 mo
298.128 333.32 li
@
291.408 330.68 mo
291.408 339.8 li
@
286.848 335.24 mo
295.968 335.24 li
@
291.168 330.2 mo
291.168 339.32 li
@
286.608 334.76 mo
295.728 334.76 li
@
291.408 337.4 mo
291.408 346.52 li
@
286.848 341.96 mo
295.968 341.96 li
@
285.408 327.8 mo
285.408 336.92 li
@
280.848 332.36 mo
289.968 332.36 li
@
288.288 332.6 mo
288.288 341.72 li
@
283.728 337.16 mo
292.848 337.16 li
@
286.608 333.8 mo
286.608 342.92 li
@
282.048 338.36 mo
291.168 338.36 li
@
285.888 334.52 mo
285.888 343.64 li
@
281.328 339.08 mo
290.448 339.08 li
@
282.288 335 mo
282.288 344.12 li
@
277.728 339.56 mo
286.848 339.56 li
@
282.528 337.4 mo
282.528 346.52 li
@
277.968 341.96 mo
287.088 341.96 li
@
284.208 341 mo
284.208 350.12 li
@
279.648 345.56 mo
288.768 345.56 li
@
273.408 342.2 mo
273.408 351.32 li
@
268.848 346.76 mo
277.968 346.76 li
@
283.968 341.72 mo
283.968 350.84 li
@
279.408 346.28 mo
288.528 346.28 li
@
279.168 339.08 mo
279.168 348.2 li
@
274.608 343.64 mo
283.728 343.64 li
@
285.888 349.16 mo
285.888 358.28 li
@
281.328 353.72 mo
290.448 353.72 li
@
277.248 341.96 mo
277.248 351.08 li
@
272.688 346.52 mo
281.808 346.52 li
@
276.048 341.72 mo
276.048 350.84 li
@
271.488 346.28 mo
280.608 346.28 li
@
276.528 346.04 mo
276.528 355.16 li
@
271.968 350.6 mo
281.088 350.6 li
@
274.608 346.52 mo
274.608 355.64 li
@
270.048 351.08 mo
279.168 351.08 li
@
273.408 346.28 mo
273.408 355.4 li
@
268.848 350.84 mo
277.968 350.84 li
@
274.128 346.28 mo
274.128 355.4 li
@
269.568 350.84 mo
278.688 350.84 li
@
271.728 348.44 mo
271.728 357.56 li
@
267.168 353 mo
276.288 353 li
@
271.968 348.92 mo
271.968 358.04 li
@
267.408 353.48 mo
276.528 353.48 li
@
270.288 349.4 mo
270.288 358.52 li
@
265.728 353.96 mo
274.848 353.96 li
@
267.168 352.52 mo
267.168 361.64 li
@
262.608 357.08 mo
271.728 357.08 li
@
269.328 352.04 mo
269.328 361.16 li
@
264.768 356.6 mo
273.888 356.6 li
@
266.688 351.32 mo
266.688 360.44 li
@
262.128 355.88 mo
271.248 355.88 li
@
265.728 352.76 mo
265.728 361.88 li
@
261.168 357.32 mo
270.288 357.32 li
@
264.048 354.68 mo
264.048 363.8 li
@
259.488 359.24 mo
268.608 359.24 li
@
263.568 355.64 mo
263.568 364.76 li
@
259.008 360.2 mo
268.128 360.2 li
@
260.688 357.08 mo
260.688 366.2 li
@
256.128 361.64 mo
265.248 361.64 li
@
259.008 357.56 mo
259.008 366.68 li
@
254.448 362.12 mo
263.568 362.12 li
@
258.528 359 mo
258.528 368.12 li
@
253.968 363.56 mo
263.088 363.56 li
@
257.328 357.8 mo
257.328 366.92 li
@
252.768 362.36 mo
261.888 362.36 li
@
256.848 359 mo
256.848 368.12 li
@
252.288 363.56 mo
261.408 363.56 li
@
255.408 360.92 mo
255.408 370.04 li
@
250.848 365.48 mo
259.968 365.48 li
@
254.208 360.92 mo
254.208 370.04 li
@
249.648 365.48 mo
258.768 365.48 li
@
255.888 352.28 mo
255.888 361.4 li
@
251.328 356.84 mo
260.448 356.84 li
@
253.008 360.68 mo
253.008 369.8 li
@
248.448 365.24 mo
257.568 365.24 li
@
251.568 363.8 mo
251.568 372.92 li
@
247.008 368.36 mo
256.128 368.36 li
@
250.368 362.6 mo
250.368 371.72 li
@
245.808 367.16 mo
254.928 367.16 li
@
249.648 371.24 mo
249.648 380.36 li
@
245.088 375.8 mo
254.208 375.8 li
@
248.928 364.76 mo
248.928 373.88 li
@
244.368 369.32 mo
253.488 369.32 li
@
247.248 364.52 mo
247.248 373.64 li
@
242.688 369.08 mo
251.808 369.08 li
@
246.768 367.16 mo
246.768 376.28 li
@
242.208 371.72 mo
251.328 371.72 li
@
246.048 366.44 mo
246.048 375.56 li
@
241.488 371 mo
250.608 371 li
@
244.848 365.72 mo
244.848 374.84 li
@
240.288 370.28 mo
249.408 370.28 li
@
243.648 367.4 mo
243.648 376.52 li
@
239.088 371.96 mo
248.208 371.96 li
@
242.928 367.64 mo
242.928 376.76 li
@
238.368 372.2 mo
247.488 372.2 li
@
241.728 367.88 mo
241.728 377 li
@
237.168 372.44 mo
246.288 372.44 li
@
240.768 368.6 mo
240.768 377.72 li
@
236.208 373.16 mo
245.328 373.16 li
@
239.568 369.08 mo
239.568 378.2 li
@
235.008 373.64 mo
244.128 373.64 li
@
238.608 369.56 mo
238.608 378.68 li
@
234.048 374.12 mo
243.168 374.12 li
@
237.648 370.04 mo
237.648 379.16 li
@
233.088 374.6 mo
242.208 374.6 li
@
236.688 370.52 mo
236.688 379.64 li
@
232.128 375.08 mo
241.248 375.08 li
@
235.728 371 mo
235.728 380.12 li
@
231.168 375.56 mo
240.288 375.56 li
@
234.768 371 mo
234.768 380.12 li
@
230.208 375.56 mo
239.328 375.56 li
@
233.568 371.24 mo
233.568 380.36 li
@
229.008 375.8 mo
238.128 375.8 li
@
232.368 371.48 mo
232.368 380.6 li
@
227.808 376.04 mo
236.928 376.04 li
@
231.408 371.96 mo
231.408 381.08 li
@
226.848 376.52 mo
235.968 376.52 li
@
230.688 372.2 mo
230.688 381.32 li
@
226.128 376.76 mo
235.248 376.76 li
@
229.488 372.68 mo
229.488 381.8 li
@
224.928 377.24 mo
234.048 377.24 li
@
228.288 372.92 mo
228.288 382.04 li
@
223.728 377.48 mo
232.848 377.48 li
@
227.328 372.68 mo
227.328 381.8 li
@
222.768 377.24 mo
231.888 377.24 li
@
225.168 373.4 mo
225.168 382.52 li
@
220.608 377.96 mo
229.728 377.96 li
@
225.888 373.4 mo
225.888 382.52 li
@
221.328 377.96 mo
230.448 377.96 li
@
224.448 373.16 mo
224.448 382.28 li
@
219.888 377.72 mo
229.008 377.72 li
@
223.248 374.12 mo
223.248 383.24 li
@
218.688 378.68 mo
227.808 378.68 li
@
222.048 374.36 mo
222.048 383.48 li
@
217.488 378.92 mo
226.608 378.92 li
@
221.088 373.88 mo
221.088 383 li
@
216.528 378.44 mo
225.648 378.44 li
@
218.208 374.36 mo
218.208 383.48 li
@
213.648 378.92 mo
222.768 378.92 li
@
218.448 375.08 mo
218.448 384.2 li
@
213.888 379.64 mo
223.008 379.64 li
@
218.208 375.56 mo
218.208 384.68 li
@
213.648 380.12 mo
222.768 380.12 li
@
216.288 374.6 mo
216.288 383.72 li
@
211.728 379.16 mo
220.848 379.16 li
@
215.328 375.32 mo
215.328 384.44 li
@
210.768 379.88 mo
219.888 379.88 li
@
213.648 375.8 mo
213.648 384.92 li
@
209.088 380.36 mo
218.208 380.36 li
@
213.408 375.32 mo
213.408 384.44 li
@
208.848 379.88 mo
217.968 379.88 li
@
211.968 375.56 mo
211.968 384.68 li
@
207.408 380.12 mo
216.528 380.12 li
@
211.488 373.64 mo
211.488 382.76 li
@
206.928 378.2 mo
216.048 378.2 li
@
210.288 374.84 mo
210.288 383.96 li
@
205.728 379.4 mo
214.848 379.4 li
@
207.888 375.08 mo
207.888 384.2 li
@
203.328 379.64 mo
212.448 379.64 li
@
209.568 375.32 mo
209.568 384.44 li
@
205.008 379.88 mo
214.128 379.88 li
@
206.688 375.08 mo
206.688 384.2 li
@
202.128 379.64 mo
211.248 379.64 li
@
205.248 375.08 mo
205.248 384.2 li
@
200.688 379.64 mo
209.808 379.64 li
@
204.048 375.08 mo
204.048 384.2 li
@
199.488 379.64 mo
208.608 379.64 li
@
203.568 372.44 mo
203.568 381.56 li
@
199.007 377 mo
208.127 377 li
@
201.647 374.12 mo
201.647 383.24 li
@
197.087 378.68 mo
206.207 378.68 li
@
199.487 373.64 mo
199.487 382.76 li
@
194.927 378.2 mo
204.047 378.2 li
@
199.727 374.84 mo
199.727 383.96 li
@
195.167 379.4 mo
204.287 379.4 li
@
199.487 365.72 mo
199.487 374.84 li
@
194.927 370.28 mo
204.047 370.28 li
@
196.847 373.88 mo
196.847 383 li
@
192.287 378.44 mo
201.407 378.44 li
@
193.487 375.32 mo
193.487 384.44 li
@
188.927 379.88 mo
198.047 379.88 li
@
196.367 370.76 mo
196.367 379.88 li
@
191.807 375.32 mo
200.927 375.32 li
@
194.447 373.4 mo
194.447 382.52 li
@
189.887 377.96 mo
199.007 377.96 li
@
190.847 372.92 mo
190.847 382.04 li
@
186.287 377.48 mo
195.407 377.48 li
@
253.784 368.841 mo
253.784 371.623 251.526 373.881 248.744 373.881 cv
245.962 373.881 243.704 371.623 243.704 368.841 cv
243.704 366.059 245.962 363.801 248.744 363.801 cv
251.526 363.801 253.784 366.059 253.784 368.841 cv
cp
1 1 1 rgb
ef
253.784 368.841 mo
253.784 371.623 251.526 373.881 248.744 373.881 cv
245.962 373.881 243.704 371.623 243.704 368.841 cv
243.704 366.059 245.962 363.801 248.744 363.801 cv
251.526 363.801 253.784 366.059 253.784 368.841 cv
cp
0 0 0 rgb
@
247.064 372.201 mo
247.064 374.983 244.806 377.241 242.024 377.241 cv
239.242 377.241 236.984 374.983 236.984 372.201 cv
236.984 369.419 239.242 367.161 242.024 367.161 cv
244.806 367.161 247.064 369.419 247.064 372.201 cv
cp
1 1 1 rgb
ef
247.064 372.201 mo
247.064 374.983 244.806 377.241 242.024 377.241 cv
239.242 377.241 236.984 374.983 236.984 372.201 cv
236.984 369.419 239.242 367.161 242.024 367.161 cv
244.806 367.161 247.064 369.419 247.064 372.201 cv
cp
0 0 0 rgb
@
245.864 372.921 mo
245.864 375.703 243.606 377.961 240.824 377.961 cv
238.042 377.961 235.784 375.703 235.784 372.921 cv
235.784 370.139 238.042 367.881 240.824 367.881 cv
243.606 367.881 245.864 370.139 245.864 372.921 cv
cp
1 1 1 rgb
ef
245.864 372.921 mo
245.864 375.703 243.606 377.961 240.824 377.961 cv
238.042 377.961 235.784 375.703 235.784 372.921 cv
235.784 370.139 238.042 367.881 240.824 367.881 cv
243.606 367.881 245.864 370.139 245.864 372.921 cv
cp
0 0 0 rgb
@
244.664 373.641 mo
244.664 376.423 242.406 378.681 239.624 378.681 cv
236.842 378.681 234.584 376.423 234.584 373.641 cv
234.584 370.859 236.842 368.601 239.624 368.601 cv
242.406 368.601 244.664 370.859 244.664 373.641 cv
cp
1 1 1 rgb
ef
244.664 373.641 mo
244.664 376.423 242.406 378.681 239.624 378.681 cv
236.842 378.681 234.584 376.423 234.584 373.641 cv
234.584 370.859 236.842 368.601 239.624 368.601 cv
242.406 368.601 244.664 370.859 244.664 373.641 cv
cp
0 0 0 rgb
@
243.704 373.881 mo
243.704 376.663 241.446 378.921 238.664 378.921 cv
235.882 378.921 233.624 376.663 233.624 373.881 cv
233.624 371.099 235.882 368.841 238.664 368.841 cv
241.446 368.841 243.704 371.099 243.704 373.881 cv
cp
1 1 1 rgb
ef
243.704 373.881 mo
243.704 376.663 241.446 378.921 238.664 378.921 cv
235.882 378.921 233.624 376.663 233.624 373.881 cv
233.624 371.099 235.882 368.841 238.664 368.841 cv
241.446 368.841 243.704 371.099 243.704 373.881 cv
cp
0 0 0 rgb
@
242.984 374.841 mo
242.984 377.623 240.726 379.881 237.944 379.881 cv
235.162 379.881 232.904 377.623 232.904 374.841 cv
232.904 372.059 235.162 369.801 237.944 369.801 cv
240.726 369.801 242.984 372.059 242.984 374.841 cv
cp
1 1 1 rgb
ef
242.984 374.841 mo
242.984 377.623 240.726 379.881 237.944 379.881 cv
235.162 379.881 232.904 377.623 232.904 374.841 cv
232.904 372.059 235.162 369.801 237.944 369.801 cv
240.726 369.801 242.984 372.059 242.984 374.841 cv
cp
0 0 0 rgb
@
242.024 375.081 mo
242.024 377.863 239.766 380.121 236.984 380.121 cv
234.202 380.121 231.944 377.863 231.944 375.081 cv
231.944 372.299 234.202 370.041 236.984 370.041 cv
239.766 370.041 242.024 372.299 242.024 375.081 cv
cp
1 1 1 rgb
ef
242.024 375.081 mo
242.024 377.863 239.766 380.121 236.984 380.121 cv
234.202 380.121 231.944 377.863 231.944 375.081 cv
231.944 372.299 234.202 370.041 236.984 370.041 cv
239.766 370.041 242.024 372.299 242.024 375.081 cv
cp
0 0 0 rgb
@
240.584 375.081 mo
240.584 377.863 238.326 380.121 235.544 380.121 cv
232.762 380.121 230.504 377.863 230.504 375.081 cv
230.504 372.299 232.762 370.041 235.544 370.041 cv
238.326 370.041 240.584 372.299 240.584 375.081 cv
cp
1 1 1 rgb
ef
240.584 375.081 mo
240.584 377.863 238.326 380.121 235.544 380.121 cv
232.762 380.121 230.504 377.863 230.504 375.081 cv
230.504 372.299 232.762 370.041 235.544 370.041 cv
238.326 370.041 240.584 372.299 240.584 375.081 cv
cp
0 0 0 rgb
@
239.624 375.081 mo
239.624 377.863 237.366 380.121 234.584 380.121 cv
231.802 380.121 229.544 377.863 229.544 375.081 cv
229.544 372.299 231.802 370.041 234.584 370.041 cv
237.366 370.041 239.624 372.299 239.624 375.081 cv
cp
1 1 1 rgb
ef
239.624 375.081 mo
239.624 377.863 237.366 380.121 234.584 380.121 cv
231.802 380.121 229.544 377.863 229.544 375.081 cv
229.544 372.299 231.802 370.041 234.584 370.041 cv
237.366 370.041 239.624 372.299 239.624 375.081 cv
cp
0 0 0 rgb
@
238.424 375.561 mo
238.424 378.343 236.166 380.601 233.384 380.601 cv
230.602 380.601 228.344 378.343 228.344 375.561 cv
228.344 372.779 230.602 370.521 233.384 370.521 cv
236.166 370.521 238.424 372.779 238.424 375.561 cv
cp
1 1 1 rgb
ef
238.424 375.561 mo
238.424 378.343 236.166 380.601 233.384 380.601 cv
230.602 380.601 228.344 378.343 228.344 375.561 cv
228.344 372.779 230.602 370.521 233.384 370.521 cv
236.166 370.521 238.424 372.779 238.424 375.561 cv
cp
0 0 0 rgb
@
237.704 375.801 mo
237.704 378.583 235.446 380.841 232.664 380.841 cv
229.882 380.841 227.624 378.583 227.624 375.801 cv
227.624 373.019 229.882 370.761 232.664 370.761 cv
235.446 370.761 237.704 373.019 237.704 375.801 cv
cp
1 1 1 rgb
ef
237.704 375.801 mo
237.704 378.583 235.446 380.841 232.664 380.841 cv
229.882 380.841 227.624 378.583 227.624 375.801 cv
227.624 373.019 229.882 370.761 232.664 370.761 cv
235.446 370.761 237.704 373.019 237.704 375.801 cv
cp
0 0 0 rgb
@
236.504 376.521 mo
236.504 379.303 234.246 381.561 231.464 381.561 cv
228.682 381.561 226.424 379.303 226.424 376.521 cv
226.424 373.739 228.682 371.481 231.464 371.481 cv
234.246 371.481 236.504 373.739 236.504 376.521 cv
cp
1 1 1 rgb
ef
236.504 376.521 mo
236.504 379.303 234.246 381.561 231.464 381.561 cv
228.682 381.561 226.424 379.303 226.424 376.521 cv
226.424 373.739 228.682 371.481 231.464 371.481 cv
234.246 371.481 236.504 373.739 236.504 376.521 cv
cp
0 0 0 rgb
@
235.544 376.761 mo
235.544 379.543 233.286 381.801 230.504 381.801 cv
227.722 381.801 225.464 379.543 225.464 376.761 cv
225.464 373.979 227.722 371.721 230.504 371.721 cv
233.286 371.721 235.544 373.979 235.544 376.761 cv
cp
1 1 1 rgb
ef
235.544 376.761 mo
235.544 379.543 233.286 381.801 230.504 381.801 cv
227.722 381.801 225.464 379.543 225.464 376.761 cv
225.464 373.979 227.722 371.721 230.504 371.721 cv
233.286 371.721 235.544 373.979 235.544 376.761 cv
cp
0 0 0 rgb
@
234.824 376.761 mo
234.824 379.543 232.566 381.801 229.784 381.801 cv
227.002 381.801 224.744 379.543 224.744 376.761 cv
224.744 373.979 227.002 371.721 229.784 371.721 cv
232.566 371.721 234.824 373.979 234.824 376.761 cv
cp
1 1 1 rgb
ef
234.824 376.761 mo
234.824 379.543 232.566 381.801 229.784 381.801 cv
227.002 381.801 224.744 379.543 224.744 376.761 cv
224.744 373.979 227.002 371.721 229.784 371.721 cv
232.566 371.721 234.824 373.979 234.824 376.761 cv
cp
0 0 0 rgb
@
233.144 377.241 mo
233.144 380.023 230.886 382.281 228.104 382.281 cv
225.322 382.281 223.064 380.023 223.064 377.241 cv
223.064 374.459 225.322 372.201 228.104 372.201 cv
230.886 372.201 233.144 374.459 233.144 377.241 cv
cp
1 1 1 rgb
ef
233.144 377.241 mo
233.144 380.023 230.886 382.281 228.104 382.281 cv
225.322 382.281 223.064 380.023 223.064 377.241 cv
223.064 374.459 225.322 372.201 228.104 372.201 cv
230.886 372.201 233.144 374.459 233.144 377.241 cv
cp
0 0 0 rgb
@
232.424 377.721 mo
232.424 380.503 230.166 382.761 227.384 382.761 cv
224.602 382.761 222.344 380.503 222.344 377.721 cv
222.344 374.939 224.602 372.681 227.384 372.681 cv
230.166 372.681 232.424 374.939 232.424 377.721 cv
cp
1 1 1 rgb
ef
232.424 377.721 mo
232.424 380.503 230.166 382.761 227.384 382.761 cv
224.602 382.761 222.344 380.503 222.344 377.721 cv
222.344 374.939 224.602 372.681 227.384 372.681 cv
230.166 372.681 232.424 374.939 232.424 377.721 cv
cp
0 0 0 rgb
@
231.224 377.721 mo
231.224 380.503 228.966 382.761 226.184 382.761 cv
223.402 382.761 221.144 380.503 221.144 377.721 cv
221.144 374.939 223.402 372.681 226.184 372.681 cv
228.966 372.681 231.224 374.939 231.224 377.721 cv
cp
1 1 1 rgb
ef
231.224 377.721 mo
231.224 380.503 228.966 382.761 226.184 382.761 cv
223.402 382.761 221.144 380.503 221.144 377.721 cv
221.144 374.939 223.402 372.681 226.184 372.681 cv
228.966 372.681 231.224 374.939 231.224 377.721 cv
cp
0 0 0 rgb
@
230.264 378.201 mo
230.264 380.983 228.006 383.241 225.224 383.241 cv
222.442 383.241 220.184 380.983 220.184 378.201 cv
220.184 375.419 222.442 373.161 225.224 373.161 cv
228.006 373.161 230.264 375.419 230.264 378.201 cv
cp
1 1 1 rgb
ef
230.264 378.201 mo
230.264 380.983 228.006 383.241 225.224 383.241 cv
222.442 383.241 220.184 380.983 220.184 378.201 cv
220.184 375.419 222.442 373.161 225.224 373.161 cv
228.006 373.161 230.264 375.419 230.264 378.201 cv
cp
0 0 0 rgb
@
229.064 378.441 mo
229.064 381.223 226.806 383.481 224.024 383.481 cv
221.242 383.481 218.984 381.223 218.984 378.441 cv
218.984 375.659 221.242 373.401 224.024 373.401 cv
226.806 373.401 229.064 375.659 229.064 378.441 cv
cp
1 1 1 rgb
ef
229.064 378.441 mo
229.064 381.223 226.806 383.481 224.024 383.481 cv
221.242 383.481 218.984 381.223 218.984 378.441 cv
218.984 375.659 221.242 373.401 224.024 373.401 cv
226.806 373.401 229.064 375.659 229.064 378.441 cv
cp
0 0 0 rgb
@
228.344 378.681 mo
228.344 381.463 226.086 383.721 223.304 383.721 cv
220.522 383.721 218.264 381.463 218.264 378.681 cv
218.264 375.899 220.522 373.641 223.304 373.641 cv
226.086 373.641 228.344 375.899 228.344 378.681 cv
cp
1 1 1 rgb
ef
228.344 378.681 mo
228.344 381.463 226.086 383.721 223.304 383.721 cv
220.522 383.721 218.264 381.463 218.264 378.681 cv
218.264 375.899 220.522 373.641 223.304 373.641 cv
226.086 373.641 228.344 375.899 228.344 378.681 cv
cp
0 0 0 rgb
@
227.144 378.921 mo
227.144 381.703 224.886 383.961 222.104 383.961 cv
219.322 383.961 217.064 381.703 217.064 378.921 cv
217.064 376.139 219.322 373.881 222.104 373.881 cv
224.886 373.881 227.144 376.139 227.144 378.921 cv
cp
1 1 1 rgb
ef
227.144 378.921 mo
227.144 381.703 224.886 383.961 222.104 383.961 cv
219.322 383.961 217.064 381.703 217.064 378.921 cv
217.064 376.139 219.322 373.881 222.104 373.881 cv
224.886 373.881 227.144 376.139 227.144 378.921 cv
cp
0 0 0 rgb
@
226.424 378.441 mo
226.424 381.223 224.166 383.481 221.384 383.481 cv
218.602 383.481 216.344 381.223 216.344 378.441 cv
216.344 375.659 218.602 373.401 221.384 373.401 cv
224.166 373.401 226.424 375.659 226.424 378.441 cv
cp
1 1 1 rgb
ef
226.424 378.441 mo
226.424 381.223 224.166 383.481 221.384 383.481 cv
218.602 383.481 216.344 381.223 216.344 378.441 cv
216.344 375.659 218.602 373.401 221.384 373.401 cv
224.166 373.401 226.424 375.659 226.424 378.441 cv
cp
0 0 0 rgb
@
224.744 378.921 mo
224.744 381.703 222.486 383.961 219.704 383.961 cv
216.922 383.961 214.664 381.703 214.664 378.921 cv
214.664 376.139 216.922 373.881 219.704 373.881 cv
222.486 373.881 224.744 376.139 224.744 378.921 cv
cp
1 1 1 rgb
ef
224.744 378.921 mo
224.744 381.703 222.486 383.961 219.704 383.961 cv
216.922 383.961 214.664 381.703 214.664 378.921 cv
214.664 376.139 216.922 373.881 219.704 373.881 cv
222.486 373.881 224.744 376.139 224.744 378.921 cv
cp
0 0 0 rgb
@
223.784 378.201 mo
223.784 380.983 221.526 383.241 218.744 383.241 cv
215.962 383.241 213.704 380.983 213.704 378.201 cv
213.704 375.419 215.962 373.161 218.744 373.161 cv
221.526 373.161 223.784 375.419 223.784 378.201 cv
cp
1 1 1 rgb
ef
223.784 378.201 mo
223.784 380.983 221.526 383.241 218.744 383.241 cv
215.962 383.241 213.704 380.983 213.704 378.201 cv
213.704 375.419 215.962 373.161 218.744 373.161 cv
221.526 373.161 223.784 375.419 223.784 378.201 cv
cp
0 0 0 rgb
@
222.824 379.161 mo
222.824 381.943 220.566 384.201 217.784 384.201 cv
215.002 384.201 212.744 381.943 212.744 379.161 cv
212.744 376.379 215.002 374.121 217.784 374.121 cv
220.566 374.121 222.824 376.379 222.824 379.161 cv
cp
1 1 1 rgb
ef
222.824 379.161 mo
222.824 381.943 220.566 384.201 217.784 384.201 cv
215.002 384.201 212.744 381.943 212.744 379.161 cv
212.744 376.379 215.002 374.121 217.784 374.121 cv
220.566 374.121 222.824 376.379 222.824 379.161 cv
cp
0 0 0 rgb
@
221.864 379.401 mo
221.864 382.183 219.606 384.441 216.824 384.441 cv
214.042 384.441 211.784 382.183 211.784 379.401 cv
211.784 376.619 214.042 374.361 216.824 374.361 cv
219.606 374.361 221.864 376.619 221.864 379.401 cv
cp
1 1 1 rgb
ef
221.864 379.401 mo
221.864 382.183 219.606 384.441 216.824 384.441 cv
214.042 384.441 211.784 382.183 211.784 379.401 cv
211.784 376.619 214.042 374.361 216.824 374.361 cv
219.606 374.361 221.864 376.619 221.864 379.401 cv
cp
0 0 0 rgb
@
220.904 379.401 mo
220.904 382.183 218.646 384.441 215.864 384.441 cv
213.082 384.441 210.824 382.183 210.824 379.401 cv
210.824 376.619 213.082 374.361 215.864 374.361 cv
218.646 374.361 220.904 376.619 220.904 379.401 cv
cp
1 1 1 rgb
ef
220.904 379.401 mo
220.904 382.183 218.646 384.441 215.864 384.441 cv
213.082 384.441 210.824 382.183 210.824 379.401 cv
210.824 376.619 213.082 374.361 215.864 374.361 cv
218.646 374.361 220.904 376.619 220.904 379.401 cv
cp
0 0 0 rgb
@
219.704 379.641 mo
219.704 382.423 217.446 384.681 214.664 384.681 cv
211.882 384.681 209.624 382.423 209.624 379.641 cv
209.624 376.859 211.882 374.601 214.664 374.601 cv
217.446 374.601 219.704 376.859 219.704 379.641 cv
cp
1 1 1 rgb
ef
219.704 379.641 mo
219.704 382.423 217.446 384.681 214.664 384.681 cv
211.882 384.681 209.624 382.423 209.624 379.641 cv
209.624 376.859 211.882 374.601 214.664 374.601 cv
217.446 374.601 219.704 376.859 219.704 379.641 cv
cp
0 0 0 rgb
@
218.264 379.881 mo
218.264 382.663 216.006 384.921 213.224 384.921 cv
210.442 384.921 208.184 382.663 208.184 379.881 cv
208.184 377.099 210.442 374.841 213.224 374.841 cv
216.006 374.841 218.264 377.099 218.264 379.881 cv
cp
1 1 1 rgb
ef
218.264 379.881 mo
218.264 382.663 216.006 384.921 213.224 384.921 cv
210.442 384.921 208.184 382.663 208.184 379.881 cv
208.184 377.099 210.442 374.841 213.224 374.841 cv
216.006 374.841 218.264 377.099 218.264 379.881 cv
cp
0 0 0 rgb
@
209.624 379.881 mo
209.624 382.663 207.366 384.921 204.584 384.921 cv
201.802 384.921 199.544 382.663 199.544 379.881 cv
199.544 377.099 201.802 374.841 204.584 374.841 cv
207.366 374.841 209.624 377.099 209.624 379.881 cv
cp
ef
209.624 379.881 mo
209.624 382.663 207.366 384.921 204.584 384.921 cv
201.802 384.921 199.544 382.663 199.544 379.881 cv
199.544 377.099 201.802 374.841 204.584 374.841 cv
207.366 374.841 209.624 377.099 209.624 379.881 cv
cp
@
207.944 379.401 mo
207.944 382.183 205.686 384.441 202.904 384.441 cv
200.122 384.441 197.864 382.183 197.864 379.401 cv
197.864 376.619 200.122 374.361 202.904 374.361 cv
205.686 374.361 207.944 376.619 207.944 379.401 cv
cp
ef
207.944 379.401 mo
207.944 382.183 205.686 384.441 202.904 384.441 cv
200.122 384.441 197.864 382.183 197.864 379.401 cv
197.864 376.619 200.122 374.361 202.904 374.361 cv
205.686 374.361 207.944 376.619 207.944 379.401 cv
cp
@
206.744 379.401 mo
206.744 382.183 204.486 384.441 201.704 384.441 cv
198.922 384.441 196.664 382.183 196.664 379.401 cv
196.664 376.619 198.922 374.361 201.704 374.361 cv
204.486 374.361 206.744 376.619 206.744 379.401 cv
cp
ef
206.744 379.401 mo
206.744 382.183 204.486 384.441 201.704 384.441 cv
198.922 384.441 196.664 382.183 196.664 379.401 cv
196.664 376.619 198.922 374.361 201.704 374.361 cv
204.486 374.361 206.744 376.619 206.744 379.401 cv
cp
@
205.784 379.401 mo
205.784 382.183 203.526 384.441 200.744 384.441 cv
197.962 384.441 195.704 382.183 195.704 379.401 cv
195.704 376.619 197.962 374.361 200.744 374.361 cv
203.526 374.361 205.784 376.619 205.784 379.401 cv
cp
ef
205.784 379.401 mo
205.784 382.183 203.526 384.441 200.744 384.441 cv
197.962 384.441 195.704 382.183 195.704 379.401 cv
195.704 376.619 197.962 374.361 200.744 374.361 cv
203.526 374.361 205.784 376.619 205.784 379.401 cv
cp
@
204.824 378.921 mo
204.824 381.703 202.566 383.961 199.784 383.961 cv
197.002 383.961 194.744 381.703 194.744 378.921 cv
194.744 376.139 197.002 373.881 199.784 373.881 cv
202.566 373.881 204.824 376.139 204.824 378.921 cv
cp
ef
204.824 378.921 mo
204.824 381.703 202.566 383.961 199.784 383.961 cv
197.002 383.961 194.744 381.703 194.744 378.921 cv
194.744 376.139 197.002 373.881 199.784 373.881 cv
202.566 373.881 204.824 376.139 204.824 378.921 cv
cp
@
203.864 378.681 mo
203.864 381.463 201.606 383.721 198.824 383.721 cv
196.042 383.721 193.784 381.463 193.784 378.681 cv
193.784 375.899 196.042 373.641 198.824 373.641 cv
201.606 373.641 203.864 375.899 203.864 378.681 cv
cp
ef
203.864 378.681 mo
203.864 381.463 201.606 383.721 198.824 383.721 cv
196.042 383.721 193.784 381.463 193.784 378.681 cv
193.784 375.899 196.042 373.641 198.824 373.641 cv
201.606 373.641 203.864 375.899 203.864 378.681 cv
cp
@
202.664 378.441 mo
202.664 381.223 200.406 383.481 197.624 383.481 cv
194.842 383.481 192.584 381.223 192.584 378.441 cv
192.584 375.659 194.842 373.401 197.624 373.401 cv
200.406 373.401 202.664 375.659 202.664 378.441 cv
cp
ef
202.664 378.441 mo
202.664 381.223 200.406 383.481 197.624 383.481 cv
194.842 383.481 192.584 381.223 192.584 378.441 cv
192.584 375.659 194.842 373.401 197.624 373.401 cv
200.406 373.401 202.664 375.659 202.664 378.441 cv
cp
@
201.704 378.441 mo
201.704 381.223 199.446 383.481 196.664 383.481 cv
193.882 383.481 191.624 381.223 191.624 378.441 cv
191.624 375.659 193.882 373.401 196.664 373.401 cv
199.446 373.401 201.704 375.659 201.704 378.441 cv
cp
ef
201.704 378.441 mo
201.704 381.223 199.446 383.481 196.664 383.481 cv
193.882 383.481 191.624 381.223 191.624 378.441 cv
191.624 375.659 193.882 373.401 196.664 373.401 cv
199.446 373.401 201.704 375.659 201.704 378.441 cv
cp
@
200.744 377.961 mo
200.744 380.743 198.486 383.001 195.704 383.001 cv
192.922 383.001 190.664 380.743 190.664 377.961 cv
190.664 375.179 192.922 372.921 195.704 372.921 cv
198.486 372.921 200.744 375.179 200.744 377.961 cv
cp
ef
200.744 377.961 mo
200.744 380.743 198.486 383.001 195.704 383.001 cv
192.922 383.001 190.664 380.743 190.664 377.961 cv
190.664 375.179 192.922 372.921 195.704 372.921 cv
198.486 372.921 200.744 375.179 200.744 377.961 cv
cp
@
218.207 370.28 mo
220.127 376.28 li
226.607 376.28 li
221.327 380.12 li
223.247 386.12 li
218.207 382.52 li
212.927 386.12 li
214.847 380.12 li
209.567 376.28 li
216.047 376.28 li
cp
1 1 1 rgb
ef
2.4 lw
218.207 370.28 mo
220.127 376.28 li
226.607 376.28 li
221.327 380.12 li
223.247 386.12 li
218.207 382.52 li
212.927 386.12 li
214.847 380.12 li
209.567 376.28 li
216.047 376.28 li
cp
0 0 0 rgb
@
192.527 368.36 mo
194.447 374.36 li
200.927 374.36 li
195.647 378.2 li
197.567 384.2 li
192.527 380.6 li
187.247 384.2 li
189.167 378.2 li
183.887 374.36 li
190.367 374.36 li
cp
1 1 1 rgb
ef
192.527 368.36 mo
194.447 374.36 li
200.927 374.36 li
195.647 378.2 li
197.567 384.2 li
192.527 380.6 li
187.247 384.2 li
189.167 378.2 li
183.887 374.36 li
190.367 374.36 li
cp
0 0 0 rgb
@
57.2066 440.243 mo
57.2066 438.122 57.2066 440.243 57.2066 438.122 cv
63.6876 438.122 57.2066 438.122 63.6876 438.122 cv
63.6876 440.243 63.6876 438.122 63.6876 440.243 cv
57.2066 440.243 63.6876 440.243 57.2066 440.243 cv
f
76.3066 432.427 mo
74.2086 432.591 76.3066 432.427 74.2086 432.591 cv
74.0216 431.763 73.7556 431.161 73.4116 430.786 cv
72.8416 430.185 72.1386 429.884 71.3026 429.884 cv
70.6306 429.884 70.0406 430.072 69.5326 430.447 cv
68.8686 430.931 68.3456 431.638 67.9626 432.568 cv
67.5796 433.497 67.3806 434.821 67.3656 436.54 cv
67.8726 435.767 68.4936 435.193 69.2286 434.818 cv
69.9626 434.443 70.7326 434.255 71.5366 434.255 cv
72.9436 434.255 74.1406 434.773 75.1286 435.808 cv
76.1176 436.843 76.6116 438.181 76.6116 439.822 cv
76.6116 440.9 76.3786 441.902 75.9136 442.827 cv
75.4496 443.753 74.8106 444.462 73.9976 444.954 cv
73.1856 445.447 72.2636 445.693 71.2326 445.693 cv
69.4746 445.693 68.0406 445.046 66.9316 443.753 cv
65.8216 442.46 65.2676 440.329 65.2676 437.361 cv
65.2676 434.04 65.8806 431.626 67.1076 430.118 cv
68.1776 428.806 69.6186 428.15 71.4316 428.15 cv
72.7826 428.15 73.8906 428.529 74.7536 429.286 cv
75.6176 430.044 76.1346 431.091 76.3066 432.427 cv
cp
67.6936 439.833 mo
67.6936 440.56 67.8476 441.255 68.1566 441.919 cv
68.4646 442.583 68.8966 443.089 69.4506 443.437 cv
70.0056 443.784 70.5876 443.958 71.1976 443.958 cv
72.0876 443.958 72.8536 443.599 73.4936 442.88 cv
74.1346 442.161 74.4546 441.185 74.4546 439.95 cv
74.4546 438.763 74.1386 437.827 73.5056 437.144 cv
72.8726 436.46 72.0756 436.118 71.1156 436.118 cv
70.1616 436.118 69.3536 436.46 68.6896 437.144 cv
68.0256 437.827 67.6936 438.724 67.6936 439.833 cv
f
105.927 440.243 mo
105.927 438.122 105.927 440.243 105.927 438.122 cv
112.408 438.122 105.927 438.122 112.408 438.122 cv
112.408 440.243 112.408 438.122 112.408 440.243 cv
105.927 440.243 112.408 440.243 105.927 440.243 cv
f
120.844 445.4 mo
120.844 441.287 120.844 445.4 120.844 441.287 cv
113.391 441.287 120.844 441.287 113.391 441.287 cv
113.391 439.353 113.391 441.287 113.391 439.353 cv
121.231 428.22 113.391 439.353 121.231 428.22 cv
122.953 428.22 121.231 428.22 122.953 428.22 cv
122.953 439.353 122.953 428.22 122.953 439.353 cv
125.274 439.353 122.953 439.353 125.274 439.353 cv
125.274 441.287 125.274 439.353 125.274 441.287 cv
122.953 441.287 125.274 441.287 122.953 441.287 cv
122.953 445.4 122.953 441.287 122.953 445.4 cv
120.844 445.4 122.953 445.4 120.844 445.4 cv
cp
120.844 439.353 mo
120.844 431.607 120.844 439.353 120.844 431.607 cv
115.465 439.353 120.844 431.607 115.465 439.353 cv
120.844 439.353 115.465 439.353 120.844 439.353 cv
f
154.648 440.243 mo
154.648 438.122 154.648 440.243 154.648 438.122 cv
161.129 438.122 154.648 438.122 161.129 438.122 cv
161.129 440.243 161.129 438.122 161.129 440.243 cv
154.648 440.243 161.129 440.243 154.648 440.243 cv
f
173.888 443.372 mo
173.888 445.399 173.888 443.372 173.888 445.399 cv
162.532 445.399 173.888 445.399 162.532 445.399 cv
162.517 444.892 162.599 444.403 162.779 443.934 cv
163.068 443.161 163.531 442.399 164.167 441.649 cv
164.804 440.899 165.724 440.032 166.927 439.048 cv
168.794 437.516 170.056 436.304 170.712 435.409 cv
171.368 434.515 171.697 433.669 171.697 432.872 cv
171.697 432.036 171.398 431.331 170.8 430.757 cv
170.202 430.183 169.423 429.895 168.462 429.895 cv
167.446 429.895 166.634 430.2 166.025 430.809 cv
165.415 431.419 165.107 432.263 165.099 433.341 cv
162.931 433.118 165.099 433.341 162.931 433.118 cv
163.079 431.501 163.638 430.268 164.607 429.421 cv
165.575 428.573 166.876 428.149 168.509 428.149 cv
170.158 428.149 171.462 428.606 172.423 429.52 cv
173.384 430.434 173.865 431.567 173.865 432.919 cv
173.865 433.606 173.724 434.282 173.443 434.946 cv
173.161 435.61 172.695 436.309 172.042 437.044 cv
171.39 437.778 170.306 438.786 168.79 440.067 cv
167.525 441.13 166.712 441.851 166.353 442.229 cv
165.993 442.608 165.697 442.989 165.462 443.372 cv
173.888 443.372 165.462 443.372 173.888 443.372 cv
f
207.923 436.927 mo
207.923 434.896 208.132 433.261 208.55 432.023 cv
208.968 430.784 209.589 429.829 210.413 429.157 cv
211.237 428.486 212.275 428.15 213.525 428.15 cv
214.447 428.15 215.255 428.335 215.95 428.706 cv
216.646 429.077 217.22 429.612 217.673 430.312 cv
218.126 431.011 218.482 431.862 218.739 432.866 cv
218.997 433.87 219.126 435.224 219.126 436.927 cv
219.126 438.943 218.919 440.57 218.505 441.808 cv
218.091 443.046 217.472 444.003 216.648 444.679 cv
215.824 445.355 214.782 445.693 213.525 445.693 cv
211.868 445.693 210.568 445.099 209.622 443.911 cv
208.489 442.482 207.923 440.154 207.923 436.927 cv
cp
210.091 436.927 mo
210.091 439.747 210.421 441.624 211.081 442.558 cv
211.741 443.491 212.556 443.958 213.525 443.958 cv
214.493 443.958 215.308 443.489 215.968 442.552 cv
216.628 441.614 216.958 439.739 216.958 436.927 cv
216.958 434.099 216.628 432.22 215.968 431.29 cv
215.308 430.361 214.486 429.896 213.501 429.896 cv
212.532 429.896 211.759 430.306 211.181 431.126 cv
210.454 432.173 210.091 434.107 210.091 436.927 cv
f
267.729 443.372 mo
267.729 445.399 267.729 443.372 267.729 445.399 cv
256.373 445.399 267.729 445.399 256.373 445.399 cv
256.358 444.892 256.44 444.403 256.62 443.934 cv
256.909 443.161 257.372 442.399 258.008 441.649 cv
258.645 440.899 259.565 440.032 260.768 439.048 cv
262.635 437.516 263.897 436.304 264.553 435.409 cv
265.209 434.515 265.538 433.669 265.538 432.872 cv
265.538 432.036 265.239 431.331 264.641 430.757 cv
264.043 430.183 263.264 429.895 262.303 429.895 cv
261.288 429.895 260.475 430.2 259.866 430.809 cv
259.256 431.419 258.948 432.263 258.94 433.341 cv
256.772 433.118 258.94 433.341 256.772 433.118 cv
256.92 431.501 257.479 430.268 258.448 429.421 cv
259.416 428.573 260.717 428.149 262.35 428.149 cv
263.999 428.149 265.303 428.606 266.264 429.52 cv
267.225 430.434 267.706 431.567 267.706 432.919 cv
267.706 433.606 267.565 434.282 267.284 434.946 cv
267.002 435.61 266.536 436.309 265.883 437.044 cv
265.231 437.778 264.147 438.786 262.631 440.067 cv
261.366 441.13 260.553 441.851 260.194 442.229 cv
259.834 442.608 259.538 442.989 259.303 443.372 cv
267.729 443.372 259.303 443.372 267.729 443.372 cv
f
312.125 445.4 mo
312.125 441.287 312.125 445.4 312.125 441.287 cv
304.672 441.287 312.125 441.287 304.672 441.287 cv
304.672 439.353 304.672 441.287 304.672 439.353 cv
312.512 428.22 304.672 439.353 312.512 428.22 cv
314.234 428.22 312.512 428.22 314.234 428.22 cv
314.234 439.353 314.234 428.22 314.234 439.353 cv
316.555 439.353 314.234 439.353 316.555 439.353 cv
316.555 441.287 316.555 439.353 316.555 441.287 cv
314.234 441.287 316.555 441.287 314.234 441.287 cv
314.234 445.4 314.234 441.287 314.234 445.4 cv
312.125 445.4 314.234 445.4 312.125 445.4 cv
cp
312.125 439.353 mo
312.125 431.607 312.125 439.353 312.125 431.607 cv
306.746 439.353 312.125 431.607 306.746 439.353 cv
312.125 439.353 306.746 439.353 312.125 439.353 cv
f
365.03 432.427 mo
362.932 432.591 365.03 432.427 362.932 432.591 cv
362.745 431.763 362.479 431.161 362.135 430.786 cv
361.565 430.185 360.862 429.884 360.026 429.884 cv
359.354 429.884 358.764 430.072 358.256 430.447 cv
357.592 430.931 357.069 431.638 356.686 432.568 cv
356.303 433.497 356.104 434.821 356.089 436.54 cv
356.596 435.767 357.217 435.193 357.952 434.818 cv
358.686 434.443 359.456 434.255 360.26 434.255 cv
361.667 434.255 362.864 434.773 363.852 435.808 cv
364.841 436.843 365.335 438.181 365.335 439.822 cv
365.335 440.9 365.102 441.902 364.637 442.827 cv
364.173 443.753 363.534 444.462 362.721 444.954 cv
361.909 445.447 360.987 445.693 359.956 445.693 cv
358.198 445.693 356.764 445.046 355.655 443.753 cv
354.545 442.46 353.991 440.329 353.991 437.361 cv
353.991 434.04 354.604 431.626 355.831 430.118 cv
356.901 428.806 358.342 428.15 360.155 428.15 cv
361.506 428.15 362.614 428.529 363.477 429.286 cv
364.341 430.044 364.858 431.091 365.03 432.427 cv
cp
356.417 439.833 mo
356.417 440.56 356.571 441.255 356.88 441.919 cv
357.188 442.583 357.62 443.089 358.174 443.437 cv
358.729 443.784 359.311 443.958 359.921 443.958 cv
360.811 443.958 361.577 443.599 362.217 442.88 cv
362.858 442.161 363.178 441.185 363.178 439.95 cv
363.178 438.763 362.862 437.827 362.229 437.144 cv
361.596 436.46 360.8 436.118 359.839 436.118 cv
358.885 436.118 358.077 436.46 357.413 437.144 cv
356.749 437.827 356.417 438.724 356.417 439.833 cv
f
37.7666 380.003 mo
37.7666 377.882 37.7666 380.003 37.7666 377.882 cv
44.2476 377.882 37.7666 377.882 44.2476 377.882 cv
44.2476 380.003 44.2476 377.882 44.2476 380.003 cv
37.7666 380.003 44.2476 380.003 37.7666 380.003 cv
f
56.8666 372.187 mo
54.7686 372.351 56.8666 372.187 54.7686 372.351 cv
54.5816 371.523 54.3156 370.921 53.9716 370.546 cv
53.4016 369.945 52.6986 369.644 51.8626 369.644 cv
51.1906 369.644 50.6006 369.832 50.0926 370.207 cv
49.4286 370.691 48.9056 371.398 48.5226 372.328 cv
48.1396 373.257 47.9406 374.581 47.9256 376.3 cv
48.4326 375.527 49.0536 374.953 49.7886 374.578 cv
50.5226 374.203 51.2926 374.015 52.0966 374.015 cv
53.5036 374.015 54.7006 374.533 55.6886 375.568 cv
56.6776 376.603 57.1716 377.941 57.1716 379.582 cv
57.1716 380.66 56.9386 381.662 56.4736 382.587 cv
56.0096 383.513 55.3706 384.222 54.5576 384.714 cv
53.7456 385.207 52.8236 385.453 51.7926 385.453 cv
50.0346 385.453 48.6006 384.806 47.4916 383.513 cv
46.3816 382.22 45.8276 380.089 45.8276 377.121 cv
45.8276 373.8 46.4406 371.386 47.6676 369.878 cv
48.7376 368.566 50.1786 367.91 51.9916 367.91 cv
53.3426 367.91 54.4506 368.289 55.3136 369.046 cv
56.1776 369.804 56.6946 370.851 56.8666 372.187 cv
cp
48.2536 379.593 mo
48.2536 380.32 48.4076 381.015 48.7166 381.679 cv
49.0246 382.343 49.4566 382.849 50.0106 383.197 cv
50.5656 383.544 51.1476 383.718 51.7576 383.718 cv
52.6476 383.718 53.4136 383.359 54.0536 382.64 cv
54.6946 381.921 55.0146 380.945 55.0146 379.71 cv
55.0146 378.523 54.6986 377.587 54.0656 376.904 cv
53.4326 376.22 52.6356 375.878 51.6756 375.878 cv
50.7216 375.878 49.9136 376.22 49.2496 376.904 cv
48.5856 377.587 48.2536 378.484 48.2536 379.593 cv
f
37.7666 340.643 mo
37.7666 338.522 37.7666 340.643 37.7666 338.522 cv
44.2476 338.522 37.7666 338.522 44.2476 338.522 cv
44.2476 340.643 44.2476 338.522 44.2476 340.643 cv
37.7666 340.643 44.2476 340.643 37.7666 340.643 cv
f
52.6826 345.8 mo
52.6826 341.687 52.6826 345.8 52.6826 341.687 cv
45.2296 341.687 52.6826 341.687 45.2296 341.687 cv
45.2296 339.753 45.2296 341.687 45.2296 339.753 cv
53.0696 328.62 45.2296 339.753 53.0696 328.62 cv
54.7916 328.62 53.0696 328.62 54.7916 328.62 cv
54.7916 339.753 54.7916 328.62 54.7916 339.753 cv
57.1126 339.753 54.7916 339.753 57.1126 339.753 cv
57.1126 341.687 57.1126 339.753 57.1126 341.687 cv
54.7916 341.687 57.1126 341.687 54.7916 341.687 cv
54.7916 345.8 54.7916 341.687 54.7916 345.8 cv
52.6826 345.8 54.7916 345.8 52.6826 345.8 cv
cp
52.6826 339.753 mo
52.6826 332.007 52.6826 339.753 52.6826 332.007 cv
47.3036 339.753 52.6826 332.007 47.3036 339.753 cv
52.6826 339.753 47.3036 339.753 52.6826 339.753 cv
f
37.7666 301.043 mo
37.7666 298.922 37.7666 301.043 37.7666 298.922 cv
44.2476 298.922 37.7666 298.922 44.2476 298.922 cv
44.2476 301.043 44.2476 298.922 44.2476 301.043 cv
37.7666 301.043 44.2476 301.043 37.7666 301.043 cv
f
57.0066 304.172 mo
57.0066 306.199 57.0066 304.172 57.0066 306.199 cv
45.6506 306.199 57.0066 306.199 45.6506 306.199 cv
45.6356 305.692 45.7176 305.203 45.8976 304.734 cv
46.1866 303.961 46.6496 303.199 47.2856 302.449 cv
47.9226 301.699 48.8426 300.832 50.0456 299.848 cv
51.9126 298.316 53.1746 297.104 53.8306 296.209 cv
54.4866 295.315 54.8156 294.469 54.8156 293.672 cv
54.8156 292.836 54.5166 292.131 53.9186 291.557 cv
53.3206 290.983 52.5416 290.695 51.5806 290.695 cv
50.5656 290.695 49.7526 291 49.1436 291.609 cv
48.5336 292.219 48.2256 293.063 48.2176 294.141 cv
46.0496 293.918 48.2176 294.141 46.0496 293.918 cv
46.1976 292.301 46.7566 291.068 47.7256 290.221 cv
48.6936 289.373 49.9946 288.949 51.6276 288.949 cv
53.2766 288.949 54.5806 289.406 55.5416 290.32 cv
56.5026 291.234 56.9836 292.367 56.9836 293.719 cv
56.9836 294.406 56.8426 295.082 56.5616 295.746 cv
56.2796 296.41 55.8136 297.109 55.1606 297.844 cv
54.5086 298.578 53.4246 299.586 51.9086 300.867 cv
50.6436 301.93 49.8306 302.651 49.4716 303.029 cv
49.1116 303.408 48.8156 303.789 48.5806 304.172 cv
57.0066 304.172 48.5806 304.172 57.0066 304.172 cv
f
45.9206 258.367 mo
45.9206 256.336 46.1296 254.701 46.5476 253.463 cv
46.9656 252.224 47.5866 251.269 48.4106 250.597 cv
49.2346 249.926 50.2726 249.59 51.5226 249.59 cv
52.4446 249.59 53.2526 249.775 53.9476 250.146 cv
54.6436 250.517 55.2176 251.052 55.6706 251.752 cv
56.1236 252.451 56.4796 253.303 56.7366 254.306 cv
56.9946 255.31 57.1236 256.664 57.1236 258.367 cv
57.1236 260.383 56.9166 262.01 56.5026 263.248 cv
56.0886 264.486 55.4696 265.443 54.6456 266.119 cv
53.8216 266.795 52.7796 267.133 51.5226 267.133 cv
49.8656 267.133 48.5656 266.539 47.6196 265.351 cv
46.4866 263.922 45.9206 261.594 45.9206 258.367 cv
cp
48.0886 258.367 mo
48.0886 261.187 48.4186 263.064 49.0786 263.998 cv
49.7386 264.931 50.5536 265.398 51.5226 265.398 cv
52.4906 265.398 53.3056 264.929 53.9656 263.992 cv
54.6256 263.054 54.9556 261.179 54.9556 258.367 cv
54.9556 255.539 54.6256 253.66 53.9656 252.73 cv
53.3056 251.801 52.4836 251.336 51.4986 251.336 cv
50.5296 251.336 49.7566 251.746 49.1786 252.566 cv
48.4516 253.613 48.0886 255.547 48.0886 258.367 cv
f
57.0066 225.452 mo
57.0066 227.479 57.0066 225.452 57.0066 227.479 cv
45.6506 227.479 57.0066 227.479 45.6506 227.479 cv
45.6356 226.972 45.7176 226.483 45.8976 226.014 cv
46.1866 225.241 46.6496 224.479 47.2856 223.729 cv
47.9226 222.979 48.8426 222.112 50.0456 221.128 cv
51.9126 219.597 53.1746 218.384 53.8306 217.489 cv
54.4866 216.595 54.8156 215.749 54.8156 214.952 cv
54.8156 214.116 54.5166 213.411 53.9186 212.837 cv
53.3206 212.263 52.5416 211.975 51.5806 211.975 cv
50.5646 211.975 49.7526 212.28 49.1436 212.889 cv
48.5336 213.499 48.2256 214.343 48.2176 215.421 cv
46.0496 215.198 48.2176 215.421 46.0496 215.198 cv
46.1976 213.581 46.7566 212.348 47.7256 211.501 cv
48.6936 210.653 49.9946 210.229 51.6276 210.229 cv
53.2766 210.229 54.5806 210.686 55.5416 211.6 cv
56.5026 212.514 56.9836 213.647 56.9836 214.999 cv
56.9836 215.686 56.8426 216.362 56.5616 217.026 cv
56.2796 217.69 55.8136 218.389 55.1606 219.124 cv
54.5086 219.858 53.4246 220.866 51.9086 222.147 cv
50.6436 223.21 49.8306 223.931 49.4716 224.309 cv
49.1116 224.688 48.8156 225.069 48.5806 225.452 cv
57.0066 225.452 48.5806 225.452 57.0066 225.452 cv
f
52.6826 188.12 mo
52.6826 184.007 52.6826 188.12 52.6826 184.007 cv
45.2296 184.007 52.6826 184.007 45.2296 184.007 cv
45.2296 182.073 45.2296 184.007 45.2296 182.073 cv
53.0696 170.94 45.2296 182.073 53.0696 170.94 cv
54.7916 170.94 53.0696 170.94 54.7916 170.94 cv
54.7916 182.073 54.7916 170.94 54.7916 182.073 cv
57.1126 182.073 54.7916 182.073 57.1126 182.073 cv
57.1126 184.007 57.1126 182.073 57.1126 184.007 cv
54.7916 184.007 57.1126 184.007 54.7916 184.007 cv
54.7916 188.12 54.7916 184.007 54.7916 188.12 cv
52.6826 188.12 54.7916 188.12 52.6826 188.12 cv
cp
52.6826 182.073 mo
52.6826 174.327 52.6826 182.073 52.6826 174.327 cv
47.3036 182.073 52.6826 174.327 47.3036 182.073 cv
52.6826 182.073 47.3036 182.073 52.6826 182.073 cv
f
56.8666 135.787 mo
54.7686 135.951 56.8666 135.787 54.7686 135.951 cv
54.5816 135.123 54.3156 134.521 53.9716 134.146 cv
53.4016 133.545 52.6986 133.244 51.8626 133.244 cv
51.1906 133.244 50.6006 133.432 50.0926 133.807 cv
49.4286 134.291 48.9056 134.998 48.5226 135.928 cv
48.1396 136.857 47.9406 138.182 47.9256 139.9 cv
48.4326 139.127 49.0536 138.553 49.7886 138.178 cv
50.5226 137.803 51.2926 137.615 52.0966 137.615 cv
53.5036 137.615 54.7006 138.133 55.6886 139.168 cv
56.6766 140.203 57.1716 141.541 57.1716 143.182 cv
57.1716 144.26 56.9386 145.262 56.4736 146.187 cv
56.0096 147.113 55.3706 147.822 54.5576 148.314 cv
53.7456 148.807 52.8236 149.053 51.7926 149.053 cv
50.0346 149.053 48.6006 148.406 47.4916 147.113 cv
46.3816 145.82 45.8276 143.689 45.8276 140.721 cv
45.8276 137.4 46.4406 134.986 47.6676 133.478 cv
48.7376 132.166 50.1786 131.51 51.9916 131.51 cv
53.3426 131.51 54.4506 131.889 55.3136 132.646 cv
56.1776 133.404 56.6946 134.451 56.8666 135.787 cv
cp
48.2536 143.193 mo
48.2536 143.92 48.4076 144.615 48.7166 145.279 cv
49.0246 145.943 49.4566 146.449 50.0106 146.797 cv
50.5656 147.144 51.1476 147.318 51.7576 147.318 cv
52.6476 147.318 53.4136 146.959 54.0536 146.24 cv
54.6946 145.521 55.0146 144.545 55.0146 143.31 cv
55.0146 142.123 54.6986 141.187 54.0656 140.504 cv
53.4326 139.82 52.6356 139.478 51.6756 139.478 cv
50.7216 139.478 49.9136 139.82 49.2496 140.504 cv
48.5856 141.187 48.2536 142.084 48.2536 143.193 cv
f
49.1666 99.8434 mo
48.2916 99.5235 47.6436 99.0665 47.2216 98.4725 cv
46.7996 97.8784 46.5886 97.1674 46.5886 96.3394 cv
46.5886 95.0894 47.0376 94.0385 47.9366 93.1875 cv
48.8346 92.3354 50.0296 91.9095 51.5216 91.9095 cv
53.0216 91.9095 54.2296 92.3455 55.1436 93.2165 cv
56.0576 94.0875 56.5146 95.1485 56.5146 96.3985 cv
56.5146 97.1955 56.3056 97.8885 55.8876 98.4785 cv
55.4696 99.0685 54.8346 99.5235 53.9826 99.8434 cv
55.0376 100.187 55.8406 100.741 56.3916 101.507 cv
56.9416 102.273 57.2176 103.187 57.2176 104.249 cv
57.2176 105.718 56.6976 106.952 55.6586 107.952 cv
54.6196 108.952 53.2526 109.452 51.5576 109.452 cv
49.8616 109.452 48.4946 108.95 47.4556 107.947 cv
46.4166 106.943 45.8966 105.691 45.8966 104.191 cv
45.8966 103.073 46.1806 102.138 46.7466 101.384 cv
47.3126 100.63 48.1196 100.116 49.1666 99.8434 cv
cp
48.7446 96.2695 mo
48.7446 97.0815 49.0066 97.7455 49.5296 98.2615 cv
50.0536 98.7775 50.7326 99.0345 51.5686 99.0345 cv
52.3816 99.0345 53.0476 98.7794 53.5666 98.2675 cv
54.0866 97.7555 54.3466 97.1284 54.3466 96.3865 cv
54.3466 95.6135 54.0786 94.9625 53.5436 94.4355 cv
53.0086 93.9075 52.3426 93.6445 51.5456 93.6445 cv
50.7406 93.6445 50.0726 93.9025 49.5416 94.4174 cv
49.0106 94.9335 48.7446 95.5504 48.7446 96.2695 cv
cp
48.0646 104.202 mo
48.0646 104.804 48.2076 105.386 48.4926 105.948 cv
48.7776 106.511 49.2016 106.947 49.7646 107.255 cv
50.3266 107.564 50.9326 107.718 51.5806 107.718 cv
52.5886 107.718 53.4206 107.394 54.0766 106.745 cv
54.7326 106.097 55.0616 105.273 55.0616 104.273 cv
55.0616 103.257 54.7236 102.417 54.0476 101.753 cv
53.3716 101.089 52.5256 100.757 51.5106 100.757 cv
50.5186 100.757 49.6956 101.085 49.0436 101.741 cv
48.3916 102.398 48.0646 103.218 48.0646 104.202 cv
f
40.4266 69.8004 mo
38.3176 69.8004 40.4266 69.8004 38.3176 69.8004 cv
38.3176 56.3595 38.3176 69.8004 38.3176 56.3595 cv
37.8096 56.8435 37.1436 57.3275 36.3196 57.8125 cv
35.4946 58.2964 34.7546 58.6595 34.0986 58.9025 cv
34.0986 56.8625 34.0986 58.9025 34.0986 56.8625 cv
35.2786 56.3085 36.3096 55.6365 37.1926 54.8475 cv
38.0746 54.0585 38.6996 53.2924 39.0676 52.5504 cv
40.4266 52.5504 39.0676 52.5504 40.4266 52.5504 cv
40.4266 69.8004 40.4266 52.5504 40.4266 69.8004 cv
f
45.9206 61.3275 mo
45.9206 59.2965 46.1296 57.6615 46.5476 56.4235 cv
46.9656 55.1845 47.5866 54.2295 48.4106 53.5575 cv
49.2346 52.8865 50.2726 52.5505 51.5226 52.5505 cv
52.4446 52.5505 53.2526 52.7355 53.9476 53.1065 cv
54.6436 53.4775 55.2176 54.0125 55.6706 54.7125 cv
56.1236 55.4115 56.4796 56.2625 56.7376 57.2665 cv
56.9946 58.2705 57.1236 59.6245 57.1236 61.3275 cv
57.1236 63.3435 56.9166 64.9705 56.5026 66.2085 cv
56.0886 67.4465 55.4696 68.4035 54.6456 69.0795 cv
53.8216 69.7555 52.7796 70.0935 51.5226 70.0935 cv
49.8656 70.0935 48.5656 69.4995 47.6196 68.3115 cv
46.4866 66.8825 45.9206 64.5545 45.9206 61.3275 cv
cp
48.0886 61.3275 mo
48.0886 64.1475 48.4186 66.0245 49.0786 66.9585 cv
49.7386 67.8915 50.5536 68.3585 51.5226 68.3585 cv
52.4906 68.3585 53.3056 67.8895 53.9656 66.9525 cv
54.6256 66.0145 54.9556 64.1395 54.9556 61.3275 cv
54.9556 58.4995 54.6256 56.6205 53.9656 55.6905 cv
53.3056 54.7615 52.4836 54.2965 51.4986 54.2965 cv
50.5296 54.2965 49.7566 54.7065 49.1786 55.5265 cv
48.4516 56.5735 48.0886 58.5075 48.0886 61.3275 cv
f
40.4266 30.4405 mo
38.3176 30.4405 40.4266 30.4405 38.3176 30.4405 cv
38.3176 16.9995 38.3176 30.4405 38.3176 16.9995 cv
37.8096 17.4835 37.1436 17.9675 36.3196 18.4525 cv
35.4946 18.9365 34.7546 19.2995 34.0986 19.5425 cv
34.0986 17.5025 34.0986 19.5425 34.0986 17.5025 cv
35.2786 16.9485 36.3096 16.2765 37.1926 15.4875 cv
38.0746 14.6985 38.6996 13.9325 39.0676 13.1905 cv
40.4266 13.1905 39.0676 13.1905 40.4266 13.1905 cv
40.4266 30.4405 40.4266 13.1905 40.4266 30.4405 cv
f
57.0066 28.4124 mo
57.0066 30.4395 57.0066 28.4124 57.0066 30.4395 cv
45.6506 30.4395 57.0066 30.4395 45.6506 30.4395 cv
45.6356 29.9325 45.7176 29.4435 45.8976 28.9745 cv
46.1866 28.2014 46.6496 27.4395 47.2856 26.6895 cv
47.9226 25.9395 48.8426 25.0724 50.0456 24.0885 cv
51.9126 22.5575 53.1746 21.3445 53.8306 20.4495 cv
54.4866 19.5555 54.8156 18.7095 54.8156 17.9124 cv
54.8156 17.0764 54.5166 16.3715 53.9186 15.7975 cv
53.3206 15.2234 52.5416 14.9355 51.5806 14.9355 cv
50.5656 14.9355 49.7526 15.2404 49.1436 15.8495 cv
48.5336 16.4595 48.2256 17.3035 48.2176 18.3815 cv
46.0496 18.1584 48.2176 18.3815 46.0496 18.1584 cv
46.1976 16.5415 46.7566 15.3085 47.7256 14.4615 cv
48.6936 13.6135 49.9946 13.1895 51.6276 13.1895 cv
53.2766 13.1895 54.5806 13.6465 55.5416 14.5605 cv
56.5026 15.4745 56.9836 16.6075 56.9836 17.9595 cv
56.9836 18.6465 56.8426 19.3224 56.5616 19.9865 cv
56.2796 20.6505 55.8136 21.3495 55.1606 22.0845 cv
54.5086 22.8185 53.4246 23.8264 51.9086 25.1075 cv
50.6436 26.1705 49.8306 26.8914 49.4716 27.2695 cv
49.1116 27.6485 48.8156 28.0294 48.5806 28.4124 cv
57.0066 28.4124 48.5806 28.4124 57.0066 28.4124 cv
f
1.68 lw
67.2446 417.8 mo
67.2446 409.64 li
@
91.7246 417.8 mo
91.7246 413.72 li
@
115.965 417.8 mo
115.965 409.64 li
@
140.445 417.8 mo
140.445 413.72 li
@
164.685 417.8 mo
164.685 409.64 li
@
189.165 417.8 mo
189.165 413.72 li
@
213.645 417.8 mo
213.645 409.64 li
@
237.885 417.8 mo
237.885 413.72 li
@
262.365 417.8 mo
262.365 409.64 li
@
286.605 417.8 mo
286.605 413.72 li
@
311.085 417.8 mo
311.085 409.64 li
@
335.325 417.8 mo
335.325 413.72 li
@
359.805 417.8 mo
359.805 409.64 li
@
67.2416 417.8 mo
359.805 417.8 li
@
67.2416 417.8 mo
75.4016 417.8 li
@
67.2416 398.12 mo
71.3216 398.12 li
@
67.2416 378.44 mo
75.4016 378.44 li
@
67.2416 358.76 mo
71.3216 358.76 li
@
67.2416 339.08 mo
75.4016 339.08 li
@
67.2416 319.4 mo
71.3216 319.4 li
@
67.2416 299.48 mo
75.4016 299.48 li
@
67.2416 279.8 mo
71.3216 279.8 li
@
67.2416 260.12 mo
75.4016 260.12 li
@
67.2416 240.44 mo
71.3216 240.44 li
@
67.2416 220.76 mo
75.4016 220.76 li
@
67.2416 201.08 mo
71.3216 201.08 li
@
67.2416 181.4 mo
75.4016 181.4 li
@
67.2416 161.72 mo
71.3216 161.72 li
@
67.2416 142.04 mo
75.4016 142.04 li
@
67.2416 122.361 mo
71.3216 122.361 li
@
67.2416 102.44 mo
75.4016 102.44 li
@
67.2416 82.7605 mo
71.3216 82.7605 li
@
67.2416 63.0805 mo
75.4016 63.0805 li
@
67.2416 43.4005 mo
71.3216 43.4005 li
@
67.2416 23.7205 mo
75.4016 23.7205 li
@
67.2416 417.801 mo
67.2416 4.0405 li
@
16.9526 268.786 mo
15.0226 268.786 16.9526 268.786 15.0226 268.786 cv
15.0226 262.889 15.0226 268.786 15.0226 262.889 cv
16.9526 262.889 15.0226 262.889 16.9526 262.889 cv
16.9526 268.786 16.9526 262.889 16.9526 268.786 cv
f
156.739 469.029 mo
156.739 467.098 156.739 469.029 156.739 467.098 cv
162.636 467.098 156.739 467.098 162.636 467.098 cv
162.636 469.029 162.636 467.098 162.636 469.029 cv
156.739 469.029 162.636 469.029 156.739 469.029 cv
f
170.974 473.72 mo
170.974 458.086 170.974 473.72 170.974 458.086 cv
182.278 458.086 170.974 458.086 182.278 458.086 cv
182.278 459.931 182.278 458.086 182.278 459.931 cv
173.043 459.931 182.278 459.931 173.043 459.931 cv
173.043 464.72 173.043 459.931 173.043 464.72 cv
181.691 464.72 173.043 464.72 181.691 464.72 cv
181.691 466.555 181.691 464.72 181.691 466.555 cv
173.043 466.555 181.691 466.555 173.043 466.555 cv
173.043 471.875 173.043 466.555 173.043 471.875 cv
182.641 471.875 173.043 471.875 182.641 471.875 cv
182.641 473.72 182.641 471.875 182.641 473.72 cv
170.974 473.72 182.641 473.72 170.974 473.72 cv
f
192.716 472.323 mo
192.005 472.927 191.321 473.354 190.663 473.603 cv
190.005 473.852 189.3 473.977 188.546 473.977 cv
187.302 473.977 186.346 473.672 185.678 473.064 cv
185.009 472.456 184.675 471.68 184.675 470.734 cv
184.675 470.18 184.801 469.673 185.054 469.215 cv
185.306 468.757 185.637 468.388 186.046 468.111 cv
186.454 467.833 186.915 467.624 187.427 467.482 cv
187.803 467.383 188.372 467.286 189.133 467.194 cv
190.683 467.009 191.824 466.788 192.556 466.533 cv
192.563 466.27 192.567 466.103 192.567 466.031 cv
192.567 465.249 192.385 464.698 192.023 464.378 cv
191.532 463.945 190.804 463.728 189.837 463.728 cv
188.934 463.728 188.267 463.887 187.837 464.202 cv
187.407 464.52 187.089 465.079 186.883 465.883 cv
185.006 465.626 186.883 465.883 185.006 465.626 cv
185.176 464.823 185.457 464.174 185.848 463.68 cv
186.239 463.186 186.805 462.805 187.544 462.539 cv
188.283 462.272 189.14 462.139 190.114 462.139 cv
191.081 462.139 191.866 462.253 192.471 462.48 cv
193.075 462.708 193.519 462.995 193.804 463.34 cv
194.088 463.684 194.287 464.12 194.401 464.646 cv
194.465 464.973 194.497 465.563 194.497 466.415 cv
194.497 468.974 194.497 466.415 194.497 468.974 cv
194.497 470.759 194.538 471.888 194.62 472.361 cv
194.701 472.833 194.863 473.286 195.105 473.72 cv
193.1 473.72 195.105 473.72 193.1 473.72 cv
192.901 473.322 192.773 472.857 192.716 472.323 cv
cp
192.556 468.036 mo
191.859 468.32 190.814 468.563 189.421 468.762 cv
188.632 468.875 188.074 469.003 187.746 469.146 cv
187.419 469.288 187.167 469.495 186.989 469.77 cv
186.812 470.043 186.723 470.348 186.723 470.681 cv
186.723 471.193 186.917 471.62 187.304 471.96 cv
187.691 472.302 188.258 472.473 189.005 472.473 cv
189.744 472.473 190.402 472.311 190.978 471.987 cv
191.554 471.664 191.977 471.221 192.247 470.659 cv
192.453 470.227 192.556 469.586 192.556 468.741 cv
192.556 468.036 192.556 468.741 192.556 468.036 cv
f
196.798 470.339 mo
198.696 470.04 196.798 470.339 198.696 470.04 cv
198.803 470.801 199.1 471.384 199.587 471.789 cv
200.074 472.195 200.754 472.397 201.629 472.397 cv
202.51 472.397 203.165 472.219 203.591 471.859 cv
204.018 471.5 204.231 471.078 204.231 470.595 cv
204.231 470.161 204.042 469.82 203.666 469.572 cv
203.403 469.401 202.749 469.184 201.704 468.921 cv
200.296 468.565 199.32 468.258 198.776 467.999 cv
198.232 467.74 197.82 467.38 197.539 466.921 cv
197.258 466.464 197.118 465.956 197.118 465.402 cv
197.118 464.897 197.233 464.43 197.465 463.999 cv
197.696 463.569 198.01 463.212 198.408 462.927 cv
198.707 462.707 199.114 462.521 199.629 462.368 cv
200.145 462.215 200.698 462.138 201.288 462.138 cv
202.176 462.138 202.957 462.266 203.628 462.522 cv
204.3 462.779 204.796 463.125 205.116 463.563 cv
205.436 463.999 205.656 464.585 205.777 465.316 cv
203.9 465.572 205.777 465.316 203.9 465.572 cv
203.815 464.99 203.568 464.534 203.159 464.207 cv
202.75 463.88 202.173 463.717 201.426 463.717 cv
200.545 463.717 199.915 463.862 199.539 464.154 cv
199.162 464.445 198.973 464.788 198.973 465.178 cv
198.973 465.426 199.052 465.65 199.208 465.849 cv
199.365 466.056 199.61 466.227 199.944 466.361 cv
200.136 466.432 200.701 466.596 201.64 466.852 cv
202.997 467.214 203.945 467.512 204.482 467.742 cv
205.018 467.973 205.439 468.309 205.745 468.75 cv
206.051 469.191 206.204 469.738 206.204 470.392 cv
206.204 471.033 206.017 471.635 205.644 472.201 cv
205.271 472.766 204.732 473.202 204.028 473.512 cv
203.324 473.822 202.528 473.975 201.64 473.975 cv
200.168 473.975 199.046 473.671 198.275 473.059 cv
197.504 472.447 197.011 471.542 196.798 470.339 cv
f
212.797 472.003 mo
213.074 473.699 212.797 472.003 213.074 473.699 cv
212.534 473.813 212.051 473.87 211.624 473.87 cv
210.927 473.87 210.387 473.759 210.003 473.539 cv
209.619 473.318 209.349 473.029 209.193 472.671 cv
209.036 472.31 208.958 471.555 208.958 470.404 cv
208.958 463.888 208.958 470.404 208.958 463.888 cv
207.55 463.888 208.958 463.888 207.55 463.888 cv
207.55 462.396 207.55 463.888 207.55 462.396 cv
208.958 462.396 207.55 462.396 208.958 462.396 cv
208.958 459.59 208.958 462.396 208.958 459.59 cv
210.867 458.439 208.958 459.59 210.867 458.439 cv
210.867 462.396 210.867 458.439 210.867 462.396 cv
212.797 462.396 210.867 462.396 212.797 462.396 cv
212.797 463.888 212.797 462.396 212.797 463.888 cv
210.867 463.888 212.797 463.888 210.867 463.888 cv
210.867 470.51 210.867 463.888 210.867 470.51 cv
210.867 471.057 210.901 471.409 210.968 471.566 cv
211.036 471.723 211.146 471.848 211.299 471.939 cv
211.452 472.031 211.67 472.078 211.955 472.078 cv
212.168 472.078 212.449 472.053 212.797 472.003 cv
f
215.107 473.72 mo
215.107 471.534 215.107 473.72 215.107 471.534 cv
217.293 471.534 215.107 471.534 217.293 471.534 cv
217.293 473.72 217.293 471.534 217.293 473.72 cv
217.293 474.523 217.151 475.172 216.867 475.667 cv
216.582 476.16 216.131 476.542 215.512 476.814 cv
214.979 475.991 215.512 476.814 214.979 475.991 cv
215.384 475.814 215.683 475.552 215.875 475.208 cv
216.067 474.863 216.173 474.367 216.195 473.72 cv
215.107 473.72 216.195 473.72 215.107 473.72 cv
f
233.997 472.323 mo
233.286 472.927 232.602 473.354 231.944 473.603 cv
231.286 473.852 230.581 473.977 229.827 473.977 cv
228.583 473.977 227.627 473.672 226.959 473.064 cv
226.29 472.456 225.956 471.68 225.956 470.734 cv
225.956 470.18 226.082 469.673 226.335 469.215 cv
226.587 468.757 226.918 468.388 227.327 468.111 cv
227.735 467.833 228.196 467.624 228.708 467.482 cv
229.084 467.383 229.653 467.286 230.414 467.194 cv
231.964 467.009 233.105 466.788 233.837 466.533 cv
233.844 466.27 233.848 466.103 233.848 466.031 cv
233.848 465.249 233.666 464.698 233.304 464.378 cv
232.813 463.945 232.085 463.728 231.118 463.728 cv
230.215 463.728 229.548 463.887 229.118 464.202 cv
228.688 464.52 228.37 465.079 228.164 465.883 cv
226.287 465.626 228.164 465.883 226.287 465.626 cv
226.457 464.823 226.738 464.174 227.129 463.68 cv
227.52 463.186 228.086 462.805 228.825 462.539 cv
229.564 462.272 230.421 462.139 231.395 462.139 cv
232.362 462.139 233.147 462.253 233.752 462.48 cv
234.356 462.708 234.8 462.995 235.085 463.34 cv
235.369 463.684 235.568 464.12 235.682 464.646 cv
235.746 464.973 235.778 465.563 235.778 466.415 cv
235.778 468.974 235.778 466.415 235.778 468.974 cv
235.778 470.759 235.819 471.888 235.901 472.361 cv
235.982 472.833 236.144 473.286 236.386 473.72 cv
234.381 473.72 236.386 473.72 234.381 473.72 cv
234.182 473.322 234.054 472.857 233.997 472.323 cv
cp
233.837 468.036 mo
233.14 468.32 232.095 468.563 230.702 468.762 cv
229.913 468.875 229.355 469.003 229.027 469.146 cv
228.7 469.288 228.448 469.495 228.27 469.77 cv
228.093 470.043 228.004 470.348 228.004 470.681 cv
228.004 471.193 228.198 471.62 228.585 471.96 cv
228.972 472.302 229.539 472.473 230.286 472.473 cv
231.025 472.473 231.683 472.311 232.259 471.987 cv
232.835 471.664 233.258 471.221 233.528 470.659 cv
233.734 470.227 233.837 469.586 233.837 468.741 cv
233.837 468.036 233.837 468.741 233.837 468.036 cv
f
238.825 473.72 mo
238.825 462.396 238.825 473.72 238.825 462.396 cv
240.553 462.396 238.825 462.396 240.553 462.396 cv
240.553 464.112 240.553 462.396 240.553 464.112 cv
240.993 463.309 241.4 462.779 241.774 462.523 cv
242.147 462.267 242.557 462.139 243.005 462.139 cv
243.652 462.139 244.31 462.345 244.978 462.758 cv
244.317 464.538 244.978 462.758 244.317 464.538 cv
243.848 464.262 243.379 464.122 242.909 464.122 cv
242.49 464.122 242.113 464.249 241.779 464.501 cv
241.445 464.753 241.207 465.103 241.064 465.551 cv
240.851 466.234 240.745 466.98 240.745 467.792 cv
240.745 473.72 240.745 467.792 240.745 473.72 cv
238.825 473.72 240.745 473.72 238.825 473.72 cv
f
253.437 469.572 mo
255.325 469.816 253.437 469.572 255.325 469.816 cv
255.118 471.117 254.591 472.137 253.741 472.872 cv
252.891 473.607 251.848 473.975 250.611 473.975 cv
249.061 473.975 247.815 473.469 246.873 472.456 cv
245.931 471.443 245.46 469.99 245.46 468.099 cv
245.46 466.878 245.663 465.807 246.068 464.889 cv
246.473 463.973 247.09 463.285 247.918 462.826 cv
248.747 462.367 249.648 462.138 250.622 462.138 cv
251.852 462.138 252.858 462.449 253.64 463.072 cv
254.422 463.693 254.923 464.577 255.143 465.721 cv
253.277 466.009 255.143 465.721 253.277 466.009 cv
253.099 465.249 252.785 464.676 252.333 464.292 cv
251.882 463.908 251.336 463.716 250.696 463.716 cv
249.729 463.716 248.944 464.063 248.34 464.757 cv
247.735 465.449 247.433 466.546 247.433 468.046 cv
247.433 469.568 247.725 470.673 248.308 471.363 cv
248.891 472.052 249.651 472.397 250.59 472.397 cv
251.343 472.397 251.972 472.167 252.477 471.704 cv
252.982 471.242 253.302 470.531 253.437 469.572 cv
f
256.319 470.339 mo
258.217 470.04 256.319 470.339 258.217 470.04 cv
258.324 470.801 258.621 471.384 259.108 471.789 cv
259.595 472.195 260.275 472.397 261.15 472.397 cv
262.031 472.397 262.686 472.219 263.112 471.859 cv
263.539 471.5 263.752 471.078 263.752 470.595 cv
263.752 470.161 263.563 469.82 263.187 469.572 cv
262.924 469.401 262.27 469.184 261.225 468.921 cv
259.817 468.565 258.841 468.258 258.297 467.999 cv
257.753 467.74 257.341 467.38 257.06 466.921 cv
256.779 466.464 256.639 465.956 256.639 465.402 cv
256.639 464.897 256.754 464.43 256.986 463.999 cv
257.217 463.569 257.531 463.212 257.929 462.927 cv
258.228 462.707 258.635 462.521 259.15 462.368 cv
259.666 462.215 260.219 462.138 260.809 462.138 cv
261.697 462.138 262.478 462.266 263.149 462.522 cv
263.821 462.779 264.317 463.125 264.637 463.563 cv
264.957 463.999 265.177 464.585 265.298 465.316 cv
263.421 465.572 265.298 465.316 263.421 465.572 cv
263.336 464.99 263.089 464.534 262.68 464.207 cv
262.271 463.88 261.694 463.717 260.947 463.717 cv
260.066 463.717 259.436 463.862 259.06 464.154 cv
258.683 464.445 258.494 464.788 258.494 465.178 cv
258.494 465.426 258.573 465.65 258.729 465.849 cv
258.886 466.056 259.131 466.227 259.465 466.361 cv
259.657 466.432 260.222 466.596 261.161 466.852 cv
262.518 467.214 263.466 467.512 264.003 467.742 cv
264.539 467.973 264.96 468.309 265.266 468.75 cv
265.572 469.191 265.725 469.738 265.725 470.392 cv
265.725 471.033 265.538 471.635 265.165 472.201 cv
264.792 472.766 264.253 473.202 263.549 473.512 cv
262.845 473.822 262.049 473.975 261.161 473.975 cv
259.689 473.975 258.567 473.671 257.796 473.059 cv
257.025 472.447 256.532 471.542 256.319 470.339 cv
f
275.879 470.073 mo
277.863 470.318 275.879 470.073 277.863 470.318 cv
277.55 471.478 276.97 472.376 276.124 473.016 cv
275.278 473.656 274.198 473.977 272.882 473.977 cv
271.226 473.977 269.912 473.466 268.942 472.447 cv
267.972 471.426 267.486 469.995 267.486 468.154 cv
267.486 466.249 267.977 464.77 268.958 463.717 cv
269.939 462.665 271.212 462.139 272.776 462.139 cv
274.29 462.139 275.527 462.654 276.487 463.685 cv
277.447 464.716 277.927 466.167 277.927 468.036 cv
277.927 468.15 277.923 468.322 277.916 468.548 cv
269.47 468.548 277.916 468.548 269.47 468.548 cv
269.541 469.792 269.893 470.745 270.526 471.406 cv
271.158 472.068 271.947 472.398 272.893 472.398 cv
273.597 472.398 274.198 472.214 274.695 471.844 cv
275.193 471.474 275.588 470.883 275.879 470.073 cv
cp
269.577 466.97 mo
275.9 466.97 269.577 466.97 275.9 466.97 cv
275.815 466.017 275.573 465.303 275.175 464.827 cv
274.564 464.087 273.771 463.717 272.797 463.717 cv
271.915 463.717 271.174 464.012 270.574 464.603 cv
269.973 465.193 269.64 465.982 269.577 466.97 cv
f
287.757 469.572 mo
289.645 469.816 287.757 469.572 289.645 469.816 cv
289.438 471.117 288.911 472.137 288.061 472.872 cv
287.211 473.607 286.168 473.975 284.931 473.975 cv
283.381 473.975 282.135 473.469 281.193 472.456 cv
280.251 471.443 279.78 469.991 279.78 468.099 cv
279.78 466.878 279.983 465.807 280.388 464.889 cv
280.793 463.973 281.41 463.285 282.238 462.827 cv
283.067 462.367 283.968 462.138 284.942 462.138 cv
286.172 462.138 287.178 462.449 287.96 463.072 cv
288.742 463.693 289.243 464.577 289.463 465.721 cv
287.597 466.009 289.463 465.721 287.597 466.009 cv
287.419 465.249 287.105 464.676 286.653 464.292 cv
286.202 463.909 285.656 463.716 285.016 463.716 cv
284.049 463.716 283.264 464.064 282.66 464.757 cv
282.055 465.449 281.753 466.547 281.753 468.047 cv
281.753 469.568 282.045 470.673 282.628 471.363 cv
283.211 472.052 283.971 472.397 284.91 472.397 cv
285.663 472.397 286.292 472.167 286.797 471.704 cv
287.302 471.242 287.622 470.531 287.757 469.572 cv
f
/1 
[/DeviceGray] /CSA add_res
0 gry
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 78 /N put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
def
/FontBBox {-665 -325 2000 1006} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/space <1C60D8A8C9B854D00D> |-
/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368
260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A
577DC235F833AFCC30669C812FBF097879E1> |-
/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A
2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D47
14AF52ABD0227B6CDD854C568D5A6F3817645C5> |-
/comma <1C60D8A8C9B854D0F42C7AF5C4668C35A6B5F5176B9FC6F495643D40
00A6D27DE0DDA4D01F0D89D11ABC5445CF8C34A3A1CF> |-
/N <1C60D8A8C9B6079F629170873C67115641D0B6890161EC48F71E8D2106F3
AC927984C1E464F121F968> |-
/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7D
C8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA
6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA
48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD
710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CE
C10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53
463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2
879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177
B5D88A> |-
/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE
9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7
BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C
344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D3654
8FE63FC8465B1B685766E782F0> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E13
1450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41A
C970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DF
A8> |-
/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A98
7875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C
7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79
F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F
518C54BB58C51D6FB6D0C8> |-
/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE11285789
4FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619AD
D420F549AB7C795751D32E8EE6> |-
/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F
80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2
BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD9
6538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1
B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB32
87CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B843
5558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F41
72D53C8FCAF4D28F2B78D3A4BF03> |-
/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D06
5152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CF
AD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F
5C42C88FB43C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/CHJKDM+ArialMT /ArialMT findfont ct_VMDictPut
/CHJKDM+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 33{/.notdef}rp 
/N 18{/.notdef}rp /a /.notdef /c /.notdef /e 2{/.notdef}rp 
/h 6{/.notdef}rp /o 2{/.notdef}rp /r /s /t 139{/.notdef}rp]
CHJKDM+ArialMT nf
CHJKDM+ArialMT*1 [24 0 0 -24 0 0 ]msf
88.3934 27.9199 mo
(\(c\))
[7.99182 12 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+Arial-ItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+Arial-ItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 88 /X put
def
/FontBBox {-517 -325 1359 998} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/X <1C60D8A8C9B64EDFE83E41C640FE704468C6299C7E9CA08B9B1E4F8C5EFF
53F338725BE8143E0AD3BDC8B8AAF69460692714F364CDC880F6304E699AB2AD
74624953D41D7E687B8EA2CFB330F69448A608A9CF635BC57A305A26659EEA> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/CHJKDN+Arial-ItalicMT /PBAAAA+Arial-ItalicMT findfont ct_VMDictPut
/CHJKDN+Arial-ItalicMT*1 
[88{/.notdef}rp /X 167{/.notdef}rp]
CHJKDN+Arial-ItalicMT nf
CHJKDN+Arial-ItalicMT*1 [24 0 0 -24 0 0 ]msf
134.503 474.643 mo
(X)sh
%ADOBeginSubsetFont: WGJAAA+Arial-ItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WGJAAA+Arial-ItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 89 /Y put
def
/FontBBox {-517 -325 1359 998} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/Y <1C60D8A8C9B64EDFFB70687AC8F7D4DCA87058F3096EE320135CC0749323
C85D9DA9F32003BAA4903FC2712888AEAF2D4A37E396A3D31F236948FF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/CHJKDO+Arial-ItalicMT /WGJAAA+Arial-ItalicMT findfont ct_VMDictPut
/CHJKDO+Arial-ItalicMT*1 
[89{/.notdef}rp /Y 166{/.notdef}rp]
CHJKDO+Arial-ItalicMT nf
CHJKDO+Arial-ItalicMT*1 [0 -24 -24 0 0 0 ]msf
19.6344 288.696 mo
(Y)sh
CHJKDM+ArialMT*1 [0 -24 -24 0 0 0 ]msf
20.2947 260.295 mo
(North)
[-17.328 -13.344 -7.99182 -6.672 0 ]ysh
20.3836 198.491 mo
(, arcsec)
[-6.672 -6.672 -13.344 -7.99182 -12 -12 -13.344 0 ]ysh
359.683 418.008 mo
359.683 4.24799 li
0 0 0 rgb
@
66.8547 4.2262 mo
359.418 4.2262 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
/CHJKDO+Arial-ItalicMT*1 uf
/CHJKDO+Arial-ItalicMT uf
/WGJAAA+Arial-ItalicMT uf
/CHJKDN+Arial-ItalicMT*1 uf
/CHJKDN+Arial-ItalicMT uf
/PBAAAA+Arial-ItalicMT uf
/CHJKDM+ArialMT*1 uf
/CHJKDM+ArialMT uf
/ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
