%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP966D.tmp.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: we
%%CreationDate: 03.07.2020, 13:30:45
%%BoundingBox: 0 0 680 492
%%HiResBoundingBox: 0 0 679.6183 491.3451
%%CropBox: 0 0 679.6183 491.3451
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1027 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 10.1.16 (Windows)"
   dc:format="application/pdf"
   xmp:CreateDate="2020-07-03T13:29:12+04:00"
   xmp:CreatorTool="Adobe Acrobat 10.1.16"
   xmp:ModifyDate="2020-07-03T13:29:12+04:00"
   xmpMM:DocumentID="uuid:080f7e99-6e4c-4eb0-bb18-391146c992a3"
   xmpMM:InstanceID="uuid:61bf8972-f5ee-40ee-8b3c-5289f1923495">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>we</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Kiyaeva_fig1a-0.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -491.345 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 491.345 li
679.618 491.345 li
679.618 0 li
cp
clp
1.2 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
177.688 428.115 mo
177.688 426.915 li
false sop
/0 
[/DeviceGray] /CSA add_res
.502 gry
@
177.688 421.874 mo
177.688 420.674 li
@
177.688 415.635 mo
177.688 414.435 li
@
177.688 409.395 mo
177.688 408.195 li
@
177.688 403.155 mo
177.688 401.955 li
@
177.688 396.915 mo
177.688 395.715 li
@
177.688 390.675 mo
177.688 389.475 li
@
177.688 384.435 mo
177.688 383.235 li
@
177.688 378.195 mo
177.688 376.995 li
@
177.688 371.955 mo
177.688 370.755 li
@
177.688 365.715 mo
177.688 364.515 li
@
177.688 359.475 mo
177.688 358.275 li
@
177.688 353.235 mo
177.688 352.035 li
@
177.688 346.995 mo
177.688 345.795 li
@
177.688 340.755 mo
177.688 339.555 li
@
177.688 334.515 mo
177.688 333.315 li
@
177.688 328.275 mo
177.688 327.075 li
@
177.688 322.035 mo
177.688 320.835 li
@
177.688 315.795 mo
177.688 314.595 li
@
177.688 309.555 mo
177.688 308.355 li
@
177.688 303.315 mo
177.688 302.115 li
@
177.688 297.075 mo
177.688 295.875 li
@
177.688 290.835 mo
177.688 289.635 li
@
177.688 284.595 mo
177.688 283.395 li
@
177.688 278.355 mo
177.688 277.155 li
@
177.688 272.115 mo
177.688 270.915 li
@
177.688 265.875 mo
177.688 264.675 li
@
177.688 259.634 mo
177.688 258.434 li
@
177.688 253.394 mo
177.688 252.194 li
@
177.688 247.154 mo
177.688 245.954 li
@
177.688 240.914 mo
177.688 239.714 li
@
177.688 234.674 mo
177.688 233.474 li
@
177.688 228.434 mo
177.688 227.234 li
@
177.688 222.195 mo
177.688 220.994 li
@
177.688 215.955 mo
177.688 214.754 li
@
177.688 209.715 mo
177.688 208.515 li
@
177.688 203.475 mo
177.688 202.275 li
@
177.688 197.235 mo
177.688 196.035 li
@
177.688 190.995 mo
177.688 189.795 li
@
177.688 184.755 mo
177.688 183.555 li
@
177.688 178.515 mo
177.688 177.315 li
@
177.688 172.275 mo
177.688 171.075 li
@
177.688 166.035 mo
177.688 164.835 li
@
177.688 159.795 mo
177.688 158.595 li
@
177.688 153.555 mo
177.688 152.355 li
@
177.688 147.315 mo
177.688 146.115 li
@
177.688 141.075 mo
177.688 139.875 li
@
177.688 134.835 mo
177.688 133.635 li
@
177.688 128.595 mo
177.688 127.395 li
@
177.688 122.355 mo
177.688 121.155 li
@
177.688 116.115 mo
177.688 114.915 li
@
177.688 109.875 mo
177.688 108.675 li
@
177.688 103.635 mo
177.688 102.435 li
@
177.688 97.3952 mo
177.688 96.1953 li
@
177.688 91.1552 mo
177.688 89.9553 li
@
177.688 84.9153 mo
177.688 83.7153 li
@
177.688 78.6753 mo
177.688 77.4753 li
@
177.688 72.4353 mo
177.688 71.2353 li
@
177.688 66.1953 mo
177.688 64.9953 li
@
177.688 59.9553 mo
177.688 58.7553 li
@
177.688 53.7143 mo
177.688 52.5143 li
@
177.688 47.4743 mo
177.688 46.2743 li
@
177.688 41.2343 mo
177.688 40.0343 li
@
177.688 34.9943 mo
177.688 33.7943 li
@
177.688 28.7543 mo
177.688 27.5544 li
@
177.688 22.5143 mo
177.688 21.3144 li
@
177.688 16.2744 mo
177.688 15.0744 li
@
257.608 428.114 mo
257.608 426.914 li
@
257.608 421.873 mo
257.608 420.673 li
@
257.608 415.634 mo
257.608 414.434 li
@
257.608 409.394 mo
257.608 408.194 li
@
257.608 403.154 mo
257.608 401.954 li
@
257.608 396.914 mo
257.608 395.714 li
@
257.608 390.674 mo
257.608 389.474 li
@
257.608 384.434 mo
257.608 383.234 li
@
257.608 378.194 mo
257.608 376.994 li
@
257.608 371.954 mo
257.608 370.754 li
@
257.608 365.714 mo
257.608 364.514 li
@
257.608 359.474 mo
257.608 358.274 li
@
257.608 353.234 mo
257.608 352.034 li
@
257.608 346.994 mo
257.608 345.794 li
@
257.608 340.754 mo
257.608 339.554 li
@
257.608 334.514 mo
257.608 333.314 li
@
257.608 328.274 mo
257.608 327.074 li
@
257.608 322.034 mo
257.608 320.834 li
@
257.608 315.794 mo
257.608 314.594 li
@
257.608 309.554 mo
257.608 308.354 li
@
257.608 303.314 mo
257.608 302.114 li
@
257.608 297.074 mo
257.608 295.874 li
@
257.608 290.834 mo
257.608 289.634 li
@
257.608 284.594 mo
257.608 283.394 li
@
257.608 278.354 mo
257.608 277.154 li
@
257.608 272.114 mo
257.608 270.914 li
@
257.608 265.874 mo
257.608 264.674 li
@
257.608 259.633 mo
257.608 258.433 li
@
257.608 253.393 mo
257.608 252.193 li
@
257.608 247.153 mo
257.608 245.953 li
@
257.608 240.913 mo
257.608 239.713 li
@
257.608 234.673 mo
257.608 233.473 li
@
257.608 228.433 mo
257.608 227.233 li
@
257.608 222.194 mo
257.608 220.993 li
@
257.608 215.954 mo
257.608 214.753 li
@
257.608 209.714 mo
257.608 208.514 li
@
257.608 203.474 mo
257.608 202.274 li
@
257.608 197.234 mo
257.608 196.034 li
@
257.608 190.994 mo
257.608 189.794 li
@
257.608 184.754 mo
257.608 183.554 li
@
257.608 178.514 mo
257.608 177.314 li
@
257.608 172.274 mo
257.608 171.074 li
@
257.608 166.034 mo
257.608 164.834 li
@
257.608 159.794 mo
257.608 158.594 li
@
257.608 153.554 mo
257.608 152.354 li
@
257.608 147.314 mo
257.608 146.114 li
@
257.608 141.074 mo
257.608 139.874 li
@
257.608 134.834 mo
257.608 133.634 li
@
257.608 128.594 mo
257.608 127.394 li
@
257.608 122.354 mo
257.608 121.154 li
@
257.608 116.114 mo
257.608 114.914 li
@
257.608 109.874 mo
257.608 108.674 li
@
257.608 103.634 mo
257.608 102.435 li
@
257.608 97.3945 mo
257.608 96.1945 li
@
257.608 91.1545 mo
257.608 89.9545 li
@
257.608 84.9145 mo
257.608 83.7145 li
@
257.608 78.6745 mo
257.608 77.4745 li
@
257.608 72.4345 mo
257.608 71.2346 li
@
257.608 66.1945 mo
257.608 64.9946 li
@
257.608 59.9546 mo
257.608 58.7546 li
@
257.608 53.7136 mo
257.608 52.5136 li
@
257.608 47.4736 mo
257.608 46.2736 li
@
257.608 41.2336 mo
257.608 40.0336 li
@
257.608 34.9936 mo
257.608 33.7936 li
@
257.608 28.7536 mo
257.608 27.5536 li
@
257.608 22.5136 mo
257.608 21.3136 li
@
257.608 16.2736 mo
257.608 15.0736 li
@
337.289 428.114 mo
337.289 426.914 li
@
337.289 421.873 mo
337.289 420.673 li
@
337.289 415.634 mo
337.289 414.434 li
@
337.289 409.394 mo
337.289 408.194 li
@
337.289 403.154 mo
337.289 401.954 li
@
337.289 396.914 mo
337.289 395.714 li
@
337.289 390.674 mo
337.289 389.474 li
@
337.289 384.434 mo
337.289 383.234 li
@
337.289 378.194 mo
337.289 376.994 li
@
337.289 371.954 mo
337.289 370.754 li
@
337.289 365.714 mo
337.289 364.514 li
@
337.289 359.474 mo
337.289 358.274 li
@
337.289 353.234 mo
337.289 352.034 li
@
337.289 346.994 mo
337.289 345.794 li
@
337.289 340.754 mo
337.289 339.554 li
@
337.289 334.514 mo
337.289 333.314 li
@
337.289 328.274 mo
337.289 327.074 li
@
337.289 322.034 mo
337.289 320.834 li
@
337.289 315.794 mo
337.289 314.594 li
@
337.289 309.554 mo
337.289 308.354 li
@
337.289 303.314 mo
337.289 302.114 li
@
337.289 297.074 mo
337.289 295.874 li
@
337.289 290.834 mo
337.289 289.634 li
@
337.289 284.594 mo
337.289 283.394 li
@
337.289 278.354 mo
337.289 277.154 li
@
337.289 272.114 mo
337.289 270.914 li
@
337.289 265.874 mo
337.289 264.674 li
@
337.289 259.633 mo
337.289 258.433 li
@
337.289 253.393 mo
337.289 252.193 li
@
337.289 247.153 mo
337.289 245.953 li
@
337.289 240.913 mo
337.289 239.713 li
@
337.289 234.673 mo
337.289 233.473 li
@
337.289 228.433 mo
337.289 227.233 li
@
337.289 222.194 mo
337.289 220.993 li
@
337.289 215.954 mo
337.289 214.753 li
@
337.289 209.714 mo
337.289 208.514 li
@
337.289 203.474 mo
337.289 202.274 li
@
337.289 197.234 mo
337.289 196.034 li
@
337.289 190.994 mo
337.289 189.794 li
@
337.289 184.754 mo
337.289 183.554 li
@
337.289 178.514 mo
337.289 177.314 li
@
337.289 172.274 mo
337.289 171.074 li
@
337.289 166.034 mo
337.289 164.834 li
@
337.289 159.794 mo
337.289 158.594 li
@
337.289 153.554 mo
337.289 152.354 li
@
337.289 147.314 mo
337.289 146.114 li
@
337.289 141.074 mo
337.289 139.874 li
@
337.289 134.834 mo
337.289 133.634 li
@
337.289 128.594 mo
337.289 127.394 li
@
337.289 122.354 mo
337.289 121.154 li
@
337.289 116.114 mo
337.289 114.914 li
@
337.289 109.874 mo
337.289 108.674 li
@
337.289 103.634 mo
337.289 102.434 li
@
337.289 97.3938 mo
337.289 96.1938 li
@
337.289 91.1538 mo
337.289 89.9538 li
@
337.289 84.9138 mo
337.289 83.7138 li
@
337.289 78.6738 mo
337.289 77.4738 li
@
337.289 72.4338 mo
337.289 71.2338 li
@
337.289 66.1938 mo
337.289 64.9938 li
@
337.289 59.9538 mo
337.289 58.7538 li
@
337.289 53.7128 mo
337.289 52.5128 li
@
337.289 47.4728 mo
337.289 46.2729 li
@
337.289 41.2328 mo
337.289 40.0329 li
@
337.289 34.9929 mo
337.289 33.7929 li
@
337.289 28.7529 mo
337.289 27.5529 li
@
337.289 22.5129 mo
337.289 21.3129 li
@
337.289 16.2749 mo
337.289 15.0749 li
@
417.209 428.115 mo
417.209 426.915 li
@
417.209 421.874 mo
417.209 420.674 li
@
417.209 415.635 mo
417.209 414.435 li
@
417.209 409.395 mo
417.209 408.195 li
@
417.209 403.155 mo
417.209 401.955 li
@
417.209 396.915 mo
417.209 395.715 li
@
417.209 390.675 mo
417.209 389.475 li
@
417.209 384.435 mo
417.209 383.235 li
@
417.209 378.195 mo
417.209 376.995 li
@
417.209 371.955 mo
417.209 370.755 li
@
417.209 365.715 mo
417.209 364.515 li
@
417.209 359.475 mo
417.209 358.275 li
@
417.209 353.235 mo
417.209 352.035 li
@
417.209 346.995 mo
417.209 345.795 li
@
417.209 340.755 mo
417.209 339.555 li
@
417.209 334.515 mo
417.209 333.315 li
@
417.209 328.275 mo
417.209 327.075 li
@
417.209 322.035 mo
417.209 320.835 li
@
417.209 315.795 mo
417.209 314.595 li
@
417.209 309.555 mo
417.209 308.355 li
@
417.209 303.315 mo
417.209 302.115 li
@
417.209 297.075 mo
417.209 295.875 li
@
417.209 290.835 mo
417.209 289.635 li
@
417.209 284.595 mo
417.209 283.395 li
@
417.209 278.355 mo
417.209 277.155 li
@
417.209 272.115 mo
417.209 270.915 li
@
417.209 265.875 mo
417.209 264.675 li
@
417.209 259.634 mo
417.209 258.434 li
@
417.209 253.394 mo
417.209 252.194 li
@
417.209 247.154 mo
417.209 245.954 li
@
417.209 240.914 mo
417.209 239.714 li
@
417.209 234.674 mo
417.209 233.474 li
@
417.209 228.434 mo
417.209 227.234 li
@
417.209 222.195 mo
417.209 220.994 li
@
417.209 215.955 mo
417.209 214.754 li
@
417.209 209.715 mo
417.209 208.515 li
@
417.209 203.475 mo
417.209 202.275 li
@
417.209 197.235 mo
417.209 196.035 li
@
417.209 190.995 mo
417.209 189.795 li
@
417.209 184.755 mo
417.209 183.555 li
@
417.209 178.515 mo
417.209 177.315 li
@
417.209 172.275 mo
417.209 171.075 li
@
417.209 166.035 mo
417.209 164.835 li
@
417.209 159.795 mo
417.209 158.595 li
@
417.209 153.555 mo
417.209 152.355 li
@
417.209 147.315 mo
417.209 146.115 li
@
417.209 141.075 mo
417.209 139.875 li
@
417.209 134.835 mo
417.209 133.635 li
@
417.209 128.595 mo
417.209 127.395 li
@
417.209 122.355 mo
417.209 121.155 li
@
417.209 116.115 mo
417.209 114.915 li
@
417.209 109.875 mo
417.209 108.675 li
@
417.209 103.635 mo
417.209 102.435 li
@
417.209 97.395 mo
417.209 96.195 li
@
417.209 91.155 mo
417.209 89.955 li
@
417.209 84.915 mo
417.209 83.7151 li
@
417.209 78.675 mo
417.209 77.4751 li
@
417.209 72.4351 mo
417.209 71.2351 li
@
417.209 66.1951 mo
417.209 64.9951 li
@
417.209 59.9551 mo
417.209 58.7551 li
@
417.209 53.7141 mo
417.209 52.5141 li
@
417.209 47.4741 mo
417.209 46.2741 li
@
417.209 41.2341 mo
417.209 40.0341 li
@
417.209 34.9941 mo
417.209 33.7941 li
@
417.209 28.7541 mo
417.209 27.5541 li
@
417.209 22.5141 mo
417.209 21.3141 li
@
417.209 16.2741 mo
417.209 15.0742 li
@
496.89 428.114 mo
496.89 426.914 li
@
496.89 421.873 mo
496.89 420.673 li
@
496.89 415.634 mo
496.89 414.434 li
@
496.89 409.394 mo
496.89 408.194 li
@
496.89 403.154 mo
496.89 401.954 li
@
496.89 396.914 mo
496.89 395.714 li
@
496.89 390.674 mo
496.89 389.474 li
@
496.89 384.434 mo
496.89 383.234 li
@
496.89 378.194 mo
496.89 376.994 li
@
496.89 371.954 mo
496.89 370.754 li
@
496.89 365.714 mo
496.89 364.514 li
@
496.89 359.474 mo
496.89 358.274 li
@
496.89 353.234 mo
496.89 352.034 li
@
496.89 346.994 mo
496.89 345.794 li
@
496.89 340.754 mo
496.89 339.554 li
@
496.89 334.514 mo
496.89 333.314 li
@
496.89 328.274 mo
496.89 327.074 li
@
496.89 322.034 mo
496.89 320.834 li
@
496.89 315.794 mo
496.89 314.594 li
@
496.89 309.554 mo
496.89 308.354 li
@
496.89 303.314 mo
496.89 302.114 li
@
496.89 297.074 mo
496.89 295.874 li
@
496.89 290.834 mo
496.89 289.634 li
@
496.89 284.594 mo
496.89 283.394 li
@
496.89 278.354 mo
496.89 277.154 li
@
496.89 272.114 mo
496.89 270.914 li
@
496.89 265.874 mo
496.89 264.674 li
@
496.89 259.633 mo
496.89 258.433 li
@
496.89 253.393 mo
496.89 252.193 li
@
496.89 247.153 mo
496.89 245.953 li
@
496.89 240.913 mo
496.89 239.713 li
@
496.89 234.673 mo
496.89 233.473 li
@
496.89 228.433 mo
496.89 227.233 li
@
496.89 222.194 mo
496.89 220.993 li
@
496.89 215.954 mo
496.89 214.753 li
@
496.89 209.714 mo
496.89 208.514 li
@
496.89 203.474 mo
496.89 202.274 li
@
496.89 197.234 mo
496.89 196.034 li
@
496.89 190.994 mo
496.89 189.794 li
@
496.89 184.754 mo
496.89 183.554 li
@
496.89 178.514 mo
496.89 177.314 li
@
496.89 172.274 mo
496.89 171.074 li
@
496.89 166.034 mo
496.89 164.834 li
@
496.89 159.794 mo
496.89 158.594 li
@
496.89 153.554 mo
496.89 152.354 li
@
496.89 147.314 mo
496.89 146.114 li
@
496.89 141.074 mo
496.89 139.874 li
@
496.89 134.834 mo
496.89 133.634 li
@
496.89 128.594 mo
496.89 127.394 li
@
496.89 122.354 mo
496.89 121.154 li
@
496.89 116.114 mo
496.89 114.914 li
@
496.89 109.874 mo
496.89 108.674 li
@
496.89 103.634 mo
496.89 102.434 li
@
496.89 97.3943 mo
496.89 96.1943 li
@
496.89 91.1543 mo
496.89 89.9543 li
@
496.89 84.9143 mo
496.89 83.7143 li
@
496.89 78.6743 mo
496.89 77.4743 li
@
496.89 72.4343 mo
496.89 71.2343 li
@
496.89 66.1943 mo
496.89 64.9944 li
@
496.89 59.9543 mo
496.89 58.7544 li
@
496.89 53.7133 mo
496.89 52.5134 li
@
496.89 47.4734 mo
496.89 46.2734 li
@
496.89 41.2334 mo
496.89 40.0334 li
@
496.89 34.9934 mo
496.89 33.7934 li
@
496.89 28.7534 mo
496.89 27.5534 li
@
496.89 22.5134 mo
496.89 21.3134 li
@
496.89 16.2734 mo
496.89 15.0734 li
@
576.81 428.113 mo
576.81 426.913 li
@
576.81 421.872 mo
576.81 420.672 li
@
576.81 415.633 mo
576.81 414.433 li
@
576.81 409.393 mo
576.81 408.193 li
@
576.81 403.153 mo
576.81 401.953 li
@
576.81 396.913 mo
576.81 395.713 li
@
576.81 390.673 mo
576.81 389.473 li
@
576.81 384.433 mo
576.81 383.233 li
@
576.81 378.193 mo
576.81 376.993 li
@
576.81 371.953 mo
576.81 370.753 li
@
576.81 365.713 mo
576.81 364.513 li
@
576.81 359.473 mo
576.81 358.273 li
@
576.81 353.233 mo
576.81 352.033 li
@
576.81 346.993 mo
576.81 345.793 li
@
576.81 340.753 mo
576.81 339.553 li
@
576.81 334.513 mo
576.81 333.313 li
@
576.81 328.273 mo
576.81 327.073 li
@
576.81 322.033 mo
576.81 320.833 li
@
576.81 315.793 mo
576.81 314.593 li
@
576.81 309.553 mo
576.81 308.353 li
@
576.81 303.313 mo
576.81 302.113 li
@
576.81 297.073 mo
576.81 295.873 li
@
576.81 290.833 mo
576.81 289.633 li
@
576.81 284.593 mo
576.81 283.393 li
@
576.81 278.353 mo
576.81 277.153 li
@
576.81 272.113 mo
576.81 270.913 li
@
576.81 265.873 mo
576.81 264.673 li
@
576.81 259.632 mo
576.81 258.432 li
@
576.81 253.392 mo
576.81 252.192 li
@
576.81 247.152 mo
576.81 245.952 li
@
576.81 240.912 mo
576.81 239.712 li
@
576.81 234.672 mo
576.81 233.472 li
@
576.81 228.432 mo
576.81 227.232 li
@
576.81 222.193 mo
576.81 220.992 li
@
576.81 215.953 mo
576.81 214.752 li
@
576.81 209.713 mo
576.81 208.513 li
@
576.81 203.473 mo
576.81 202.273 li
@
576.81 197.233 mo
576.81 196.033 li
@
576.81 190.993 mo
576.81 189.793 li
@
576.81 184.753 mo
576.81 183.553 li
@
576.81 178.513 mo
576.81 177.313 li
@
576.81 172.273 mo
576.81 171.073 li
@
576.81 166.033 mo
576.81 164.833 li
@
576.81 159.793 mo
576.81 158.593 li
@
576.81 153.553 mo
576.81 152.353 li
@
576.81 147.313 mo
576.81 146.113 li
@
576.81 141.073 mo
576.81 139.874 li
@
576.81 134.833 mo
576.81 133.634 li
@
576.81 128.594 mo
576.81 127.394 li
@
576.81 122.354 mo
576.81 121.154 li
@
576.81 116.114 mo
576.81 114.914 li
@
576.81 109.874 mo
576.81 108.674 li
@
576.81 103.634 mo
576.81 102.434 li
@
576.81 97.3936 mo
576.81 96.1936 li
@
576.81 91.1536 mo
576.81 89.9536 li
@
576.81 84.9136 mo
576.81 83.7136 li
@
576.81 78.6736 mo
576.81 77.4736 li
@
576.81 72.4336 mo
576.81 71.2336 li
@
576.81 66.1936 mo
576.81 64.9936 li
@
576.81 59.9536 mo
576.81 58.7536 li
@
576.81 53.7126 mo
576.81 52.5126 li
@
576.81 47.4726 mo
576.81 46.2726 li
@
576.81 41.2326 mo
576.81 40.0327 li
@
576.81 34.9926 mo
576.81 33.7927 li
@
576.81 28.7527 mo
576.81 27.5527 li
@
576.81 22.5157 mo
576.81 21.3157 li
@
576.81 16.2757 mo
576.81 15.0757 li
@
.72 lw
98.0081 393.557 mo
98.7281 393.557 li
@
101.848 393.557 mo
102.568 393.557 li
@
105.688 393.557 mo
106.408 393.557 li
@
109.528 393.557 mo
110.248 393.557 li
@
113.368 393.557 mo
114.088 393.557 li
@
117.208 393.557 mo
117.928 393.557 li
@
121.048 393.557 mo
121.768 393.557 li
@
124.888 393.557 mo
125.608 393.557 li
@
128.728 393.557 mo
129.448 393.557 li
@
132.568 393.557 mo
133.288 393.557 li
@
136.408 393.557 mo
137.128 393.557 li
@
140.248 393.557 mo
140.968 393.557 li
@
144.088 393.557 mo
144.808 393.557 li
@
147.928 393.557 mo
148.648 393.557 li
@
151.768 393.557 mo
152.488 393.557 li
@
155.608 393.557 mo
156.328 393.557 li
@
159.448 393.557 mo
160.168 393.557 li
@
163.288 393.557 mo
164.008 393.557 li
@
167.128 393.557 mo
167.848 393.557 li
@
170.968 393.557 mo
171.688 393.557 li
@
174.808 393.557 mo
175.528 393.557 li
@
178.648 393.557 mo
179.368 393.557 li
@
182.488 393.557 mo
183.208 393.557 li
@
186.328 393.557 mo
187.048 393.557 li
@
190.168 393.557 mo
190.888 393.557 li
@
194.008 393.557 mo
194.728 393.557 li
@
197.848 393.557 mo
198.568 393.557 li
@
201.688 393.557 mo
202.408 393.557 li
@
205.528 393.557 mo
206.248 393.557 li
@
209.368 393.557 mo
210.088 393.557 li
@
213.208 393.557 mo
213.928 393.557 li
@
217.048 393.557 mo
217.768 393.557 li
@
220.888 393.557 mo
221.608 393.557 li
@
224.728 393.557 mo
225.448 393.557 li
@
228.568 393.557 mo
229.288 393.557 li
@
232.408 393.557 mo
233.128 393.557 li
@
236.248 393.557 mo
236.968 393.557 li
@
240.088 393.557 mo
240.808 393.557 li
@
243.928 393.557 mo
244.648 393.557 li
@
247.768 393.557 mo
248.488 393.557 li
@
251.608 393.557 mo
252.328 393.557 li
@
255.448 393.557 mo
256.168 393.557 li
@
259.288 393.557 mo
260.008 393.557 li
@
263.129 393.557 mo
263.849 393.557 li
@
266.969 393.557 mo
267.689 393.557 li
@
270.809 393.557 mo
271.529 393.557 li
@
274.649 393.557 mo
275.369 393.557 li
@
278.489 393.557 mo
279.209 393.557 li
@
282.329 393.557 mo
283.049 393.557 li
@
286.169 393.557 mo
286.889 393.557 li
@
290.009 393.557 mo
290.729 393.557 li
@
293.849 393.557 mo
294.569 393.557 li
@
297.689 393.557 mo
298.409 393.557 li
@
301.529 393.557 mo
302.249 393.557 li
@
305.369 393.557 mo
306.089 393.557 li
@
309.209 393.557 mo
309.929 393.557 li
@
313.049 393.557 mo
313.769 393.557 li
@
316.889 393.557 mo
317.609 393.557 li
@
320.729 393.557 mo
321.449 393.557 li
@
324.569 393.557 mo
325.289 393.557 li
@
328.409 393.557 mo
329.129 393.557 li
@
332.249 393.557 mo
332.969 393.557 li
@
336.089 393.557 mo
336.809 393.557 li
@
339.929 393.557 mo
340.649 393.557 li
@
343.769 393.557 mo
344.489 393.557 li
@
347.609 393.557 mo
348.329 393.557 li
@
351.449 393.557 mo
352.169 393.557 li
@
355.289 393.557 mo
356.009 393.557 li
@
359.129 393.557 mo
359.849 393.557 li
@
362.969 393.557 mo
363.689 393.557 li
@
366.809 393.557 mo
367.529 393.557 li
@
370.649 393.557 mo
371.369 393.557 li
@
374.489 393.557 mo
375.209 393.557 li
@
378.329 393.557 mo
379.049 393.557 li
@
382.169 393.557 mo
382.889 393.557 li
@
386.009 393.557 mo
386.729 393.557 li
@
389.849 393.557 mo
390.569 393.557 li
@
393.689 393.557 mo
394.409 393.557 li
@
397.529 393.557 mo
398.249 393.557 li
@
401.369 393.557 mo
402.089 393.557 li
@
405.209 393.557 mo
405.929 393.557 li
@
409.049 393.557 mo
409.769 393.557 li
@
412.889 393.557 mo
413.609 393.557 li
@
416.729 393.557 mo
417.449 393.557 li
@
420.569 393.557 mo
421.289 393.557 li
@
424.409 393.557 mo
425.129 393.557 li
@
428.249 393.557 mo
428.969 393.557 li
@
432.089 393.557 mo
432.809 393.557 li
@
435.929 393.557 mo
436.649 393.557 li
@
439.769 393.557 mo
440.489 393.557 li
@
443.609 393.557 mo
444.329 393.557 li
@
447.449 393.557 mo
448.169 393.557 li
@
451.289 393.557 mo
452.009 393.557 li
@
455.129 393.557 mo
455.849 393.557 li
@
458.969 393.557 mo
459.689 393.557 li
@
462.809 393.557 mo
463.529 393.557 li
@
466.65 393.557 mo
467.369 393.557 li
@
470.49 393.557 mo
471.21 393.557 li
@
474.33 393.557 mo
475.05 393.557 li
@
478.17 393.557 mo
478.89 393.557 li
@
482.01 393.557 mo
482.73 393.557 li
@
485.85 393.557 mo
486.57 393.557 li
@
489.69 393.557 mo
490.41 393.557 li
@
493.53 393.557 mo
494.25 393.557 li
@
497.37 393.557 mo
498.09 393.557 li
@
501.21 393.557 mo
501.93 393.557 li
@
505.05 393.557 mo
505.77 393.557 li
@
508.89 393.557 mo
509.61 393.557 li
@
512.73 393.557 mo
513.45 393.557 li
@
516.57 393.557 mo
517.29 393.557 li
@
520.41 393.557 mo
521.13 393.557 li
@
524.25 393.557 mo
524.97 393.557 li
@
528.09 393.557 mo
528.81 393.557 li
@
531.93 393.557 mo
532.65 393.557 li
@
535.77 393.557 mo
536.49 393.557 li
@
539.61 393.557 mo
540.33 393.557 li
@
543.45 393.557 mo
544.17 393.557 li
@
547.29 393.557 mo
548.01 393.557 li
@
551.13 393.557 mo
551.85 393.557 li
@
554.97 393.557 mo
555.69 393.557 li
@
558.81 393.557 mo
559.53 393.557 li
@
562.65 393.557 mo
563.37 393.557 li
@
566.49 393.557 mo
567.21 393.557 li
@
570.33 393.557 mo
571.05 393.557 li
@
574.17 393.557 mo
574.89 393.557 li
@
578.01 393.557 mo
578.73 393.557 li
@
581.851 393.557 mo
582.57 393.557 li
@
585.691 393.557 mo
586.411 393.557 li
@
589.531 393.557 mo
590.251 393.557 li
@
593.371 393.557 mo
594.091 393.557 li
@
597.211 393.557 mo
597.931 393.557 li
@
601.051 393.557 mo
601.771 393.557 li
@
604.891 393.557 mo
605.611 393.557 li
@
608.731 393.557 mo
609.451 393.557 li
@
612.571 393.557 mo
613.291 393.557 li
@
616.411 393.557 mo
617.131 393.557 li
@
620.251 393.557 mo
620.971 393.557 li
@
624.091 393.557 mo
624.811 393.557 li
@
627.931 393.557 mo
628.651 393.557 li
@
631.771 393.557 mo
632.491 393.557 li
@
635.611 393.557 mo
636.331 393.557 li
@
639.451 393.557 mo
640.171 393.557 li
@
643.291 393.557 mo
644.011 393.557 li
@
647.131 393.557 mo
647.851 393.557 li
@
650.971 393.557 mo
651.691 393.557 li
@
654.811 393.557 mo
655.531 393.557 li
@
98.0091 359.237 mo
98.7291 359.237 li
@
101.849 359.237 mo
102.569 359.237 li
@
105.689 359.237 mo
106.409 359.237 li
@
109.529 359.237 mo
110.249 359.237 li
@
113.369 359.237 mo
114.089 359.237 li
@
117.209 359.237 mo
117.929 359.237 li
@
121.049 359.237 mo
121.769 359.237 li
@
124.889 359.237 mo
125.609 359.237 li
@
128.729 359.237 mo
129.449 359.237 li
@
132.569 359.237 mo
133.289 359.237 li
@
136.409 359.237 mo
137.129 359.237 li
@
140.249 359.237 mo
140.969 359.237 li
@
144.089 359.237 mo
144.809 359.237 li
@
147.929 359.237 mo
148.649 359.237 li
@
151.769 359.237 mo
152.489 359.237 li
@
155.609 359.237 mo
156.329 359.237 li
@
159.449 359.237 mo
160.169 359.237 li
@
163.289 359.237 mo
164.009 359.237 li
@
167.129 359.237 mo
167.849 359.237 li
@
170.969 359.237 mo
171.689 359.237 li
@
174.809 359.237 mo
175.529 359.237 li
@
178.649 359.237 mo
179.369 359.237 li
@
182.489 359.237 mo
183.209 359.237 li
@
186.329 359.237 mo
187.049 359.237 li
@
190.169 359.237 mo
190.889 359.237 li
@
194.009 359.237 mo
194.729 359.237 li
@
197.849 359.237 mo
198.569 359.237 li
@
201.689 359.237 mo
202.409 359.237 li
@
205.529 359.237 mo
206.249 359.237 li
@
209.369 359.237 mo
210.089 359.237 li
@
213.209 359.237 mo
213.929 359.237 li
@
217.049 359.237 mo
217.769 359.237 li
@
220.889 359.237 mo
221.609 359.237 li
@
224.729 359.237 mo
225.449 359.237 li
@
228.569 359.237 mo
229.289 359.237 li
@
232.409 359.237 mo
233.129 359.237 li
@
236.249 359.237 mo
236.969 359.237 li
@
240.089 359.237 mo
240.809 359.237 li
@
243.929 359.237 mo
244.649 359.237 li
@
247.769 359.237 mo
248.489 359.237 li
@
251.609 359.237 mo
252.329 359.237 li
@
255.449 359.237 mo
256.169 359.237 li
@
259.289 359.237 mo
260.009 359.237 li
@
263.13 359.237 mo
263.85 359.237 li
@
266.97 359.237 mo
267.69 359.237 li
@
270.81 359.237 mo
271.53 359.237 li
@
274.65 359.237 mo
275.37 359.237 li
@
278.49 359.237 mo
279.21 359.237 li
@
282.33 359.237 mo
283.05 359.237 li
@
286.17 359.237 mo
286.89 359.237 li
@
290.01 359.237 mo
290.73 359.237 li
@
293.85 359.237 mo
294.57 359.237 li
@
297.69 359.237 mo
298.41 359.237 li
@
301.53 359.237 mo
302.25 359.237 li
@
305.37 359.237 mo
306.09 359.237 li
@
309.21 359.237 mo
309.93 359.237 li
@
313.05 359.237 mo
313.77 359.237 li
@
316.89 359.237 mo
317.61 359.237 li
@
320.73 359.237 mo
321.45 359.237 li
@
324.57 359.237 mo
325.29 359.237 li
@
328.41 359.237 mo
329.13 359.237 li
@
332.25 359.237 mo
332.97 359.237 li
@
336.09 359.237 mo
336.81 359.237 li
@
339.93 359.237 mo
340.65 359.237 li
@
343.77 359.237 mo
344.49 359.237 li
@
347.61 359.237 mo
348.33 359.237 li
@
351.45 359.237 mo
352.17 359.237 li
@
355.29 359.237 mo
356.01 359.237 li
@
359.13 359.237 mo
359.85 359.237 li
@
362.97 359.237 mo
363.69 359.237 li
@
366.81 359.237 mo
367.53 359.237 li
@
370.65 359.237 mo
371.37 359.237 li
@
374.49 359.237 mo
375.21 359.237 li
@
378.33 359.237 mo
379.05 359.237 li
@
382.17 359.237 mo
382.89 359.237 li
@
386.01 359.237 mo
386.73 359.237 li
@
389.85 359.237 mo
390.57 359.237 li
@
393.69 359.237 mo
394.41 359.237 li
@
397.53 359.237 mo
398.25 359.237 li
@
401.37 359.237 mo
402.09 359.237 li
@
405.21 359.237 mo
405.93 359.237 li
@
409.05 359.237 mo
409.77 359.237 li
@
412.89 359.237 mo
413.61 359.237 li
@
416.73 359.237 mo
417.45 359.237 li
@
420.57 359.237 mo
421.29 359.237 li
@
424.41 359.237 mo
425.13 359.237 li
@
428.25 359.237 mo
428.97 359.237 li
@
432.09 359.237 mo
432.81 359.237 li
@
435.93 359.237 mo
436.65 359.237 li
@
439.77 359.237 mo
440.49 359.237 li
@
443.61 359.237 mo
444.33 359.237 li
@
447.45 359.237 mo
448.17 359.237 li
@
451.29 359.237 mo
452.01 359.237 li
@
455.13 359.237 mo
455.85 359.237 li
@
458.97 359.237 mo
459.69 359.237 li
@
462.81 359.237 mo
463.53 359.237 li
@
466.651 359.237 mo
467.37 359.237 li
@
470.491 359.237 mo
471.211 359.237 li
@
474.331 359.237 mo
475.051 359.237 li
@
478.171 359.237 mo
478.891 359.237 li
@
482.011 359.237 mo
482.731 359.237 li
@
485.851 359.237 mo
486.571 359.237 li
@
489.691 359.237 mo
490.411 359.237 li
@
493.531 359.237 mo
494.251 359.237 li
@
497.371 359.237 mo
498.091 359.237 li
@
501.211 359.237 mo
501.931 359.237 li
@
505.051 359.237 mo
505.771 359.237 li
@
508.891 359.237 mo
509.611 359.237 li
@
512.731 359.237 mo
513.451 359.237 li
@
516.571 359.237 mo
517.291 359.237 li
@
520.411 359.237 mo
521.131 359.237 li
@
524.251 359.237 mo
524.971 359.237 li
@
528.091 359.237 mo
528.811 359.237 li
@
531.931 359.237 mo
532.651 359.237 li
@
535.771 359.237 mo
536.491 359.237 li
@
539.611 359.237 mo
540.331 359.237 li
@
543.451 359.237 mo
544.171 359.237 li
@
547.291 359.237 mo
548.011 359.237 li
@
551.131 359.237 mo
551.851 359.237 li
@
554.971 359.237 mo
555.691 359.237 li
@
558.811 359.237 mo
559.531 359.237 li
@
562.651 359.237 mo
563.371 359.237 li
@
566.491 359.237 mo
567.211 359.237 li
@
570.331 359.237 mo
571.051 359.237 li
@
574.171 359.237 mo
574.891 359.237 li
@
578.011 359.237 mo
578.731 359.237 li
@
581.852 359.237 mo
582.571 359.237 li
@
585.692 359.237 mo
586.411 359.237 li
@
589.532 359.237 mo
590.252 359.237 li
@
593.372 359.237 mo
594.092 359.237 li
@
597.212 359.237 mo
597.932 359.237 li
@
601.052 359.237 mo
601.772 359.237 li
@
604.892 359.237 mo
605.612 359.237 li
@
608.732 359.237 mo
609.452 359.237 li
@
612.572 359.237 mo
613.292 359.237 li
@
616.412 359.237 mo
617.132 359.237 li
@
620.252 359.237 mo
620.972 359.237 li
@
624.092 359.237 mo
624.812 359.237 li
@
627.932 359.237 mo
628.652 359.237 li
@
631.772 359.237 mo
632.492 359.237 li
@
635.612 359.237 mo
636.332 359.237 li
@
639.452 359.237 mo
640.172 359.237 li
@
643.292 359.237 mo
644.012 359.237 li
@
647.132 359.237 mo
647.852 359.237 li
@
650.972 359.237 mo
651.692 359.237 li
@
654.812 359.237 mo
655.532 359.237 li
@
98.0101 324.677 mo
98.73 324.677 li
@
101.85 324.677 mo
102.57 324.677 li
@
105.69 324.677 mo
106.41 324.677 li
@
109.53 324.677 mo
110.25 324.677 li
@
113.37 324.677 mo
114.09 324.677 li
@
117.21 324.677 mo
117.93 324.677 li
@
121.05 324.677 mo
121.77 324.677 li
@
124.89 324.677 mo
125.61 324.677 li
@
128.73 324.677 mo
129.45 324.677 li
@
132.57 324.677 mo
133.29 324.677 li
@
136.41 324.677 mo
137.13 324.677 li
@
140.25 324.677 mo
140.97 324.677 li
@
144.09 324.677 mo
144.81 324.677 li
@
147.93 324.677 mo
148.65 324.677 li
@
151.77 324.677 mo
152.49 324.677 li
@
155.61 324.677 mo
156.33 324.677 li
@
159.45 324.677 mo
160.17 324.677 li
@
163.29 324.677 mo
164.01 324.677 li
@
167.13 324.677 mo
167.85 324.677 li
@
170.97 324.677 mo
171.69 324.677 li
@
174.81 324.677 mo
175.53 324.677 li
@
178.65 324.677 mo
179.37 324.677 li
@
182.49 324.677 mo
183.21 324.677 li
@
186.33 324.677 mo
187.05 324.677 li
@
190.17 324.677 mo
190.89 324.677 li
@
194.01 324.677 mo
194.73 324.677 li
@
197.85 324.677 mo
198.57 324.677 li
@
201.69 324.677 mo
202.41 324.677 li
@
205.53 324.677 mo
206.25 324.677 li
@
209.37 324.677 mo
210.09 324.677 li
@
213.21 324.677 mo
213.93 324.677 li
@
217.05 324.677 mo
217.77 324.677 li
@
220.89 324.677 mo
221.61 324.677 li
@
224.73 324.677 mo
225.45 324.677 li
@
228.57 324.677 mo
229.29 324.677 li
@
232.41 324.677 mo
233.13 324.677 li
@
236.25 324.677 mo
236.97 324.677 li
@
240.09 324.677 mo
240.81 324.677 li
@
243.93 324.677 mo
244.65 324.677 li
@
247.77 324.677 mo
248.49 324.677 li
@
251.61 324.677 mo
252.33 324.677 li
@
255.45 324.677 mo
256.17 324.677 li
@
259.29 324.677 mo
260.01 324.677 li
@
263.131 324.677 mo
263.851 324.677 li
@
266.971 324.677 mo
267.691 324.677 li
@
270.811 324.677 mo
271.531 324.677 li
@
274.651 324.677 mo
275.371 324.677 li
@
278.491 324.677 mo
279.211 324.677 li
@
282.331 324.677 mo
283.051 324.677 li
@
286.171 324.677 mo
286.891 324.677 li
@
290.011 324.677 mo
290.731 324.677 li
@
293.851 324.677 mo
294.571 324.677 li
@
297.691 324.677 mo
298.411 324.677 li
@
301.531 324.677 mo
302.251 324.677 li
@
305.371 324.677 mo
306.091 324.677 li
@
309.211 324.677 mo
309.931 324.677 li
@
313.051 324.677 mo
313.771 324.677 li
@
316.891 324.677 mo
317.611 324.677 li
@
320.731 324.677 mo
321.451 324.677 li
@
324.571 324.677 mo
325.291 324.677 li
@
328.411 324.677 mo
329.131 324.677 li
@
332.251 324.677 mo
332.971 324.677 li
@
336.091 324.677 mo
336.811 324.677 li
@
339.931 324.677 mo
340.651 324.677 li
@
343.771 324.677 mo
344.491 324.677 li
@
347.611 324.677 mo
348.331 324.677 li
@
351.451 324.677 mo
352.171 324.677 li
@
355.291 324.677 mo
356.011 324.677 li
@
359.131 324.677 mo
359.851 324.677 li
@
362.971 324.677 mo
363.691 324.677 li
@
366.811 324.677 mo
367.531 324.677 li
@
370.651 324.677 mo
371.371 324.677 li
@
374.491 324.677 mo
375.211 324.677 li
@
378.331 324.677 mo
379.051 324.677 li
@
382.171 324.677 mo
382.891 324.677 li
@
386.011 324.677 mo
386.731 324.677 li
@
389.851 324.677 mo
390.571 324.677 li
@
393.691 324.677 mo
394.411 324.677 li
@
397.531 324.677 mo
398.251 324.677 li
@
401.371 324.677 mo
402.091 324.677 li
@
405.211 324.677 mo
405.931 324.677 li
@
409.051 324.677 mo
409.771 324.677 li
@
412.891 324.677 mo
413.611 324.677 li
@
416.731 324.677 mo
417.451 324.677 li
@
420.571 324.677 mo
421.291 324.677 li
@
424.411 324.677 mo
425.131 324.677 li
@
428.251 324.677 mo
428.971 324.677 li
@
432.091 324.677 mo
432.811 324.677 li
@
435.931 324.677 mo
436.651 324.677 li
@
439.771 324.677 mo
440.491 324.677 li
@
443.611 324.677 mo
444.331 324.677 li
@
447.451 324.677 mo
448.171 324.677 li
@
451.291 324.677 mo
452.011 324.677 li
@
455.131 324.677 mo
455.851 324.677 li
@
458.971 324.677 mo
459.691 324.677 li
@
462.811 324.677 mo
463.531 324.677 li
@
466.652 324.677 mo
467.371 324.677 li
@
470.492 324.677 mo
471.212 324.677 li
@
474.332 324.677 mo
475.052 324.677 li
@
478.172 324.677 mo
478.892 324.677 li
@
482.012 324.677 mo
482.732 324.677 li
@
485.852 324.677 mo
486.572 324.677 li
@
489.692 324.677 mo
490.412 324.677 li
@
493.532 324.677 mo
494.252 324.677 li
@
497.372 324.677 mo
498.092 324.677 li
@
501.212 324.677 mo
501.932 324.677 li
@
505.052 324.677 mo
505.772 324.677 li
@
508.892 324.677 mo
509.612 324.677 li
@
512.732 324.677 mo
513.452 324.677 li
@
516.572 324.677 mo
517.292 324.677 li
@
520.412 324.677 mo
521.132 324.677 li
@
524.252 324.677 mo
524.972 324.677 li
@
528.092 324.677 mo
528.812 324.677 li
@
531.932 324.677 mo
532.652 324.677 li
@
535.772 324.677 mo
536.492 324.677 li
@
539.612 324.677 mo
540.332 324.677 li
@
543.452 324.677 mo
544.172 324.677 li
@
547.292 324.677 mo
548.012 324.677 li
@
551.132 324.677 mo
551.852 324.677 li
@
554.972 324.677 mo
555.692 324.677 li
@
558.812 324.677 mo
559.532 324.677 li
@
562.652 324.677 mo
563.372 324.677 li
@
566.492 324.677 mo
567.212 324.677 li
@
570.332 324.677 mo
571.052 324.677 li
@
574.172 324.677 mo
574.892 324.677 li
@
578.012 324.677 mo
578.732 324.677 li
@
581.852 324.677 mo
582.572 324.677 li
@
585.693 324.677 mo
586.412 324.677 li
@
589.533 324.677 mo
590.253 324.677 li
@
593.373 324.677 mo
594.093 324.677 li
@
597.213 324.677 mo
597.933 324.677 li
@
601.053 324.677 mo
601.773 324.677 li
@
604.893 324.677 mo
605.613 324.677 li
@
608.733 324.677 mo
609.453 324.677 li
@
612.573 324.677 mo
613.293 324.677 li
@
616.413 324.677 mo
617.133 324.677 li
@
620.253 324.677 mo
620.973 324.677 li
@
624.093 324.677 mo
624.813 324.677 li
@
627.933 324.677 mo
628.653 324.677 li
@
631.773 324.677 mo
632.493 324.677 li
@
635.613 324.677 mo
636.333 324.677 li
@
639.453 324.677 mo
640.173 324.677 li
@
643.293 324.677 mo
644.013 324.677 li
@
647.133 324.677 mo
647.853 324.677 li
@
650.973 324.677 mo
651.693 324.677 li
@
654.813 324.677 mo
655.533 324.677 li
@
98.011 290.117 mo
98.731 290.117 li
@
101.851 290.117 mo
102.571 290.117 li
@
105.691 290.117 mo
106.411 290.117 li
@
109.531 290.117 mo
110.251 290.117 li
@
113.371 290.117 mo
114.091 290.117 li
@
117.211 290.117 mo
117.931 290.117 li
@
121.051 290.117 mo
121.771 290.117 li
@
124.891 290.117 mo
125.611 290.117 li
@
128.731 290.117 mo
129.451 290.117 li
@
132.571 290.117 mo
133.291 290.117 li
@
136.411 290.117 mo
137.131 290.117 li
@
140.251 290.117 mo
140.971 290.117 li
@
144.091 290.117 mo
144.811 290.117 li
@
147.931 290.117 mo
148.651 290.117 li
@
151.771 290.117 mo
152.491 290.117 li
@
155.611 290.117 mo
156.331 290.117 li
@
159.451 290.117 mo
160.171 290.117 li
@
163.291 290.117 mo
164.011 290.117 li
@
167.131 290.117 mo
167.851 290.117 li
@
170.971 290.117 mo
171.691 290.117 li
@
174.811 290.117 mo
175.531 290.117 li
@
178.651 290.117 mo
179.371 290.117 li
@
182.491 290.117 mo
183.211 290.117 li
@
186.331 290.117 mo
187.051 290.117 li
@
190.171 290.117 mo
190.891 290.117 li
@
194.011 290.117 mo
194.731 290.117 li
@
197.851 290.117 mo
198.571 290.117 li
@
201.691 290.117 mo
202.411 290.117 li
@
205.531 290.117 mo
206.251 290.117 li
@
209.371 290.117 mo
210.091 290.117 li
@
213.211 290.117 mo
213.931 290.117 li
@
217.051 290.117 mo
217.771 290.117 li
@
220.891 290.117 mo
221.611 290.117 li
@
224.731 290.117 mo
225.451 290.117 li
@
228.571 290.117 mo
229.291 290.117 li
@
232.411 290.117 mo
233.131 290.117 li
@
236.251 290.117 mo
236.971 290.117 li
@
240.091 290.117 mo
240.811 290.117 li
@
243.931 290.117 mo
244.651 290.117 li
@
247.771 290.117 mo
248.491 290.117 li
@
251.611 290.117 mo
252.331 290.117 li
@
255.451 290.117 mo
256.171 290.117 li
@
259.291 290.117 mo
260.011 290.117 li
@
263.132 290.117 mo
263.852 290.117 li
@
266.972 290.117 mo
267.692 290.117 li
@
270.812 290.117 mo
271.532 290.117 li
@
274.652 290.117 mo
275.372 290.117 li
@
278.492 290.117 mo
279.212 290.117 li
@
282.332 290.117 mo
283.052 290.117 li
@
286.172 290.117 mo
286.892 290.117 li
@
290.012 290.117 mo
290.732 290.117 li
@
293.852 290.117 mo
294.572 290.117 li
@
297.692 290.117 mo
298.412 290.117 li
@
301.532 290.117 mo
302.252 290.117 li
@
305.372 290.117 mo
306.092 290.117 li
@
309.212 290.117 mo
309.932 290.117 li
@
313.052 290.117 mo
313.772 290.117 li
@
316.892 290.117 mo
317.612 290.117 li
@
320.732 290.117 mo
321.452 290.117 li
@
324.572 290.117 mo
325.292 290.117 li
@
328.412 290.117 mo
329.132 290.117 li
@
332.252 290.117 mo
332.972 290.117 li
@
336.092 290.117 mo
336.812 290.117 li
@
339.932 290.117 mo
340.652 290.117 li
@
343.772 290.117 mo
344.492 290.117 li
@
347.612 290.117 mo
348.332 290.117 li
@
351.452 290.117 mo
352.172 290.117 li
@
355.292 290.117 mo
356.012 290.117 li
@
359.132 290.117 mo
359.852 290.117 li
@
362.972 290.117 mo
363.692 290.117 li
@
366.812 290.117 mo
367.532 290.117 li
@
370.652 290.117 mo
371.372 290.117 li
@
374.492 290.117 mo
375.212 290.117 li
@
378.332 290.117 mo
379.052 290.117 li
@
382.172 290.117 mo
382.892 290.117 li
@
386.012 290.117 mo
386.732 290.117 li
@
389.852 290.117 mo
390.572 290.117 li
@
393.692 290.117 mo
394.412 290.117 li
@
397.532 290.117 mo
398.252 290.117 li
@
401.372 290.117 mo
402.092 290.117 li
@
405.212 290.117 mo
405.932 290.117 li
@
409.052 290.117 mo
409.772 290.117 li
@
412.892 290.117 mo
413.612 290.117 li
@
416.732 290.117 mo
417.452 290.117 li
@
420.572 290.117 mo
421.292 290.117 li
@
424.412 290.117 mo
425.132 290.117 li
@
428.252 290.117 mo
428.972 290.117 li
@
432.092 290.117 mo
432.812 290.117 li
@
435.932 290.117 mo
436.652 290.117 li
@
439.772 290.117 mo
440.492 290.117 li
@
443.612 290.117 mo
444.332 290.117 li
@
447.452 290.117 mo
448.172 290.117 li
@
451.292 290.117 mo
452.012 290.117 li
@
455.132 290.117 mo
455.852 290.117 li
@
458.972 290.117 mo
459.692 290.117 li
@
462.812 290.117 mo
463.532 290.117 li
@
466.653 290.117 mo
467.372 290.117 li
@
470.493 290.117 mo
471.213 290.117 li
@
474.333 290.117 mo
475.053 290.117 li
@
478.173 290.117 mo
478.893 290.117 li
@
482.013 290.117 mo
482.733 290.117 li
@
485.853 290.117 mo
486.573 290.117 li
@
489.693 290.117 mo
490.413 290.117 li
@
493.533 290.117 mo
494.253 290.117 li
@
497.373 290.117 mo
498.093 290.117 li
@
501.213 290.117 mo
501.933 290.117 li
@
505.053 290.117 mo
505.773 290.117 li
@
508.893 290.117 mo
509.613 290.117 li
@
512.733 290.117 mo
513.453 290.117 li
@
516.573 290.117 mo
517.293 290.117 li
@
520.413 290.117 mo
521.133 290.117 li
@
524.253 290.117 mo
524.973 290.117 li
@
528.093 290.117 mo
528.813 290.117 li
@
531.933 290.117 mo
532.653 290.117 li
@
535.773 290.117 mo
536.493 290.117 li
@
539.613 290.117 mo
540.333 290.117 li
@
543.453 290.117 mo
544.173 290.117 li
@
547.293 290.117 mo
548.013 290.117 li
@
551.133 290.117 mo
551.853 290.117 li
@
554.973 290.117 mo
555.693 290.117 li
@
558.813 290.117 mo
559.533 290.117 li
@
562.653 290.117 mo
563.373 290.117 li
@
566.493 290.117 mo
567.213 290.117 li
@
570.333 290.117 mo
571.053 290.117 li
@
574.173 290.117 mo
574.893 290.117 li
@
578.013 290.117 mo
578.733 290.117 li
@
581.853 290.117 mo
582.573 290.117 li
@
585.693 290.117 mo
586.413 290.117 li
@
589.534 290.117 mo
590.253 290.117 li
@
593.374 290.117 mo
594.094 290.117 li
@
597.214 290.117 mo
597.934 290.117 li
@
601.054 290.117 mo
601.774 290.117 li
@
604.894 290.117 mo
605.614 290.117 li
@
608.734 290.117 mo
609.454 290.117 li
@
612.574 290.117 mo
613.294 290.117 li
@
616.414 290.117 mo
617.134 290.117 li
@
620.254 290.117 mo
620.974 290.117 li
@
624.094 290.117 mo
624.814 290.117 li
@
627.934 290.117 mo
628.654 290.117 li
@
631.774 290.117 mo
632.494 290.117 li
@
635.614 290.117 mo
636.334 290.117 li
@
639.454 290.117 mo
640.174 290.117 li
@
643.294 290.117 mo
644.014 290.117 li
@
647.134 290.117 mo
647.854 290.117 li
@
650.974 290.117 mo
651.694 290.117 li
@
654.814 290.117 mo
655.534 290.117 li
@
98.012 255.796 mo
98.732 255.796 li
@
101.852 255.796 mo
102.572 255.796 li
@
105.692 255.796 mo
106.412 255.796 li
@
109.532 255.796 mo
110.252 255.796 li
@
113.372 255.796 mo
114.092 255.796 li
@
117.212 255.796 mo
117.932 255.796 li
@
121.052 255.796 mo
121.772 255.796 li
@
124.892 255.796 mo
125.612 255.796 li
@
128.732 255.796 mo
129.452 255.796 li
@
132.572 255.796 mo
133.292 255.796 li
@
136.412 255.796 mo
137.132 255.796 li
@
140.252 255.796 mo
140.972 255.796 li
@
144.092 255.796 mo
144.812 255.796 li
@
147.932 255.796 mo
148.652 255.796 li
@
151.772 255.796 mo
152.492 255.796 li
@
155.612 255.796 mo
156.332 255.796 li
@
159.452 255.796 mo
160.172 255.796 li
@
163.292 255.796 mo
164.012 255.796 li
@
167.132 255.796 mo
167.852 255.796 li
@
170.972 255.796 mo
171.692 255.796 li
@
174.812 255.796 mo
175.532 255.796 li
@
178.652 255.796 mo
179.372 255.796 li
@
182.492 255.796 mo
183.212 255.796 li
@
186.332 255.796 mo
187.052 255.796 li
@
190.172 255.796 mo
190.892 255.796 li
@
194.012 255.796 mo
194.732 255.796 li
@
197.852 255.796 mo
198.572 255.796 li
@
201.692 255.796 mo
202.412 255.796 li
@
205.532 255.796 mo
206.252 255.796 li
@
209.372 255.796 mo
210.092 255.796 li
@
213.212 255.796 mo
213.932 255.796 li
@
217.052 255.796 mo
217.772 255.796 li
@
220.892 255.796 mo
221.612 255.796 li
@
224.732 255.796 mo
225.452 255.796 li
@
228.572 255.796 mo
229.292 255.796 li
@
232.412 255.796 mo
233.132 255.796 li
@
236.252 255.796 mo
236.972 255.796 li
@
240.092 255.796 mo
240.812 255.796 li
@
243.932 255.796 mo
244.652 255.796 li
@
247.772 255.796 mo
248.492 255.796 li
@
251.612 255.796 mo
252.332 255.796 li
@
255.452 255.796 mo
256.172 255.796 li
@
259.292 255.796 mo
260.012 255.796 li
@
263.133 255.796 mo
263.853 255.796 li
@
266.973 255.796 mo
267.693 255.796 li
@
270.813 255.796 mo
271.533 255.796 li
@
274.653 255.796 mo
275.373 255.796 li
@
278.493 255.796 mo
279.213 255.796 li
@
282.333 255.796 mo
283.053 255.796 li
@
286.173 255.796 mo
286.893 255.796 li
@
290.013 255.796 mo
290.733 255.796 li
@
293.853 255.796 mo
294.573 255.796 li
@
297.693 255.796 mo
298.413 255.796 li
@
301.533 255.796 mo
302.253 255.796 li
@
305.373 255.796 mo
306.093 255.796 li
@
309.213 255.796 mo
309.933 255.796 li
@
313.053 255.796 mo
313.773 255.796 li
@
316.893 255.796 mo
317.613 255.796 li
@
320.733 255.796 mo
321.453 255.796 li
@
324.573 255.796 mo
325.293 255.796 li
@
328.413 255.796 mo
329.133 255.796 li
@
332.253 255.796 mo
332.973 255.796 li
@
336.093 255.796 mo
336.813 255.796 li
@
339.933 255.796 mo
340.653 255.796 li
@
343.773 255.796 mo
344.493 255.796 li
@
347.613 255.796 mo
348.333 255.796 li
@
351.453 255.796 mo
352.173 255.796 li
@
355.293 255.796 mo
356.013 255.796 li
@
359.133 255.796 mo
359.853 255.796 li
@
362.973 255.796 mo
363.693 255.796 li
@
366.813 255.796 mo
367.533 255.796 li
@
370.653 255.796 mo
371.373 255.796 li
@
374.493 255.796 mo
375.213 255.796 li
@
378.333 255.796 mo
379.053 255.796 li
@
382.173 255.796 mo
382.893 255.796 li
@
386.013 255.796 mo
386.733 255.796 li
@
389.853 255.796 mo
390.573 255.796 li
@
393.693 255.796 mo
394.413 255.796 li
@
397.533 255.796 mo
398.253 255.796 li
@
401.373 255.796 mo
402.093 255.796 li
@
405.213 255.796 mo
405.933 255.796 li
@
409.053 255.796 mo
409.773 255.796 li
@
412.893 255.796 mo
413.613 255.796 li
@
416.733 255.796 mo
417.453 255.796 li
@
420.573 255.796 mo
421.293 255.796 li
@
424.413 255.796 mo
425.133 255.796 li
@
428.253 255.796 mo
428.973 255.796 li
@
432.093 255.796 mo
432.813 255.796 li
@
435.933 255.796 mo
436.653 255.796 li
@
439.773 255.796 mo
440.493 255.796 li
@
443.613 255.796 mo
444.333 255.796 li
@
447.453 255.796 mo
448.173 255.796 li
@
451.293 255.796 mo
452.013 255.796 li
@
455.133 255.796 mo
455.853 255.796 li
@
458.973 255.796 mo
459.693 255.796 li
@
462.813 255.796 mo
463.533 255.796 li
@
466.654 255.796 mo
467.373 255.796 li
@
470.494 255.796 mo
471.214 255.796 li
@
474.334 255.796 mo
475.054 255.796 li
@
478.174 255.796 mo
478.894 255.796 li
@
482.014 255.796 mo
482.734 255.796 li
@
485.854 255.796 mo
486.574 255.796 li
@
489.694 255.796 mo
490.414 255.796 li
@
493.534 255.796 mo
494.254 255.796 li
@
497.374 255.796 mo
498.094 255.796 li
@
501.214 255.796 mo
501.934 255.796 li
@
505.054 255.796 mo
505.774 255.796 li
@
508.894 255.796 mo
509.614 255.796 li
@
512.734 255.796 mo
513.454 255.796 li
@
516.574 255.796 mo
517.294 255.796 li
@
520.414 255.796 mo
521.134 255.796 li
@
524.254 255.796 mo
524.974 255.796 li
@
528.094 255.796 mo
528.814 255.796 li
@
531.934 255.796 mo
532.654 255.796 li
@
535.774 255.796 mo
536.494 255.796 li
@
539.614 255.796 mo
540.334 255.796 li
@
543.454 255.796 mo
544.174 255.796 li
@
547.294 255.796 mo
548.014 255.796 li
@
551.134 255.796 mo
551.854 255.796 li
@
554.974 255.796 mo
555.694 255.796 li
@
558.814 255.796 mo
559.534 255.796 li
@
562.654 255.796 mo
563.374 255.796 li
@
566.494 255.796 mo
567.214 255.796 li
@
570.334 255.796 mo
571.054 255.796 li
@
574.174 255.796 mo
574.894 255.796 li
@
578.014 255.796 mo
578.734 255.796 li
@
581.854 255.796 mo
582.574 255.796 li
@
585.694 255.796 mo
586.414 255.796 li
@
589.534 255.796 mo
590.254 255.796 li
@
593.375 255.796 mo
594.094 255.796 li
@
597.215 255.796 mo
597.935 255.796 li
@
601.055 255.796 mo
601.775 255.796 li
@
604.895 255.796 mo
605.615 255.796 li
@
608.735 255.796 mo
609.455 255.796 li
@
612.575 255.796 mo
613.295 255.796 li
@
616.415 255.796 mo
617.135 255.796 li
@
620.255 255.796 mo
620.975 255.796 li
@
624.095 255.796 mo
624.815 255.796 li
@
627.935 255.796 mo
628.655 255.796 li
@
631.775 255.796 mo
632.495 255.796 li
@
635.615 255.796 mo
636.335 255.796 li
@
639.455 255.796 mo
640.175 255.796 li
@
643.295 255.796 mo
644.015 255.796 li
@
647.135 255.796 mo
647.855 255.796 li
@
650.975 255.796 mo
651.695 255.796 li
@
654.815 255.796 mo
655.535 255.796 li
@
98.013 221.236 mo
98.733 221.236 li
@
101.853 221.236 mo
102.573 221.236 li
@
105.693 221.236 mo
106.413 221.236 li
@
109.533 221.236 mo
110.253 221.236 li
@
113.373 221.236 mo
114.093 221.236 li
@
117.213 221.236 mo
117.933 221.236 li
@
121.053 221.236 mo
121.773 221.236 li
@
124.893 221.236 mo
125.613 221.236 li
@
128.733 221.236 mo
129.453 221.236 li
@
132.573 221.236 mo
133.293 221.236 li
@
136.413 221.236 mo
137.133 221.236 li
@
140.253 221.236 mo
140.973 221.236 li
@
144.093 221.236 mo
144.813 221.236 li
@
147.933 221.236 mo
148.653 221.236 li
@
151.773 221.236 mo
152.493 221.236 li
@
155.613 221.236 mo
156.333 221.236 li
@
159.453 221.236 mo
160.173 221.236 li
@
163.293 221.236 mo
164.013 221.236 li
@
167.133 221.236 mo
167.853 221.236 li
@
170.973 221.236 mo
171.693 221.236 li
@
174.813 221.236 mo
175.533 221.236 li
@
178.653 221.236 mo
179.373 221.236 li
@
182.493 221.236 mo
183.213 221.236 li
@
186.333 221.236 mo
187.053 221.236 li
@
190.173 221.236 mo
190.893 221.236 li
@
194.013 221.236 mo
194.733 221.236 li
@
197.853 221.236 mo
198.573 221.236 li
@
201.693 221.236 mo
202.413 221.236 li
@
205.533 221.236 mo
206.253 221.236 li
@
209.373 221.236 mo
210.093 221.236 li
@
213.213 221.236 mo
213.933 221.236 li
@
217.053 221.236 mo
217.773 221.236 li
@
220.893 221.236 mo
221.613 221.236 li
@
224.733 221.236 mo
225.453 221.236 li
@
228.573 221.236 mo
229.293 221.236 li
@
232.413 221.236 mo
233.133 221.236 li
@
236.253 221.236 mo
236.973 221.236 li
@
240.093 221.236 mo
240.813 221.236 li
@
243.933 221.236 mo
244.653 221.236 li
@
247.773 221.236 mo
248.493 221.236 li
@
251.613 221.236 mo
252.333 221.236 li
@
255.453 221.236 mo
256.173 221.236 li
@
259.293 221.236 mo
260.013 221.236 li
@
263.134 221.236 mo
263.854 221.236 li
@
266.974 221.236 mo
267.694 221.236 li
@
270.814 221.236 mo
271.534 221.236 li
@
274.654 221.236 mo
275.374 221.236 li
@
278.494 221.236 mo
279.214 221.236 li
@
282.334 221.236 mo
283.054 221.236 li
@
286.174 221.236 mo
286.894 221.236 li
@
290.014 221.236 mo
290.734 221.236 li
@
293.854 221.236 mo
294.574 221.236 li
@
297.694 221.236 mo
298.414 221.236 li
@
301.534 221.236 mo
302.254 221.236 li
@
305.374 221.236 mo
306.094 221.236 li
@
309.214 221.236 mo
309.934 221.236 li
@
313.054 221.236 mo
313.774 221.236 li
@
316.894 221.236 mo
317.614 221.236 li
@
320.734 221.236 mo
321.454 221.236 li
@
324.574 221.236 mo
325.294 221.236 li
@
328.414 221.236 mo
329.134 221.236 li
@
332.254 221.236 mo
332.974 221.236 li
@
336.094 221.236 mo
336.814 221.236 li
@
339.934 221.236 mo
340.654 221.236 li
@
343.774 221.236 mo
344.494 221.236 li
@
347.614 221.236 mo
348.334 221.236 li
@
351.454 221.236 mo
352.174 221.236 li
@
355.294 221.236 mo
356.014 221.236 li
@
359.134 221.236 mo
359.854 221.236 li
@
362.974 221.236 mo
363.694 221.236 li
@
366.814 221.236 mo
367.534 221.236 li
@
370.654 221.236 mo
371.374 221.236 li
@
374.494 221.236 mo
375.214 221.236 li
@
378.334 221.236 mo
379.054 221.236 li
@
382.174 221.236 mo
382.894 221.236 li
@
386.014 221.236 mo
386.734 221.236 li
@
389.854 221.236 mo
390.574 221.236 li
@
393.694 221.236 mo
394.414 221.236 li
@
397.534 221.236 mo
398.254 221.236 li
@
401.374 221.236 mo
402.094 221.236 li
@
405.214 221.236 mo
405.934 221.236 li
@
409.054 221.236 mo
409.774 221.236 li
@
412.894 221.236 mo
413.614 221.236 li
@
416.734 221.236 mo
417.454 221.236 li
@
420.574 221.236 mo
421.294 221.236 li
@
424.414 221.236 mo
425.134 221.236 li
@
428.254 221.236 mo
428.974 221.236 li
@
432.094 221.236 mo
432.814 221.236 li
@
435.934 221.236 mo
436.654 221.236 li
@
439.774 221.236 mo
440.494 221.236 li
@
443.614 221.236 mo
444.334 221.236 li
@
447.454 221.236 mo
448.174 221.236 li
@
451.294 221.236 mo
452.014 221.236 li
@
455.134 221.236 mo
455.854 221.236 li
@
458.974 221.236 mo
459.694 221.236 li
@
462.814 221.236 mo
463.534 221.236 li
@
466.655 221.236 mo
467.374 221.236 li
@
470.495 221.236 mo
471.215 221.236 li
@
474.335 221.236 mo
475.055 221.236 li
@
478.175 221.236 mo
478.895 221.236 li
@
482.015 221.236 mo
482.735 221.236 li
@
485.855 221.236 mo
486.575 221.236 li
@
489.695 221.236 mo
490.415 221.236 li
@
493.535 221.236 mo
494.255 221.236 li
@
497.375 221.236 mo
498.095 221.236 li
@
501.215 221.236 mo
501.935 221.236 li
@
505.055 221.236 mo
505.775 221.236 li
@
508.895 221.236 mo
509.615 221.236 li
@
512.735 221.236 mo
513.455 221.236 li
@
516.575 221.236 mo
517.295 221.236 li
@
520.415 221.236 mo
521.135 221.236 li
@
524.255 221.236 mo
524.975 221.236 li
@
528.095 221.236 mo
528.815 221.236 li
@
531.935 221.236 mo
532.655 221.236 li
@
535.775 221.236 mo
536.495 221.236 li
@
539.615 221.236 mo
540.335 221.236 li
@
543.455 221.236 mo
544.175 221.236 li
@
547.295 221.236 mo
548.015 221.236 li
@
551.135 221.236 mo
551.855 221.236 li
@
554.975 221.236 mo
555.695 221.236 li
@
558.815 221.236 mo
559.535 221.236 li
@
562.655 221.236 mo
563.375 221.236 li
@
566.495 221.236 mo
567.215 221.236 li
@
570.335 221.236 mo
571.055 221.236 li
@
574.175 221.236 mo
574.895 221.236 li
@
578.015 221.236 mo
578.735 221.236 li
@
581.855 221.236 mo
582.575 221.236 li
@
585.695 221.236 mo
586.415 221.236 li
@
589.535 221.236 mo
590.255 221.236 li
@
593.375 221.236 mo
594.095 221.236 li
@
597.216 221.236 mo
597.935 221.236 li
@
601.056 221.236 mo
601.776 221.236 li
@
604.896 221.236 mo
605.616 221.236 li
@
608.736 221.236 mo
609.456 221.236 li
@
612.576 221.236 mo
613.296 221.236 li
@
616.416 221.236 mo
617.136 221.236 li
@
620.256 221.236 mo
620.976 221.236 li
@
624.096 221.236 mo
624.816 221.236 li
@
627.936 221.236 mo
628.656 221.236 li
@
631.776 221.236 mo
632.496 221.236 li
@
635.616 221.236 mo
636.336 221.236 li
@
639.456 221.236 mo
640.176 221.236 li
@
643.296 221.236 mo
644.016 221.236 li
@
647.136 221.236 mo
647.856 221.236 li
@
650.976 221.236 mo
651.696 221.236 li
@
654.816 221.236 mo
655.536 221.236 li
@
98.014 186.677 mo
98.734 186.677 li
@
101.854 186.677 mo
102.574 186.677 li
@
105.694 186.677 mo
106.414 186.677 li
@
109.534 186.677 mo
110.254 186.677 li
@
113.374 186.677 mo
114.094 186.677 li
@
117.214 186.677 mo
117.934 186.677 li
@
121.054 186.677 mo
121.774 186.677 li
@
124.894 186.677 mo
125.614 186.677 li
@
128.734 186.677 mo
129.454 186.677 li
@
132.574 186.677 mo
133.294 186.677 li
@
136.414 186.677 mo
137.134 186.677 li
@
140.254 186.677 mo
140.974 186.677 li
@
144.094 186.677 mo
144.814 186.677 li
@
147.934 186.677 mo
148.654 186.677 li
@
151.774 186.677 mo
152.494 186.677 li
@
155.614 186.677 mo
156.334 186.677 li
@
159.454 186.677 mo
160.174 186.677 li
@
163.294 186.677 mo
164.014 186.677 li
@
167.134 186.677 mo
167.854 186.677 li
@
170.974 186.677 mo
171.694 186.677 li
@
174.814 186.677 mo
175.534 186.677 li
@
178.654 186.677 mo
179.374 186.677 li
@
182.494 186.677 mo
183.214 186.677 li
@
186.334 186.677 mo
187.054 186.677 li
@
190.174 186.677 mo
190.894 186.677 li
@
194.014 186.677 mo
194.734 186.677 li
@
197.854 186.677 mo
198.574 186.677 li
@
201.694 186.677 mo
202.414 186.677 li
@
205.534 186.677 mo
206.254 186.677 li
@
209.374 186.677 mo
210.094 186.677 li
@
213.214 186.677 mo
213.934 186.677 li
@
217.054 186.677 mo
217.774 186.677 li
@
220.894 186.677 mo
221.614 186.677 li
@
224.734 186.677 mo
225.454 186.677 li
@
228.574 186.677 mo
229.294 186.677 li
@
232.414 186.677 mo
233.134 186.677 li
@
236.254 186.677 mo
236.974 186.677 li
@
240.094 186.677 mo
240.814 186.677 li
@
243.934 186.677 mo
244.654 186.677 li
@
247.774 186.677 mo
248.494 186.677 li
@
251.614 186.677 mo
252.334 186.677 li
@
255.454 186.677 mo
256.174 186.677 li
@
259.294 186.677 mo
260.014 186.677 li
@
263.135 186.677 mo
263.855 186.677 li
@
266.975 186.677 mo
267.695 186.677 li
@
270.815 186.677 mo
271.535 186.677 li
@
274.655 186.677 mo
275.375 186.677 li
@
278.495 186.677 mo
279.215 186.677 li
@
282.335 186.677 mo
283.055 186.677 li
@
286.175 186.677 mo
286.895 186.677 li
@
290.015 186.677 mo
290.735 186.677 li
@
293.855 186.677 mo
294.575 186.677 li
@
297.695 186.677 mo
298.415 186.677 li
@
301.535 186.677 mo
302.255 186.677 li
@
305.375 186.677 mo
306.095 186.677 li
@
309.215 186.677 mo
309.935 186.677 li
@
313.055 186.677 mo
313.775 186.677 li
@
316.895 186.677 mo
317.615 186.677 li
@
320.735 186.677 mo
321.455 186.677 li
@
324.575 186.677 mo
325.295 186.677 li
@
328.415 186.677 mo
329.135 186.677 li
@
332.255 186.677 mo
332.975 186.677 li
@
336.095 186.677 mo
336.815 186.677 li
@
339.935 186.677 mo
340.655 186.677 li
@
343.775 186.677 mo
344.495 186.677 li
@
347.615 186.677 mo
348.335 186.677 li
@
351.455 186.677 mo
352.175 186.677 li
@
355.295 186.677 mo
356.015 186.677 li
@
359.135 186.677 mo
359.855 186.677 li
@
362.975 186.677 mo
363.695 186.677 li
@
366.815 186.677 mo
367.535 186.677 li
@
370.655 186.677 mo
371.375 186.677 li
@
374.495 186.677 mo
375.215 186.677 li
@
378.335 186.677 mo
379.055 186.677 li
@
382.175 186.677 mo
382.895 186.677 li
@
386.015 186.677 mo
386.735 186.677 li
@
389.855 186.677 mo
390.575 186.677 li
@
393.695 186.677 mo
394.415 186.677 li
@
397.535 186.677 mo
398.255 186.677 li
@
401.375 186.677 mo
402.095 186.677 li
@
405.215 186.677 mo
405.935 186.677 li
@
409.055 186.677 mo
409.775 186.677 li
@
412.895 186.677 mo
413.615 186.677 li
@
416.735 186.677 mo
417.455 186.677 li
@
420.575 186.677 mo
421.295 186.677 li
@
424.415 186.677 mo
425.135 186.677 li
@
428.255 186.677 mo
428.975 186.677 li
@
432.095 186.677 mo
432.815 186.677 li
@
435.935 186.677 mo
436.655 186.677 li
@
439.775 186.677 mo
440.495 186.677 li
@
443.615 186.677 mo
444.335 186.677 li
@
447.455 186.677 mo
448.175 186.677 li
@
451.295 186.677 mo
452.015 186.677 li
@
455.135 186.677 mo
455.855 186.677 li
@
458.975 186.677 mo
459.695 186.677 li
@
462.815 186.677 mo
463.535 186.677 li
@
466.656 186.677 mo
467.375 186.677 li
@
470.496 186.677 mo
471.216 186.677 li
@
474.336 186.677 mo
475.056 186.677 li
@
478.176 186.677 mo
478.896 186.677 li
@
482.016 186.677 mo
482.736 186.677 li
@
485.856 186.677 mo
486.576 186.677 li
@
489.696 186.677 mo
490.416 186.677 li
@
493.536 186.677 mo
494.256 186.677 li
@
497.376 186.677 mo
498.096 186.677 li
@
501.216 186.677 mo
501.936 186.677 li
@
505.056 186.677 mo
505.776 186.677 li
@
508.896 186.677 mo
509.616 186.677 li
@
512.736 186.677 mo
513.456 186.677 li
@
516.576 186.677 mo
517.296 186.677 li
@
520.416 186.677 mo
521.136 186.677 li
@
524.256 186.677 mo
524.976 186.677 li
@
528.096 186.677 mo
528.816 186.677 li
@
531.936 186.677 mo
532.656 186.677 li
@
535.776 186.677 mo
536.496 186.677 li
@
539.616 186.677 mo
540.336 186.677 li
@
543.456 186.677 mo
544.176 186.677 li
@
547.296 186.677 mo
548.016 186.677 li
@
551.136 186.677 mo
551.856 186.677 li
@
554.976 186.677 mo
555.696 186.677 li
@
558.816 186.677 mo
559.536 186.677 li
@
562.656 186.677 mo
563.376 186.677 li
@
566.496 186.677 mo
567.216 186.677 li
@
570.336 186.677 mo
571.056 186.677 li
@
574.176 186.677 mo
574.896 186.677 li
@
578.016 186.677 mo
578.736 186.677 li
@
581.856 186.677 mo
582.576 186.677 li
@
585.696 186.677 mo
586.416 186.677 li
@
589.536 186.677 mo
590.256 186.677 li
@
593.376 186.677 mo
594.096 186.677 li
@
597.216 186.677 mo
597.936 186.677 li
@
601.057 186.677 mo
601.776 186.677 li
@
604.897 186.677 mo
605.617 186.677 li
@
608.737 186.677 mo
609.457 186.677 li
@
612.577 186.677 mo
613.297 186.677 li
@
616.417 186.677 mo
617.137 186.677 li
@
620.257 186.677 mo
620.977 186.677 li
@
624.097 186.677 mo
624.817 186.677 li
@
627.937 186.677 mo
628.657 186.677 li
@
631.777 186.677 mo
632.497 186.677 li
@
635.617 186.677 mo
636.337 186.677 li
@
639.457 186.677 mo
640.177 186.677 li
@
643.297 186.677 mo
644.017 186.677 li
@
647.137 186.677 mo
647.857 186.677 li
@
650.977 186.677 mo
651.697 186.677 li
@
654.817 186.677 mo
655.537 186.677 li
@
98.0149 152.357 mo
98.7349 152.357 li
@
101.855 152.357 mo
102.575 152.357 li
@
105.695 152.357 mo
106.415 152.357 li
@
109.535 152.357 mo
110.255 152.357 li
@
113.375 152.357 mo
114.095 152.357 li
@
117.215 152.357 mo
117.935 152.357 li
@
121.055 152.357 mo
121.775 152.357 li
@
124.895 152.357 mo
125.615 152.357 li
@
128.735 152.357 mo
129.455 152.357 li
@
132.575 152.357 mo
133.295 152.357 li
@
136.415 152.357 mo
137.135 152.357 li
@
140.255 152.357 mo
140.975 152.357 li
@
144.095 152.357 mo
144.815 152.357 li
@
147.935 152.357 mo
148.655 152.357 li
@
151.775 152.357 mo
152.495 152.357 li
@
155.615 152.357 mo
156.335 152.357 li
@
159.455 152.357 mo
160.175 152.357 li
@
163.295 152.357 mo
164.015 152.357 li
@
167.135 152.357 mo
167.855 152.357 li
@
170.975 152.357 mo
171.695 152.357 li
@
174.815 152.357 mo
175.535 152.357 li
@
178.655 152.357 mo
179.375 152.357 li
@
182.495 152.357 mo
183.215 152.357 li
@
186.335 152.357 mo
187.055 152.357 li
@
190.175 152.357 mo
190.895 152.357 li
@
194.015 152.357 mo
194.735 152.357 li
@
197.855 152.357 mo
198.575 152.357 li
@
201.695 152.357 mo
202.415 152.357 li
@
205.535 152.357 mo
206.255 152.357 li
@
209.375 152.357 mo
210.095 152.357 li
@
213.215 152.357 mo
213.935 152.357 li
@
217.055 152.357 mo
217.775 152.357 li
@
220.895 152.357 mo
221.615 152.357 li
@
224.735 152.357 mo
225.455 152.357 li
@
228.575 152.357 mo
229.295 152.357 li
@
232.415 152.357 mo
233.135 152.357 li
@
236.255 152.357 mo
236.975 152.357 li
@
240.095 152.357 mo
240.815 152.357 li
@
243.935 152.357 mo
244.655 152.357 li
@
247.775 152.357 mo
248.495 152.357 li
@
251.615 152.357 mo
252.335 152.357 li
@
255.455 152.357 mo
256.175 152.357 li
@
259.295 152.357 mo
260.015 152.357 li
@
263.136 152.357 mo
263.856 152.357 li
@
266.976 152.357 mo
267.696 152.357 li
@
270.816 152.357 mo
271.536 152.357 li
@
274.656 152.357 mo
275.376 152.357 li
@
278.496 152.357 mo
279.216 152.357 li
@
282.336 152.357 mo
283.056 152.357 li
@
286.176 152.357 mo
286.896 152.357 li
@
290.016 152.357 mo
290.736 152.357 li
@
293.856 152.357 mo
294.576 152.357 li
@
297.696 152.357 mo
298.416 152.357 li
@
301.536 152.357 mo
302.256 152.357 li
@
305.376 152.357 mo
306.096 152.357 li
@
309.216 152.357 mo
309.936 152.357 li
@
313.056 152.357 mo
313.776 152.357 li
@
316.896 152.357 mo
317.616 152.357 li
@
320.736 152.357 mo
321.456 152.357 li
@
324.576 152.357 mo
325.296 152.357 li
@
328.416 152.357 mo
329.136 152.357 li
@
332.256 152.357 mo
332.976 152.357 li
@
336.096 152.357 mo
336.816 152.357 li
@
339.936 152.357 mo
340.656 152.357 li
@
343.776 152.357 mo
344.496 152.357 li
@
347.616 152.357 mo
348.336 152.357 li
@
351.456 152.357 mo
352.176 152.357 li
@
355.296 152.357 mo
356.016 152.357 li
@
359.136 152.357 mo
359.856 152.357 li
@
362.976 152.357 mo
363.696 152.357 li
@
366.816 152.357 mo
367.536 152.357 li
@
370.656 152.357 mo
371.376 152.357 li
@
374.496 152.357 mo
375.216 152.357 li
@
378.336 152.357 mo
379.056 152.357 li
@
382.176 152.357 mo
382.896 152.357 li
@
386.016 152.357 mo
386.736 152.357 li
@
389.856 152.357 mo
390.576 152.357 li
@
393.696 152.357 mo
394.416 152.357 li
@
397.536 152.357 mo
398.256 152.357 li
@
401.376 152.357 mo
402.096 152.357 li
@
405.216 152.357 mo
405.936 152.357 li
@
409.056 152.357 mo
409.776 152.357 li
@
412.896 152.357 mo
413.616 152.357 li
@
416.736 152.357 mo
417.456 152.357 li
@
420.576 152.357 mo
421.296 152.357 li
@
424.416 152.357 mo
425.136 152.357 li
@
428.256 152.357 mo
428.976 152.357 li
@
432.096 152.357 mo
432.816 152.357 li
@
435.936 152.357 mo
436.656 152.357 li
@
439.776 152.357 mo
440.496 152.357 li
@
443.616 152.357 mo
444.336 152.357 li
@
447.456 152.357 mo
448.176 152.357 li
@
451.296 152.357 mo
452.016 152.357 li
@
455.136 152.357 mo
455.856 152.357 li
@
458.976 152.357 mo
459.696 152.357 li
@
462.816 152.357 mo
463.536 152.357 li
@
466.657 152.357 mo
467.376 152.357 li
@
470.497 152.357 mo
471.217 152.357 li
@
474.337 152.357 mo
475.057 152.357 li
@
478.177 152.357 mo
478.897 152.357 li
@
482.017 152.357 mo
482.737 152.357 li
@
485.857 152.357 mo
486.577 152.357 li
@
489.697 152.357 mo
490.417 152.357 li
@
493.537 152.357 mo
494.257 152.357 li
@
497.377 152.357 mo
498.097 152.357 li
@
501.217 152.357 mo
501.937 152.357 li
@
505.057 152.357 mo
505.777 152.357 li
@
508.897 152.357 mo
509.617 152.357 li
@
512.737 152.357 mo
513.457 152.357 li
@
516.577 152.357 mo
517.297 152.357 li
@
520.417 152.357 mo
521.137 152.357 li
@
524.257 152.357 mo
524.977 152.357 li
@
528.097 152.357 mo
528.817 152.357 li
@
531.937 152.357 mo
532.657 152.357 li
@
535.777 152.357 mo
536.497 152.357 li
@
539.617 152.357 mo
540.337 152.357 li
@
543.457 152.357 mo
544.177 152.357 li
@
547.297 152.357 mo
548.017 152.357 li
@
551.137 152.357 mo
551.857 152.357 li
@
554.977 152.357 mo
555.697 152.357 li
@
558.817 152.357 mo
559.537 152.357 li
@
562.657 152.357 mo
563.377 152.357 li
@
566.497 152.357 mo
567.217 152.357 li
@
570.337 152.357 mo
571.057 152.357 li
@
574.177 152.357 mo
574.897 152.357 li
@
578.017 152.357 mo
578.737 152.357 li
@
581.857 152.357 mo
582.577 152.357 li
@
585.697 152.357 mo
586.417 152.357 li
@
589.537 152.357 mo
590.257 152.357 li
@
593.377 152.357 mo
594.097 152.357 li
@
597.217 152.357 mo
597.937 152.357 li
@
601.057 152.357 mo
601.777 152.357 li
@
604.898 152.357 mo
605.617 152.357 li
@
608.738 152.357 mo
609.458 152.357 li
@
612.578 152.357 mo
613.298 152.357 li
@
616.418 152.357 mo
617.138 152.357 li
@
620.258 152.357 mo
620.978 152.357 li
@
624.098 152.357 mo
624.818 152.357 li
@
627.938 152.357 mo
628.658 152.357 li
@
631.778 152.357 mo
632.498 152.357 li
@
635.618 152.357 mo
636.338 152.357 li
@
639.458 152.357 mo
640.178 152.357 li
@
643.298 152.357 mo
644.018 152.357 li
@
647.138 152.357 mo
647.858 152.357 li
@
650.978 152.357 mo
651.698 152.357 li
@
654.818 152.357 mo
655.538 152.357 li
@
98.0159 117.797 mo
98.7359 117.797 li
@
101.856 117.797 mo
102.576 117.797 li
@
105.696 117.797 mo
106.416 117.797 li
@
109.536 117.797 mo
110.256 117.797 li
@
113.376 117.797 mo
114.096 117.797 li
@
117.216 117.797 mo
117.936 117.797 li
@
121.056 117.797 mo
121.776 117.797 li
@
124.896 117.797 mo
125.616 117.797 li
@
128.736 117.797 mo
129.456 117.797 li
@
132.576 117.797 mo
133.296 117.797 li
@
136.416 117.797 mo
137.136 117.797 li
@
140.256 117.797 mo
140.976 117.797 li
@
144.096 117.797 mo
144.816 117.797 li
@
147.936 117.797 mo
148.656 117.797 li
@
151.776 117.797 mo
152.496 117.797 li
@
155.616 117.797 mo
156.336 117.797 li
@
159.456 117.797 mo
160.176 117.797 li
@
163.296 117.797 mo
164.016 117.797 li
@
167.136 117.797 mo
167.856 117.797 li
@
170.976 117.797 mo
171.696 117.797 li
@
174.816 117.797 mo
175.536 117.797 li
@
178.656 117.797 mo
179.376 117.797 li
@
182.496 117.797 mo
183.216 117.797 li
@
186.336 117.797 mo
187.056 117.797 li
@
190.176 117.797 mo
190.896 117.797 li
@
194.016 117.797 mo
194.736 117.797 li
@
197.856 117.797 mo
198.576 117.797 li
@
201.696 117.797 mo
202.416 117.797 li
@
205.536 117.797 mo
206.256 117.797 li
@
209.376 117.797 mo
210.096 117.797 li
@
213.216 117.797 mo
213.936 117.797 li
@
217.056 117.797 mo
217.776 117.797 li
@
220.896 117.797 mo
221.616 117.797 li
@
224.736 117.797 mo
225.456 117.797 li
@
228.576 117.797 mo
229.296 117.797 li
@
232.416 117.797 mo
233.136 117.797 li
@
236.256 117.797 mo
236.976 117.797 li
@
240.096 117.797 mo
240.816 117.797 li
@
243.936 117.797 mo
244.656 117.797 li
@
247.776 117.797 mo
248.496 117.797 li
@
251.616 117.797 mo
252.336 117.797 li
@
255.456 117.797 mo
256.176 117.797 li
@
259.296 117.797 mo
260.016 117.797 li
@
263.137 117.797 mo
263.857 117.797 li
@
266.977 117.797 mo
267.697 117.797 li
@
270.817 117.797 mo
271.537 117.797 li
@
274.657 117.797 mo
275.377 117.797 li
@
278.497 117.797 mo
279.217 117.797 li
@
282.337 117.797 mo
283.057 117.797 li
@
286.177 117.797 mo
286.897 117.797 li
@
290.017 117.797 mo
290.737 117.797 li
@
293.857 117.797 mo
294.577 117.797 li
@
297.697 117.797 mo
298.417 117.797 li
@
301.537 117.797 mo
302.257 117.797 li
@
305.377 117.797 mo
306.097 117.797 li
@
309.217 117.797 mo
309.937 117.797 li
@
313.057 117.797 mo
313.777 117.797 li
@
316.897 117.797 mo
317.617 117.797 li
@
320.737 117.797 mo
321.457 117.797 li
@
324.577 117.797 mo
325.297 117.797 li
@
328.417 117.797 mo
329.137 117.797 li
@
332.257 117.797 mo
332.977 117.797 li
@
336.097 117.797 mo
336.817 117.797 li
@
339.937 117.797 mo
340.657 117.797 li
@
343.777 117.797 mo
344.497 117.797 li
@
347.617 117.797 mo
348.337 117.797 li
@
351.457 117.797 mo
352.177 117.797 li
@
355.297 117.797 mo
356.017 117.797 li
@
359.137 117.797 mo
359.857 117.797 li
@
362.977 117.797 mo
363.697 117.797 li
@
366.817 117.797 mo
367.537 117.797 li
@
370.657 117.797 mo
371.377 117.797 li
@
374.497 117.797 mo
375.217 117.797 li
@
378.337 117.797 mo
379.057 117.797 li
@
382.177 117.797 mo
382.897 117.797 li
@
386.017 117.797 mo
386.737 117.797 li
@
389.857 117.797 mo
390.577 117.797 li
@
393.697 117.797 mo
394.417 117.797 li
@
397.537 117.797 mo
398.257 117.797 li
@
401.377 117.797 mo
402.097 117.797 li
@
405.217 117.797 mo
405.937 117.797 li
@
409.057 117.797 mo
409.777 117.797 li
@
412.897 117.797 mo
413.617 117.797 li
@
416.737 117.797 mo
417.457 117.797 li
@
420.577 117.797 mo
421.297 117.797 li
@
424.417 117.797 mo
425.137 117.797 li
@
428.257 117.797 mo
428.977 117.797 li
@
432.097 117.797 mo
432.817 117.797 li
@
435.937 117.797 mo
436.657 117.797 li
@
439.777 117.797 mo
440.497 117.797 li
@
443.617 117.797 mo
444.337 117.797 li
@
447.457 117.797 mo
448.177 117.797 li
@
451.297 117.797 mo
452.017 117.797 li
@
455.137 117.797 mo
455.857 117.797 li
@
458.977 117.797 mo
459.697 117.797 li
@
462.817 117.797 mo
463.537 117.797 li
@
466.658 117.797 mo
467.377 117.797 li
@
470.498 117.797 mo
471.218 117.797 li
@
474.338 117.797 mo
475.058 117.797 li
@
478.178 117.797 mo
478.898 117.797 li
@
482.018 117.797 mo
482.738 117.797 li
@
485.858 117.797 mo
486.578 117.797 li
@
489.698 117.797 mo
490.418 117.797 li
@
493.538 117.797 mo
494.258 117.797 li
@
497.378 117.797 mo
498.098 117.797 li
@
501.218 117.797 mo
501.938 117.797 li
@
505.058 117.797 mo
505.778 117.797 li
@
508.898 117.797 mo
509.618 117.797 li
@
512.738 117.797 mo
513.458 117.797 li
@
516.578 117.797 mo
517.298 117.797 li
@
520.418 117.797 mo
521.138 117.797 li
@
524.258 117.797 mo
524.978 117.797 li
@
528.098 117.797 mo
528.818 117.797 li
@
531.938 117.797 mo
532.658 117.797 li
@
535.778 117.797 mo
536.498 117.797 li
@
539.618 117.797 mo
540.338 117.797 li
@
543.458 117.797 mo
544.178 117.797 li
@
547.298 117.797 mo
548.018 117.797 li
@
551.138 117.797 mo
551.858 117.797 li
@
554.978 117.797 mo
555.698 117.797 li
@
558.818 117.797 mo
559.538 117.797 li
@
562.658 117.797 mo
563.378 117.797 li
@
566.498 117.797 mo
567.218 117.797 li
@
570.338 117.797 mo
571.058 117.797 li
@
574.178 117.797 mo
574.898 117.797 li
@
578.018 117.797 mo
578.738 117.797 li
@
581.858 117.797 mo
582.578 117.797 li
@
585.698 117.797 mo
586.418 117.797 li
@
589.538 117.797 mo
590.258 117.797 li
@
593.378 117.797 mo
594.098 117.797 li
@
597.218 117.797 mo
597.938 117.797 li
@
601.058 117.797 mo
601.778 117.797 li
@
604.898 117.797 mo
605.618 117.797 li
@
608.739 117.797 mo
609.458 117.797 li
@
612.579 117.797 mo
613.299 117.797 li
@
616.419 117.797 mo
617.139 117.797 li
@
620.259 117.797 mo
620.979 117.797 li
@
624.099 117.797 mo
624.819 117.797 li
@
627.939 117.797 mo
628.659 117.797 li
@
631.779 117.797 mo
632.499 117.797 li
@
635.619 117.797 mo
636.339 117.797 li
@
639.459 117.797 mo
640.179 117.797 li
@
643.299 117.797 mo
644.019 117.797 li
@
647.139 117.797 mo
647.859 117.797 li
@
650.979 117.797 mo
651.699 117.797 li
@
654.819 117.797 mo
655.539 117.797 li
@
98.0169 83.2367 mo
98.7369 83.2367 li
@
101.857 83.2367 mo
102.577 83.2367 li
@
105.697 83.2367 mo
106.417 83.2367 li
@
109.537 83.2367 mo
110.257 83.2367 li
@
113.377 83.2367 mo
114.097 83.2367 li
@
117.217 83.2367 mo
117.937 83.2367 li
@
121.057 83.2367 mo
121.777 83.2367 li
@
124.897 83.2367 mo
125.617 83.2367 li
@
128.737 83.2367 mo
129.457 83.2367 li
@
132.577 83.2367 mo
133.297 83.2367 li
@
136.417 83.2367 mo
137.137 83.2367 li
@
140.257 83.2367 mo
140.977 83.2367 li
@
144.097 83.2367 mo
144.817 83.2367 li
@
147.937 83.2367 mo
148.657 83.2367 li
@
151.777 83.2367 mo
152.497 83.2367 li
@
155.617 83.2367 mo
156.337 83.2367 li
@
159.457 83.2367 mo
160.177 83.2367 li
@
163.297 83.2367 mo
164.017 83.2367 li
@
167.137 83.2367 mo
167.857 83.2367 li
@
170.977 83.2367 mo
171.697 83.2367 li
@
174.817 83.2367 mo
175.537 83.2367 li
@
178.657 83.2367 mo
179.377 83.2367 li
@
182.497 83.2367 mo
183.217 83.2367 li
@
186.337 83.2367 mo
187.057 83.2367 li
@
190.177 83.2367 mo
190.897 83.2367 li
@
194.017 83.2367 mo
194.737 83.2367 li
@
197.857 83.2367 mo
198.577 83.2367 li
@
201.697 83.2367 mo
202.417 83.2367 li
@
205.537 83.2367 mo
206.257 83.2367 li
@
209.377 83.2367 mo
210.097 83.2367 li
@
213.217 83.2367 mo
213.937 83.2367 li
@
217.057 83.2367 mo
217.777 83.2367 li
@
220.897 83.2367 mo
221.617 83.2367 li
@
224.737 83.2367 mo
225.457 83.2367 li
@
228.577 83.2367 mo
229.297 83.2367 li
@
232.417 83.2367 mo
233.137 83.2367 li
@
236.257 83.2367 mo
236.977 83.2367 li
@
240.097 83.2367 mo
240.817 83.2367 li
@
243.937 83.2367 mo
244.657 83.2367 li
@
247.777 83.2367 mo
248.497 83.2367 li
@
251.617 83.2367 mo
252.337 83.2367 li
@
255.457 83.2367 mo
256.177 83.2367 li
@
259.297 83.2367 mo
260.017 83.2367 li
@
263.138 83.2367 mo
263.858 83.2367 li
@
266.978 83.2367 mo
267.698 83.2367 li
@
270.818 83.2367 mo
271.538 83.2367 li
@
274.658 83.2367 mo
275.378 83.2367 li
@
278.498 83.2367 mo
279.218 83.2367 li
@
282.338 83.2367 mo
283.058 83.2367 li
@
286.178 83.2367 mo
286.898 83.2367 li
@
290.018 83.2367 mo
290.738 83.2367 li
@
293.858 83.2367 mo
294.578 83.2367 li
@
297.698 83.2367 mo
298.418 83.2367 li
@
301.538 83.2367 mo
302.258 83.2367 li
@
305.378 83.2367 mo
306.098 83.2367 li
@
309.218 83.2367 mo
309.938 83.2367 li
@
313.058 83.2367 mo
313.778 83.2367 li
@
316.898 83.2367 mo
317.618 83.2367 li
@
320.738 83.2367 mo
321.458 83.2367 li
@
324.578 83.2367 mo
325.298 83.2367 li
@
328.418 83.2367 mo
329.138 83.2367 li
@
332.258 83.2367 mo
332.978 83.2367 li
@
336.098 83.2367 mo
336.818 83.2367 li
@
339.938 83.2367 mo
340.658 83.2367 li
@
343.778 83.2367 mo
344.498 83.2367 li
@
347.618 83.2367 mo
348.338 83.2367 li
@
351.458 83.2367 mo
352.178 83.2367 li
@
355.298 83.2367 mo
356.018 83.2367 li
@
359.138 83.2367 mo
359.858 83.2367 li
@
362.978 83.2367 mo
363.698 83.2367 li
@
366.818 83.2367 mo
367.538 83.2367 li
@
370.658 83.2367 mo
371.378 83.2367 li
@
374.498 83.2367 mo
375.218 83.2367 li
@
378.338 83.2367 mo
379.058 83.2367 li
@
382.178 83.2367 mo
382.898 83.2367 li
@
386.018 83.2367 mo
386.738 83.2367 li
@
389.858 83.2367 mo
390.578 83.2367 li
@
393.698 83.2367 mo
394.418 83.2367 li
@
397.538 83.2367 mo
398.258 83.2367 li
@
401.378 83.2367 mo
402.098 83.2367 li
@
405.218 83.2367 mo
405.938 83.2367 li
@
409.058 83.2367 mo
409.778 83.2367 li
@
412.898 83.2367 mo
413.618 83.2367 li
@
416.738 83.2367 mo
417.458 83.2367 li
@
420.578 83.2367 mo
421.298 83.2367 li
@
424.418 83.2367 mo
425.138 83.2367 li
@
428.258 83.2367 mo
428.978 83.2367 li
@
432.098 83.2367 mo
432.818 83.2367 li
@
435.938 83.2367 mo
436.658 83.2367 li
@
439.778 83.2367 mo
440.498 83.2367 li
@
443.618 83.2367 mo
444.338 83.2367 li
@
447.458 83.2367 mo
448.178 83.2367 li
@
451.298 83.2367 mo
452.018 83.2367 li
@
455.138 83.2367 mo
455.858 83.2367 li
@
458.978 83.2367 mo
459.698 83.2367 li
@
462.818 83.2367 mo
463.538 83.2367 li
@
466.659 83.2367 mo
467.378 83.2367 li
@
470.499 83.2367 mo
471.219 83.2367 li
@
474.339 83.2367 mo
475.059 83.2367 li
@
478.179 83.2367 mo
478.899 83.2367 li
@
482.019 83.2367 mo
482.739 83.2367 li
@
485.859 83.2367 mo
486.579 83.2367 li
@
489.699 83.2367 mo
490.419 83.2367 li
@
493.539 83.2367 mo
494.259 83.2367 li
@
497.379 83.2367 mo
498.099 83.2367 li
@
501.219 83.2367 mo
501.939 83.2367 li
@
505.059 83.2367 mo
505.779 83.2367 li
@
508.899 83.2367 mo
509.619 83.2367 li
@
512.739 83.2367 mo
513.459 83.2367 li
@
516.579 83.2367 mo
517.299 83.2367 li
@
520.419 83.2367 mo
521.139 83.2367 li
@
524.259 83.2367 mo
524.979 83.2367 li
@
528.099 83.2367 mo
528.819 83.2367 li
@
531.939 83.2367 mo
532.659 83.2367 li
@
535.779 83.2367 mo
536.499 83.2367 li
@
539.619 83.2367 mo
540.339 83.2367 li
@
543.459 83.2367 mo
544.179 83.2367 li
@
547.299 83.2367 mo
548.019 83.2367 li
@
551.139 83.2367 mo
551.859 83.2367 li
@
554.979 83.2367 mo
555.699 83.2367 li
@
558.819 83.2367 mo
559.539 83.2367 li
@
562.659 83.2367 mo
563.379 83.2367 li
@
566.499 83.2367 mo
567.219 83.2367 li
@
570.339 83.2367 mo
571.059 83.2367 li
@
574.179 83.2367 mo
574.899 83.2367 li
@
578.019 83.2367 mo
578.739 83.2367 li
@
581.859 83.2367 mo
582.579 83.2367 li
@
585.699 83.2367 mo
586.419 83.2367 li
@
589.539 83.2367 mo
590.259 83.2367 li
@
593.379 83.2367 mo
594.099 83.2367 li
@
597.219 83.2367 mo
597.939 83.2367 li
@
601.059 83.2367 mo
601.779 83.2367 li
@
604.899 83.2367 mo
605.619 83.2367 li
@
608.74 83.2367 mo
609.459 83.2367 li
@
612.58 83.2367 mo
613.299 83.2367 li
@
616.42 83.2367 mo
617.14 83.2367 li
@
620.26 83.2367 mo
620.98 83.2367 li
@
624.1 83.2367 mo
624.82 83.2367 li
@
627.94 83.2367 mo
628.66 83.2367 li
@
631.78 83.2367 mo
632.5 83.2367 li
@
635.62 83.2367 mo
636.34 83.2367 li
@
639.46 83.2367 mo
640.18 83.2367 li
@
643.3 83.2367 mo
644.02 83.2367 li
@
647.14 83.2367 mo
647.86 83.2367 li
@
650.98 83.2367 mo
651.7 83.2367 li
@
654.82 83.2367 mo
655.54 83.2367 li
@
98.0179 48.9156 mo
98.7379 48.9156 li
@
101.858 48.9156 mo
102.578 48.9156 li
@
105.698 48.9156 mo
106.418 48.9156 li
@
109.538 48.9156 mo
110.258 48.9156 li
@
113.378 48.9156 mo
114.098 48.9156 li
@
117.218 48.9156 mo
117.938 48.9156 li
@
121.058 48.9156 mo
121.778 48.9156 li
@
124.898 48.9156 mo
125.618 48.9156 li
@
128.738 48.9156 mo
129.458 48.9156 li
@
132.578 48.9156 mo
133.298 48.9156 li
@
136.418 48.9156 mo
137.138 48.9156 li
@
140.258 48.9156 mo
140.978 48.9156 li
@
144.098 48.9156 mo
144.818 48.9156 li
@
147.938 48.9156 mo
148.658 48.9156 li
@
151.778 48.9156 mo
152.498 48.9156 li
@
155.618 48.9156 mo
156.338 48.9156 li
@
159.458 48.9156 mo
160.178 48.9156 li
@
163.298 48.9156 mo
164.018 48.9156 li
@
167.138 48.9156 mo
167.858 48.9156 li
@
170.978 48.9156 mo
171.698 48.9156 li
@
174.818 48.9156 mo
175.538 48.9156 li
@
178.658 48.9156 mo
179.378 48.9156 li
@
182.498 48.9156 mo
183.218 48.9156 li
@
186.338 48.9156 mo
187.058 48.9156 li
@
190.178 48.9156 mo
190.898 48.9156 li
@
194.018 48.9156 mo
194.738 48.9156 li
@
197.858 48.9156 mo
198.578 48.9156 li
@
201.698 48.9156 mo
202.418 48.9156 li
@
205.538 48.9156 mo
206.258 48.9156 li
@
209.378 48.9156 mo
210.098 48.9156 li
@
213.218 48.9156 mo
213.938 48.9156 li
@
217.058 48.9156 mo
217.778 48.9156 li
@
220.898 48.9156 mo
221.618 48.9156 li
@
224.738 48.9156 mo
225.458 48.9156 li
@
228.578 48.9156 mo
229.298 48.9156 li
@
232.418 48.9156 mo
233.138 48.9156 li
@
236.258 48.9156 mo
236.978 48.9156 li
@
240.098 48.9156 mo
240.818 48.9156 li
@
243.938 48.9156 mo
244.658 48.9156 li
@
247.778 48.9156 mo
248.498 48.9156 li
@
251.618 48.9156 mo
252.338 48.9156 li
@
255.458 48.9156 mo
256.178 48.9156 li
@
259.298 48.9156 mo
260.018 48.9156 li
@
263.139 48.9156 mo
263.859 48.9156 li
@
266.979 48.9156 mo
267.699 48.9156 li
@
270.819 48.9156 mo
271.539 48.9156 li
@
274.659 48.9156 mo
275.379 48.9156 li
@
278.499 48.9156 mo
279.219 48.9156 li
@
282.339 48.9156 mo
283.059 48.9156 li
@
286.179 48.9156 mo
286.899 48.9156 li
@
290.019 48.9156 mo
290.739 48.9156 li
@
293.859 48.9156 mo
294.579 48.9156 li
@
297.699 48.9156 mo
298.419 48.9156 li
@
301.539 48.9156 mo
302.259 48.9156 li
@
305.379 48.9156 mo
306.099 48.9156 li
@
309.219 48.9156 mo
309.939 48.9156 li
@
313.059 48.9156 mo
313.779 48.9156 li
@
316.899 48.9156 mo
317.619 48.9156 li
@
320.739 48.9156 mo
321.459 48.9156 li
@
324.579 48.9156 mo
325.299 48.9156 li
@
328.419 48.9156 mo
329.139 48.9156 li
@
332.259 48.9156 mo
332.979 48.9156 li
@
336.099 48.9156 mo
336.819 48.9156 li
@
339.939 48.9156 mo
340.659 48.9156 li
@
343.779 48.9156 mo
344.499 48.9156 li
@
347.619 48.9156 mo
348.339 48.9156 li
@
351.459 48.9156 mo
352.179 48.9156 li
@
355.299 48.9156 mo
356.019 48.9156 li
@
359.139 48.9156 mo
359.859 48.9156 li
@
362.979 48.9156 mo
363.699 48.9156 li
@
366.819 48.9156 mo
367.539 48.9156 li
@
370.659 48.9156 mo
371.379 48.9156 li
@
374.499 48.9156 mo
375.219 48.9156 li
@
378.339 48.9156 mo
379.059 48.9156 li
@
382.179 48.9156 mo
382.899 48.9156 li
@
386.019 48.9156 mo
386.739 48.9156 li
@
389.859 48.9156 mo
390.579 48.9156 li
@
393.699 48.9156 mo
394.419 48.9156 li
@
397.539 48.9156 mo
398.259 48.9156 li
@
401.379 48.9156 mo
402.099 48.9156 li
@
405.219 48.9156 mo
405.939 48.9156 li
@
409.059 48.9156 mo
409.779 48.9156 li
@
412.899 48.9156 mo
413.619 48.9156 li
@
416.739 48.9156 mo
417.459 48.9156 li
@
420.579 48.9156 mo
421.299 48.9156 li
@
424.419 48.9156 mo
425.139 48.9156 li
@
428.259 48.9156 mo
428.979 48.9156 li
@
432.099 48.9156 mo
432.819 48.9156 li
@
435.939 48.9156 mo
436.659 48.9156 li
@
439.779 48.9156 mo
440.499 48.9156 li
@
443.619 48.9156 mo
444.339 48.9156 li
@
447.459 48.9156 mo
448.178 48.9156 li
@
451.299 48.9156 mo
452.018 48.9156 li
@
455.139 48.9156 mo
455.858 48.9156 li
@
458.979 48.9156 mo
459.698 48.9156 li
@
462.819 48.9156 mo
463.538 48.9156 li
@
466.66 48.9156 mo
467.379 48.9156 li
@
470.5 48.9156 mo
471.22 48.9156 li
@
474.34 48.9156 mo
475.06 48.9156 li
@
478.18 48.9156 mo
478.9 48.9156 li
@
482.02 48.9156 mo
482.74 48.9156 li
@
485.86 48.9156 mo
486.58 48.9156 li
@
489.7 48.9156 mo
490.42 48.9156 li
@
493.54 48.9156 mo
494.26 48.9156 li
@
497.38 48.9156 mo
498.1 48.9156 li
@
501.22 48.9156 mo
501.94 48.9156 li
@
505.06 48.9156 mo
505.78 48.9156 li
@
508.9 48.9156 mo
509.62 48.9156 li
@
512.74 48.9156 mo
513.46 48.9156 li
@
516.58 48.9156 mo
517.3 48.9156 li
@
520.42 48.9156 mo
521.14 48.9156 li
@
524.26 48.9156 mo
524.98 48.9156 li
@
528.1 48.9156 mo
528.82 48.9156 li
@
531.94 48.9156 mo
532.66 48.9156 li
@
535.78 48.9156 mo
536.5 48.9156 li
@
539.62 48.9156 mo
540.34 48.9156 li
@
543.46 48.9156 mo
544.18 48.9156 li
@
547.3 48.9156 mo
548.02 48.9156 li
@
551.14 48.9156 mo
551.86 48.9156 li
@
554.98 48.9156 mo
555.7 48.9156 li
@
558.82 48.9156 mo
559.54 48.9156 li
@
562.66 48.9156 mo
563.38 48.9156 li
@
566.5 48.9156 mo
567.22 48.9156 li
@
570.34 48.9156 mo
571.06 48.9156 li
@
574.18 48.9156 mo
574.9 48.9156 li
@
578.02 48.9156 mo
578.74 48.9156 li
@
581.86 48.9156 mo
582.58 48.9156 li
@
585.7 48.9156 mo
586.42 48.9156 li
@
589.54 48.9156 mo
590.26 48.9156 li
@
593.38 48.9156 mo
594.1 48.9156 li
@
597.22 48.9156 mo
597.94 48.9156 li
@
601.06 48.9156 mo
601.78 48.9156 li
@
604.9 48.9156 mo
605.62 48.9156 li
@
608.74 48.9156 mo
609.46 48.9156 li
@
612.581 48.9156 mo
613.3 48.9156 li
@
616.421 48.9156 mo
617.141 48.9156 li
@
620.261 48.9156 mo
620.981 48.9156 li
@
624.101 48.9156 mo
624.821 48.9156 li
@
627.941 48.9156 mo
628.661 48.9156 li
@
631.781 48.9156 mo
632.501 48.9156 li
@
635.621 48.9156 mo
636.341 48.9156 li
@
639.461 48.9156 mo
640.181 48.9156 li
@
643.301 48.9156 mo
644.021 48.9156 li
@
647.141 48.9156 mo
647.861 48.9156 li
@
650.981 48.9156 mo
651.701 48.9156 li
@
654.821 48.9156 mo
655.541 48.9156 li
@
gsave
98.0189 14.3596 mo
656.745 14.3596 li
656.745 428.357 li
98.0189 428.357 li
cp
eclp
120.339 354.677 mo
120.339 363.797 li
0 gry
@
115.779 359.237 mo
124.899 359.237 li
@
123.699 154.517 mo
123.699 163.637 li
@
119.139 159.077 mo
128.259 159.077 li
@
128.259 37.3956 mo
128.259 46.5157 li
@
123.699 41.9556 mo
132.819 41.9556 li
@
168.099 182.117 mo
168.099 191.237 li
@
163.539 186.677 mo
172.659 186.677 li
@
170.979 137.477 mo
170.979 146.597 li
@
166.419 142.037 mo
175.539 142.037 li
@
177.699 216.677 mo
177.699 225.796 li
@
173.139 221.236 mo
182.259 221.236 li
@
202.179 251.236 mo
202.179 260.356 li
@
197.619 255.796 mo
206.739 255.796 li
@
209.619 37.3956 mo
209.619 46.5157 li
@
205.059 41.9556 mo
214.179 41.9556 li
@
215.619 158.117 mo
215.619 167.237 li
@
211.059 162.677 mo
220.179 162.677 li
@
245.139 182.117 mo
245.139 191.237 li
@
240.579 186.677 mo
249.699 186.677 li
@
250.899 285.557 mo
250.899 294.677 li
@
246.339 290.117 mo
255.459 290.117 li
@
255.459 354.677 mo
255.459 363.797 li
@
250.899 359.237 mo
260.019 359.237 li
@
282.1 216.677 mo
282.1 225.796 li
@
277.54 221.236 mo
286.66 221.236 li
@
288.1 189.077 mo
288.1 198.197 li
@
283.54 193.637 mo
292.66 193.637 li
@
288.34 216.677 mo
288.34 225.796 li
@
283.78 221.236 mo
292.9 221.236 li
@
295.78 426.917 mo
295.78 436.037 li
@
291.22 431.477 mo
300.34 431.477 li
@
295.78 137.477 mo
295.78 146.597 li
@
291.22 142.037 mo
300.34 142.037 li
@
326.74 182.117 mo
326.74 191.237 li
@
322.18 186.677 mo
331.3 186.677 li
@
333.94 216.677 mo
333.94 225.796 li
@
329.38 221.236 mo
338.5 221.236 li
@
336.58 423.556 mo
336.58 432.677 li
@
332.02 428.117 mo
341.14 428.117 li
@
362.02 182.117 mo
362.02 191.237 li
@
357.46 186.677 mo
366.58 186.677 li
@
374.98 113.237 mo
374.98 122.357 li
@
370.42 117.797 mo
379.54 117.797 li
@
444.34 196.037 mo
444.34 205.157 li
@
439.78 200.597 mo
448.9 200.597 li
@
446.02 388.997 mo
446.02 398.117 li
@
441.46 393.557 mo
450.58 393.557 li
@
481.781 285.557 mo
481.781 294.677 li
@
477.221 290.117 mo
486.341 290.117 li
@
482.261 216.677 mo
482.261 225.796 li
@
477.701 221.236 mo
486.821 221.236 li
@
482.741 354.677 mo
482.741 363.797 li
@
478.181 359.237 mo
487.301 359.237 li
@
488.981 388.997 mo
488.981 398.117 li
@
484.421 393.557 mo
493.541 393.557 li
@
489.701 251.236 mo
489.701 260.356 li
@
485.141 255.796 mo
494.261 255.796 li
@
490.421 251.236 mo
490.421 260.356 li
@
485.861 255.796 mo
494.981 255.796 li
@
493.301 251.236 mo
493.301 260.356 li
@
488.741 255.796 mo
497.861 255.796 li
@
527.621 333.797 mo
527.621 342.917 li
@
523.061 338.357 mo
532.181 338.357 li
@
531.221 354.677 mo
531.221 363.797 li
@
526.661 359.237 mo
535.781 359.237 li
@
567.461 251.236 mo
567.461 260.356 li
@
562.901 255.796 mo
572.021 255.796 li
@
647.141 320.117 mo
647.141 329.237 li
@
642.581 324.677 mo
651.701 324.677 li
@
652.901 347.717 mo
652.901 356.837 li
@
648.341 352.277 mo
657.461 352.277 li
@
grestore
gsave
98.0189 14.3566 mo
656.745 14.3566 li
656.745 428.357 li
98.0189 428.357 li
cp
eclp
gsave
-48.8021 -52.3624 mo
771.138 -52.3624 li
771.138 523.578 li
-48.8021 523.578 li
cp
clp
636.584 290.597 mo
638.024 295.637 li
643.544 295.637 li
639.224 298.757 li
640.904 304.037 li
636.584 300.677 li
632.024 304.037 li
633.704 298.757 li
629.384 295.637 li
634.904 295.637 li
1 gry
ef
.96 lw
636.581 290.596 mo
638.021 295.636 li
643.541 295.636 li
639.221 298.756 li
640.901 304.036 li
636.581 300.676 li
632.021 304.036 li
633.701 298.756 li
629.381 295.636 li
634.901 295.636 li
cp
0 gry
@
2.16 lw
237.699 33.0736 mo
636.581 298.036 li
1035.47 563.237 li
@
1.2 lw
237.699 136.515 mo
636.581 401.476 li
1035.47 666.677 li
@
grestore
grestore
2.16 lw
161.859 133.635 mo
168.579 137.235 li
0 gry
@
178.179 142.755 mo
184.899 146.355 li
@
194.259 151.635 mo
200.979 155.235 li
@
210.579 160.515 mo
217.299 164.355 li
@
226.659 169.395 mo
233.379 173.235 li
@
242.979 178.515 mo
249.699 182.355 li
@
259.059 187.395 mo
265.78 191.235 li
@
275.38 196.515 mo
282.1 200.115 li
@
291.46 205.395 mo
298.18 208.995 li
@
307.78 214.515 mo
314.5 218.115 li
@
323.86 223.395 mo
330.58 226.995 li
@
340.18 232.275 mo
346.9 236.115 li
@
356.26 241.155 mo
362.98 244.995 li
@
372.58 250.275 mo
379.3 254.115 li
@
388.66 259.155 mo
395.38 262.996 li
@
404.98 268.276 mo
411.7 271.876 li
@
421.06 277.156 mo
427.78 280.756 li
@
437.38 286.036 mo
444.1 289.876 li
@
453.46 295.156 mo
460.18 298.756 li
@
469.781 304.036 mo
476.501 307.876 li
@
485.861 312.916 mo
492.581 316.756 li
@
502.181 322.036 mo
508.901 325.636 li
@
518.261 330.916 mo
524.981 334.756 li
@
534.581 340.036 mo
541.301 343.636 li
@
550.661 348.916 mo
557.381 352.516 li
@
170.02 145.637 mo
170.02 148.42 167.763 150.677 164.98 150.677 cv
162.196 150.677 159.94 148.42 159.94 145.637 cv
159.94 142.853 162.196 140.597 164.98 140.597 cv
167.763 140.597 170.02 142.853 170.02 145.637 cv
ef
.72 lw
170.019 145.635 mo
170.019 148.418 167.763 150.675 164.979 150.675 cv
162.196 150.675 159.939 148.418 159.939 145.635 cv
159.939 142.851 162.196 140.595 164.979 140.595 cv
167.763 140.595 170.019 142.851 170.019 145.635 cv
cp
@
170.26 142.517 mo
170.26 145.3 168.004 147.557 165.22 147.557 cv
162.436 147.557 160.18 145.3 160.18 142.517 cv
160.18 139.733 162.436 137.477 165.22 137.477 cv
168.004 137.477 170.26 139.733 170.26 142.517 cv
ef
170.259 142.515 mo
170.259 145.298 168.003 147.555 165.219 147.555 cv
162.436 147.555 160.179 145.298 160.179 142.515 cv
160.179 139.731 162.436 137.475 165.219 137.475 cv
168.003 137.475 170.259 139.731 170.259 142.515 cv
cp
@
170.5 139.637 mo
170.5 142.42 168.243 144.677 165.46 144.677 cv
162.676 144.677 160.42 142.42 160.42 139.637 cv
160.42 136.853 162.676 134.597 165.46 134.597 cv
168.243 134.597 170.5 136.853 170.5 139.637 cv
ef
170.499 139.635 mo
170.499 142.418 168.243 144.675 165.459 144.675 cv
162.676 144.675 160.419 142.418 160.419 139.635 cv
160.419 136.851 162.676 134.595 165.459 134.595 cv
168.243 134.595 170.499 136.851 170.499 139.635 cv
cp
@
180.34 127.397 mo
180.34 130.18 178.084 132.437 175.3 132.437 cv
172.517 132.437 170.26 130.18 170.26 127.397 cv
170.26 124.613 172.517 122.357 175.3 122.357 cv
178.084 122.357 180.34 124.613 180.34 127.397 cv
ef
180.339 127.395 mo
180.339 130.178 178.083 132.435 175.299 132.435 cv
172.516 132.435 170.259 130.178 170.259 127.395 cv
170.259 124.611 172.516 122.355 175.299 122.355 cv
178.083 122.355 180.339 124.611 180.339 127.395 cv
cp
@
182.74 144.677 mo
182.74 147.46 180.484 149.717 177.7 149.717 cv
174.917 149.717 172.66 147.46 172.66 144.677 cv
172.66 141.893 174.917 139.637 177.7 139.637 cv
180.484 139.637 182.74 141.893 182.74 144.677 cv
ef
182.739 144.675 mo
182.739 147.458 180.483 149.715 177.699 149.715 cv
174.916 149.715 172.659 147.458 172.659 144.675 cv
172.659 141.891 174.916 139.635 177.699 139.635 cv
180.483 139.635 182.739 141.891 182.739 144.675 cv
cp
@
182.98 148.757 mo
182.98 151.54 180.724 153.797 177.94 153.797 cv
175.157 153.797 172.9 151.54 172.9 148.757 cv
172.9 145.973 175.157 143.717 177.94 143.717 cv
180.724 143.717 182.98 145.973 182.98 148.757 cv
ef
182.979 148.755 mo
182.979 151.538 180.723 153.795 177.939 153.795 cv
175.156 153.795 172.899 151.538 172.899 148.755 cv
172.899 145.971 175.156 143.715 177.939 143.715 cv
180.723 143.715 182.979 145.971 182.979 148.755 cv
cp
@
220.66 161.477 mo
220.66 164.26 218.404 166.517 215.62 166.517 cv
212.837 166.517 210.58 164.26 210.58 161.477 cv
210.58 158.693 212.837 156.437 215.62 156.437 cv
218.404 156.437 220.66 158.693 220.66 161.477 cv
ef
220.659 161.475 mo
220.659 164.259 218.403 166.515 215.619 166.515 cv
212.836 166.515 210.579 164.259 210.579 161.475 cv
210.579 158.691 212.836 156.435 215.619 156.435 cv
218.403 156.435 220.659 158.691 220.659 161.475 cv
cp
@
248.021 181.877 mo
248.021 184.66 245.764 186.917 242.981 186.917 cv
240.197 186.917 237.941 184.66 237.941 181.877 cv
237.941 179.093 240.197 176.837 242.981 176.837 cv
245.764 176.837 248.021 179.093 248.021 181.877 cv
ef
248.019 181.875 mo
248.019 184.659 245.763 186.915 242.979 186.915 cv
240.196 186.915 237.939 184.659 237.939 181.875 cv
237.939 179.092 240.196 176.835 242.979 176.835 cv
245.763 176.835 248.019 179.092 248.019 181.875 cv
cp
@
248.501 200.597 mo
248.501 203.38 246.244 205.637 243.461 205.637 cv
240.677 205.637 238.421 203.38 238.421 200.597 cv
238.421 197.813 240.677 195.557 243.461 195.557 cv
246.244 195.557 248.501 197.813 248.501 200.597 cv
ef
248.499 200.595 mo
248.499 203.379 246.243 205.635 243.459 205.635 cv
240.676 205.635 238.419 203.379 238.419 200.595 cv
238.419 197.812 240.676 195.555 243.459 195.555 cv
246.243 195.555 248.499 197.812 248.499 200.595 cv
cp
@
250.421 171.557 mo
250.421 174.34 248.164 176.597 245.381 176.597 cv
242.597 176.597 240.341 174.34 240.341 171.557 cv
240.341 168.773 242.597 166.517 245.381 166.517 cv
248.164 166.517 250.421 168.773 250.421 171.557 cv
ef
250.419 171.555 mo
250.419 174.339 248.163 176.595 245.379 176.595 cv
242.596 176.595 240.339 174.339 240.339 171.555 cv
240.339 168.772 242.596 166.515 245.379 166.515 cv
248.163 166.515 250.419 168.772 250.419 171.555 cv
cp
@
250.421 181.877 mo
250.421 184.66 248.164 186.917 245.381 186.917 cv
242.597 186.917 240.341 184.66 240.341 181.877 cv
240.341 179.093 242.597 176.837 245.381 176.837 cv
248.164 176.837 250.421 179.093 250.421 181.877 cv
ef
250.419 181.875 mo
250.419 184.659 248.163 186.915 245.379 186.915 cv
242.596 186.915 240.339 184.659 240.339 181.875 cv
240.339 179.092 242.596 176.835 245.379 176.835 cv
248.163 176.835 250.419 179.092 250.419 181.875 cv
cp
@
251.141 225.317 mo
251.141 228.1 248.884 230.357 246.101 230.357 cv
243.317 230.357 241.061 228.1 241.061 225.317 cv
241.061 222.533 243.317 220.277 246.101 220.277 cv
248.884 220.277 251.141 222.533 251.141 225.317 cv
ef
251.139 225.315 mo
251.139 228.099 248.883 230.355 246.099 230.355 cv
243.316 230.355 241.059 228.099 241.059 225.315 cv
241.059 222.532 243.316 220.275 246.099 220.275 cv
248.883 220.275 251.139 222.532 251.139 225.315 cv
cp
@
252.581 157.397 mo
252.581 160.18 250.324 162.437 247.541 162.437 cv
244.757 162.437 242.501 160.18 242.501 157.397 cv
242.501 154.613 244.757 152.357 247.541 152.357 cv
250.324 152.357 252.581 154.613 252.581 157.397 cv
ef
252.579 157.395 mo
252.579 160.179 250.323 162.435 247.539 162.435 cv
244.756 162.435 242.499 160.179 242.499 157.395 cv
242.499 154.611 244.756 152.355 247.539 152.355 cv
250.323 152.355 252.579 154.611 252.579 157.395 cv
cp
@
290.261 169.156 mo
290.261 171.94 288.005 174.197 285.221 174.197 cv
282.438 174.197 280.181 171.94 280.181 169.156 cv
280.181 166.372 282.438 164.117 285.221 164.117 cv
288.005 164.117 290.261 166.372 290.261 169.156 cv
ef
290.26 169.154 mo
290.26 171.939 288.003 174.194 285.22 174.194 cv
282.436 174.194 280.18 171.939 280.18 169.154 cv
280.18 166.371 282.436 164.115 285.22 164.115 cv
288.003 164.115 290.26 166.371 290.26 169.154 cv
cp
@
290.741 250.516 mo
290.741 253.299 288.485 255.556 285.701 255.556 cv
282.918 255.556 280.661 253.299 280.661 250.516 cv
280.661 247.732 282.918 245.477 285.701 245.477 cv
288.485 245.477 290.741 247.732 290.741 250.516 cv
ef
290.74 250.514 mo
290.74 253.298 288.483 255.554 285.7 255.554 cv
282.916 255.554 280.66 253.298 280.66 250.514 cv
280.66 247.731 282.916 245.474 285.7 245.474 cv
288.483 245.474 290.74 247.731 290.74 250.514 cv
cp
@
290.981 197.476 mo
290.981 200.259 288.725 202.516 285.941 202.516 cv
283.158 202.516 280.901 200.259 280.901 197.476 cv
280.901 194.692 283.158 192.436 285.941 192.436 cv
288.725 192.436 290.981 194.692 290.981 197.476 cv
ef
290.98 197.474 mo
290.98 200.258 288.723 202.514 285.94 202.514 cv
283.156 202.514 280.9 200.258 280.9 197.474 cv
280.9 194.691 283.156 192.434 285.94 192.434 cv
288.723 192.434 290.98 194.691 290.98 197.474 cv
cp
@
291.701 170.836 mo
291.701 173.619 289.445 175.876 286.661 175.876 cv
283.878 175.876 281.621 173.619 281.621 170.836 cv
281.621 168.052 283.878 165.796 286.661 165.796 cv
289.445 165.796 291.701 168.052 291.701 170.836 cv
ef
291.7 170.834 mo
291.7 173.618 289.443 175.874 286.66 175.874 cv
283.876 175.874 281.62 173.618 281.62 170.834 cv
281.62 168.051 283.876 165.794 286.66 165.794 cv
289.443 165.794 291.7 168.051 291.7 170.834 cv
cp
@
301.781 175.396 mo
301.781 178.179 299.525 180.436 296.741 180.436 cv
293.958 180.436 291.701 178.179 291.701 175.396 cv
291.701 172.612 293.958 170.356 296.741 170.356 cv
299.525 170.356 301.781 172.612 301.781 175.396 cv
ef
301.78 175.394 mo
301.78 178.178 299.523 180.434 296.74 180.434 cv
293.956 180.434 291.7 178.178 291.7 175.394 cv
291.7 172.611 293.956 170.354 296.74 170.354 cv
299.523 170.354 301.78 172.611 301.78 175.394 cv
cp
@
329.621 200.596 mo
329.621 203.379 327.365 205.636 324.581 205.636 cv
321.798 205.636 319.541 203.379 319.541 200.596 cv
319.541 197.812 321.798 195.556 324.581 195.556 cv
327.365 195.556 329.621 197.812 329.621 200.596 cv
ef
329.62 200.594 mo
329.62 203.378 327.363 205.634 324.58 205.634 cv
321.796 205.634 319.54 203.378 319.54 200.594 cv
319.54 197.811 321.796 195.554 324.58 195.554 cv
327.363 195.554 329.62 197.811 329.62 200.594 cv
cp
@
329.862 205.636 mo
329.862 208.419 327.605 210.676 324.821 210.676 cv
322.038 210.676 319.781 208.419 319.781 205.636 cv
319.781 202.852 322.038 200.596 324.821 200.596 cv
327.605 200.596 329.862 202.852 329.862 205.636 cv
ef
329.86 205.634 mo
329.86 208.418 327.603 210.674 324.82 210.674 cv
322.036 210.674 319.78 208.418 319.78 205.634 cv
319.78 202.851 322.036 200.594 324.82 200.594 cv
327.603 200.594 329.86 202.851 329.86 205.634 cv
cp
@
330.342 189.556 mo
330.342 192.339 328.085 194.596 325.301 194.596 cv
322.518 194.596 320.261 192.339 320.261 189.556 cv
320.261 186.772 322.518 184.516 325.301 184.516 cv
328.085 184.516 330.342 186.772 330.342 189.556 cv
ef
330.34 189.554 mo
330.34 192.338 328.083 194.594 325.3 194.594 cv
322.516 194.594 320.26 192.338 320.26 189.554 cv
320.26 186.771 322.516 184.514 325.3 184.514 cv
328.083 184.514 330.34 186.771 330.34 189.554 cv
cp
@
337.542 170.836 mo
337.542 173.619 335.285 175.876 332.502 175.876 cv
329.718 175.876 327.461 173.619 327.461 170.836 cv
327.461 168.052 329.718 165.796 332.502 165.796 cv
335.285 165.796 337.542 168.052 337.542 170.836 cv
ef
337.54 170.834 mo
337.54 173.618 335.283 175.874 332.5 175.874 cv
329.716 175.874 327.46 173.618 327.46 170.834 cv
327.46 168.051 329.716 165.794 332.5 165.794 cv
335.283 165.794 337.54 168.051 337.54 170.834 cv
cp
@
332.262 264.436 mo
332.262 267.219 330.005 269.476 327.221 269.476 cv
324.438 269.476 322.181 267.219 322.181 264.436 cv
322.181 261.652 324.438 259.396 327.221 259.396 cv
330.005 259.396 332.262 261.652 332.262 264.436 cv
ef
332.26 264.435 mo
332.26 267.218 330.003 269.475 327.22 269.475 cv
324.436 269.475 322.18 267.218 322.18 264.435 cv
322.18 261.651 324.436 259.395 327.22 259.395 cv
330.003 259.395 332.26 261.651 332.26 264.435 cv
cp
@
334.662 247.156 mo
334.662 249.939 332.405 252.196 329.621 252.196 cv
326.838 252.196 324.581 249.939 324.581 247.156 cv
324.581 244.372 326.838 242.116 329.621 242.116 cv
332.405 242.116 334.662 244.372 334.662 247.156 cv
ef
334.66 247.154 mo
334.66 249.938 332.403 252.194 329.62 252.194 cv
326.836 252.194 324.58 249.938 324.58 247.154 cv
324.58 244.371 326.836 242.114 329.62 242.114 cv
332.403 242.114 334.66 244.371 334.66 247.154 cv
cp
@
337.782 233.956 mo
337.782 236.739 335.525 238.996 332.742 238.996 cv
329.958 238.996 327.701 236.739 327.701 233.956 cv
327.701 231.172 329.958 228.916 332.742 228.916 cv
335.525 228.916 337.782 231.172 337.782 233.956 cv
ef
337.78 233.954 mo
337.78 236.738 335.523 238.994 332.74 238.994 cv
329.956 238.994 327.7 236.738 327.7 233.954 cv
327.7 231.171 329.956 228.914 332.74 228.914 cv
335.523 228.914 337.78 231.171 337.78 233.954 cv
cp
@
339.942 180.196 mo
339.942 182.979 337.685 185.236 334.902 185.236 cv
332.118 185.236 329.862 182.979 329.862 180.196 cv
329.862 177.412 332.118 175.156 334.902 175.156 cv
337.685 175.156 339.942 177.412 339.942 180.196 cv
ef
339.94 180.194 mo
339.94 182.978 337.682 185.234 334.9 185.234 cv
332.116 185.234 329.859 182.978 329.859 180.194 cv
329.859 177.411 332.116 175.154 334.9 175.154 cv
337.682 175.154 339.94 177.411 339.94 180.194 cv
cp
@
342.582 183.076 mo
342.582 185.859 340.324 188.116 337.542 188.116 cv
334.758 188.116 332.501 185.859 332.501 183.076 cv
332.501 180.292 334.758 178.036 337.542 178.036 cv
340.324 178.036 342.582 180.292 342.582 183.076 cv
ef
342.579 183.074 mo
342.579 185.858 340.322 188.114 337.539 188.114 cv
334.755 188.114 332.499 185.858 332.499 183.074 cv
332.499 180.291 334.755 178.034 337.539 178.034 cv
340.322 178.034 342.579 180.291 342.579 183.074 cv
cp
@
370.181 262.036 mo
370.181 264.819 367.924 267.076 365.141 267.076 cv
362.357 267.076 360.101 264.819 360.101 262.036 cv
360.101 259.252 362.357 256.996 365.141 256.996 cv
367.924 256.996 370.181 259.252 370.181 262.036 cv
ef
370.179 262.035 mo
370.179 264.818 367.923 267.075 365.139 267.075 cv
362.355 267.075 360.099 264.818 360.099 262.035 cv
360.099 259.251 362.355 256.994 365.139 256.994 cv
367.923 256.994 370.179 259.251 370.179 262.035 cv
cp
@
371.381 264.436 mo
371.381 267.219 369.124 269.476 366.341 269.476 cv
363.557 269.476 361.301 267.219 361.301 264.436 cv
361.301 261.652 363.557 259.396 366.341 259.396 cv
369.124 259.396 371.381 261.652 371.381 264.436 cv
ef
371.379 264.435 mo
371.379 267.218 369.123 269.475 366.339 269.475 cv
363.555 269.475 361.299 267.218 361.299 264.435 cv
361.299 261.651 363.555 259.395 366.339 259.395 cv
369.123 259.395 371.379 261.651 371.379 264.435 cv
cp
@
371.621 243.076 mo
371.621 245.859 369.364 248.116 366.581 248.116 cv
363.797 248.116 361.541 245.859 361.541 243.076 cv
361.541 240.292 363.797 238.036 366.581 238.036 cv
369.364 238.036 371.621 240.292 371.621 243.076 cv
ef
371.619 243.074 mo
371.619 245.858 369.363 248.114 366.579 248.114 cv
363.795 248.114 361.539 245.858 361.539 243.074 cv
361.539 240.291 363.795 238.034 366.579 238.034 cv
369.363 238.034 371.619 240.291 371.619 243.074 cv
cp
@
371.621 246.676 mo
371.621 249.459 369.364 251.716 366.581 251.716 cv
363.797 251.716 361.541 249.459 361.541 246.676 cv
361.541 243.892 363.797 241.636 366.581 241.636 cv
369.364 241.636 371.621 243.892 371.621 246.676 cv
ef
371.619 246.674 mo
371.619 249.458 369.363 251.714 366.579 251.714 cv
363.795 251.714 361.539 249.458 361.539 246.674 cv
361.539 243.891 363.795 241.634 366.579 241.634 cv
369.363 241.634 371.619 243.891 371.619 246.674 cv
cp
@
372.821 250.276 mo
372.821 253.059 370.564 255.316 367.781 255.316 cv
364.997 255.316 362.741 253.059 362.741 250.276 cv
362.741 247.492 364.997 245.236 367.781 245.236 cv
370.564 245.236 372.821 247.492 372.821 250.276 cv
ef
372.819 250.274 mo
372.819 253.058 370.563 255.314 367.779 255.314 cv
364.996 255.314 362.739 253.058 362.739 250.274 cv
362.739 247.491 364.996 245.234 367.779 245.234 cv
370.563 245.234 372.819 247.491 372.819 250.274 cv
cp
@
406.661 349.156 mo
406.661 351.939 404.405 354.196 401.621 354.196 cv
398.838 354.196 396.581 351.939 396.581 349.156 cv
396.581 346.372 398.838 344.116 401.621 344.116 cv
404.405 344.116 406.661 346.372 406.661 349.156 cv
ef
406.659 349.155 mo
406.659 351.938 404.403 354.195 401.619 354.195 cv
398.836 354.195 396.579 351.938 396.579 349.155 cv
396.579 346.371 398.836 344.115 401.619 344.115 cv
404.403 344.115 406.659 346.371 406.659 349.155 cv
cp
@
407.141 281.236 mo
407.141 284.019 404.885 286.276 402.101 286.276 cv
399.318 286.276 397.061 284.019 397.061 281.236 cv
397.061 278.452 399.318 276.196 402.101 276.196 cv
404.885 276.196 407.141 278.452 407.141 281.236 cv
ef
407.139 281.235 mo
407.139 284.018 404.883 286.275 402.099 286.275 cv
399.316 286.275 397.059 284.018 397.059 281.235 cv
397.059 278.451 399.316 276.195 402.099 276.195 cv
404.883 276.195 407.139 278.451 407.139 281.235 cv
cp
@
407.621 266.116 mo
407.621 268.899 405.365 271.156 402.581 271.156 cv
399.798 271.156 397.541 268.899 397.541 266.116 cv
397.541 263.332 399.798 261.076 402.581 261.076 cv
405.365 261.076 407.621 263.332 407.621 266.116 cv
ef
407.619 266.115 mo
407.619 268.898 405.363 271.155 402.579 271.155 cv
399.796 271.155 397.539 268.898 397.539 266.115 cv
397.539 263.331 399.796 261.075 402.579 261.075 cv
405.363 261.075 407.619 263.331 407.619 266.115 cv
cp
@
407.861 255.076 mo
407.861 257.859 405.605 260.116 402.821 260.116 cv
400.038 260.116 397.781 257.859 397.781 255.076 cv
397.781 252.292 400.038 250.036 402.821 250.036 cv
405.605 250.036 407.861 252.292 407.861 255.076 cv
ef
407.859 255.074 mo
407.859 257.858 405.603 260.114 402.819 260.114 cv
400.036 260.114 397.779 257.858 397.779 255.074 cv
397.779 252.291 400.036 250.034 402.819 250.034 cv
405.603 250.034 407.859 252.291 407.859 255.074 cv
cp
@
409.061 241.876 mo
409.061 244.659 406.805 246.916 404.021 246.916 cv
401.238 246.916 398.981 244.659 398.981 241.876 cv
398.981 239.092 401.238 236.836 404.021 236.836 cv
406.805 236.836 409.061 239.092 409.061 241.876 cv
ef
409.059 241.874 mo
409.059 244.658 406.803 246.914 404.019 246.914 cv
401.236 246.914 398.979 244.658 398.979 241.874 cv
398.979 239.091 401.236 236.834 404.019 236.834 cv
406.803 236.834 409.059 239.091 409.059 241.874 cv
cp
@
447.222 326.836 mo
447.222 329.619 444.965 331.876 442.182 331.876 cv
439.398 331.876 437.141 329.619 437.141 326.836 cv
437.141 324.052 439.398 321.796 442.182 321.796 cv
444.965 321.796 447.222 324.052 447.222 326.836 cv
ef
447.219 326.835 mo
447.219 329.618 444.963 331.875 442.179 331.875 cv
439.396 331.875 437.139 329.618 437.139 326.835 cv
437.139 324.051 439.396 321.795 442.179 321.795 cv
444.963 321.795 447.219 324.051 447.219 326.835 cv
cp
@
447.462 301.876 mo
447.462 304.659 445.205 306.916 442.422 306.916 cv
439.638 306.916 437.382 304.659 437.382 301.876 cv
437.382 299.092 439.638 296.836 442.422 296.836 cv
445.205 296.836 447.462 299.092 447.462 301.876 cv
ef
447.459 301.875 mo
447.459 304.658 445.203 306.915 442.419 306.915 cv
439.636 306.915 437.379 304.658 437.379 301.875 cv
437.379 299.091 439.636 296.835 442.419 296.835 cv
445.203 296.835 447.459 299.091 447.459 301.875 cv
cp
@
449.622 250.516 mo
449.622 253.299 447.365 255.556 444.582 255.556 cv
441.798 255.556 439.542 253.299 439.542 250.516 cv
439.542 247.732 441.798 245.476 444.582 245.476 cv
447.365 245.476 449.622 247.732 449.622 250.516 cv
ef
449.619 250.514 mo
449.619 253.298 447.363 255.554 444.579 255.554 cv
441.796 255.554 439.539 253.298 439.539 250.514 cv
439.539 247.731 441.796 245.474 444.579 245.474 cv
447.363 245.474 449.619 247.731 449.619 250.514 cv
cp
@
449.622 270.196 mo
449.622 272.979 447.365 275.236 444.582 275.236 cv
441.798 275.236 439.542 272.979 439.542 270.196 cv
439.542 267.412 441.798 265.156 444.582 265.156 cv
447.365 265.156 449.622 267.412 449.622 270.196 cv
ef
449.619 270.195 mo
449.619 272.978 447.363 275.235 444.579 275.235 cv
441.796 275.235 439.539 272.978 439.539 270.195 cv
439.539 267.411 441.796 265.155 444.579 265.155 cv
447.363 265.155 449.619 267.411 449.619 270.195 cv
cp
@
452.502 315.796 mo
452.502 318.579 450.245 320.836 447.462 320.836 cv
444.678 320.836 442.422 318.579 442.422 315.796 cv
442.422 313.012 444.678 310.756 447.462 310.756 cv
450.245 310.756 452.502 313.012 452.502 315.796 cv
ef
452.499 315.795 mo
452.499 318.578 450.243 320.835 447.459 320.835 cv
444.676 320.835 442.419 318.578 442.419 315.795 cv
442.419 313.011 444.676 310.755 447.459 310.755 cv
450.243 310.755 452.499 313.011 452.499 315.795 cv
cp
@
487.062 277.156 mo
487.062 279.939 484.805 282.196 482.022 282.196 cv
479.238 282.196 476.982 279.939 476.982 277.156 cv
476.982 274.372 479.238 272.116 482.022 272.116 cv
484.805 272.116 487.062 274.372 487.062 277.156 cv
ef
487.06 277.155 mo
487.06 279.938 484.803 282.195 482.02 282.195 cv
479.236 282.195 476.98 279.938 476.98 277.155 cv
476.98 274.371 479.236 272.115 482.02 272.115 cv
484.803 272.115 487.06 274.371 487.06 277.155 cv
cp
@
487.302 279.556 mo
487.302 282.339 485.045 284.596 482.262 284.596 cv
479.478 284.596 477.222 282.339 477.222 279.556 cv
477.222 276.772 479.478 274.516 482.262 274.516 cv
485.045 274.516 487.302 276.772 487.302 279.556 cv
ef
487.3 279.555 mo
487.3 282.338 485.043 284.595 482.26 284.595 cv
479.476 284.595 477.22 282.338 477.22 279.555 cv
477.22 276.771 479.476 274.515 482.26 274.515 cv
485.043 274.515 487.3 276.771 487.3 279.555 cv
cp
@
487.542 238.036 mo
487.542 240.819 485.285 243.076 482.502 243.076 cv
479.718 243.076 477.462 240.819 477.462 238.036 cv
477.462 235.252 479.718 232.996 482.502 232.996 cv
485.285 232.996 487.542 235.252 487.542 238.036 cv
ef
487.54 238.034 mo
487.54 240.818 485.283 243.074 482.5 243.074 cv
479.716 243.074 477.46 240.818 477.46 238.034 cv
477.46 235.251 479.716 232.994 482.5 232.994 cv
485.283 232.994 487.54 235.251 487.54 238.034 cv
cp
@
488.262 346.036 mo
488.262 348.819 486.005 351.076 483.222 351.076 cv
480.438 351.076 478.182 348.819 478.182 346.036 cv
478.182 343.252 480.438 340.996 483.222 340.996 cv
486.005 340.996 488.262 343.252 488.262 346.036 cv
ef
488.26 346.035 mo
488.26 348.818 486.003 351.075 483.22 351.075 cv
480.436 351.075 478.18 348.818 478.18 346.035 cv
478.18 343.251 480.436 340.995 483.22 340.995 cv
486.003 340.995 488.26 343.251 488.26 346.035 cv
cp
@
490.902 257.476 mo
490.902 260.259 488.645 262.516 485.862 262.516 cv
483.078 262.516 480.822 260.259 480.822 257.476 cv
480.822 254.692 483.078 252.436 485.862 252.436 cv
488.645 252.436 490.902 254.692 490.902 257.476 cv
ef
490.9 257.474 mo
490.9 260.258 488.643 262.515 485.86 262.515 cv
483.076 262.515 480.82 260.258 480.82 257.474 cv
480.82 254.691 483.076 252.434 485.86 252.434 cv
488.643 252.434 490.9 254.691 490.9 257.474 cv
cp
@
526.662 331.156 mo
526.662 333.939 524.406 336.196 521.622 336.196 cv
518.839 336.196 516.582 333.939 516.582 331.156 cv
516.582 328.372 518.839 326.116 521.622 326.116 cv
524.406 326.116 526.662 328.372 526.662 331.156 cv
ef
526.66 331.155 mo
526.66 333.938 524.403 336.195 521.62 336.195 cv
518.836 336.195 516.58 333.938 516.58 331.155 cv
516.58 328.371 518.836 326.115 521.62 326.115 cv
524.403 326.115 526.66 328.371 526.66 331.155 cv
cp
@
86.8994 454.416 mo
86.8994 455.937 86.8994 454.416 86.8994 455.937 cv
78.3824 455.937 86.8994 455.937 78.3824 455.937 cv
78.3704 455.556 78.4324 455.19 78.5664 454.838 cv
78.7834 454.258 79.1304 453.687 79.6084 453.124 cv
80.0864 452.562 80.7754 451.912 81.6784 451.173 cv
83.0784 450.025 84.0254 449.115 84.5174 448.444 cv
85.0094 447.774 85.2554 447.139 85.2554 446.541 cv
85.2554 445.915 85.0314 445.386 84.5834 444.955 cv
84.1344 444.524 83.5504 444.309 82.8294 444.309 cv
82.0674 444.309 81.4584 444.538 81.0014 444.995 cv
80.5444 445.452 80.3134 446.084 80.3074 446.893 cv
78.6814 446.726 80.3074 446.893 78.6814 446.726 cv
78.7924 445.513 79.2114 444.589 79.9384 443.953 cv
80.6644 443.317 81.6404 442.999 82.8644 442.999 cv
84.1014 442.999 85.0794 443.342 85.8004 444.028 cv
86.5214 444.713 86.8814 445.563 86.8814 446.577 cv
86.8814 447.092 86.7764 447.599 86.5654 448.097 cv
86.3544 448.595 86.0044 449.12 85.5144 449.67 cv
85.0254 450.221 84.2124 450.977 83.0754 451.938 cv
82.1264 452.735 81.5174 453.275 81.2474 453.56 cv
80.9784 453.844 80.7554 454.129 80.5794 454.416 cv
86.8994 454.416 80.5794 454.416 86.8994 454.416 cv
f
88.6844 449.582 mo
88.6844 448.059 88.8414 446.833 89.1544 445.904 cv
89.4684 444.976 89.9344 444.259 90.5524 443.755 cv
91.1704 443.252 91.9484 442.999 92.8854 442.999 cv
93.5774 442.999 94.1834 443.139 94.7054 443.417 cv
95.2264 443.695 95.6574 444.097 95.9974 444.621 cv
96.3374 445.145 96.6034 445.784 96.7964 446.537 cv
96.9904 447.29 97.0864 448.305 97.0864 449.582 cv
97.0864 451.094 96.9314 452.314 96.6214 453.243 cv
96.3104 454.172 95.8464 454.89 95.2284 455.396 cv
94.6094 455.903 93.8294 456.157 92.8854 456.157 cv
91.6434 456.157 90.6684 455.711 89.9584 454.821 cv
89.1094 453.748 88.6844 452.002 88.6844 449.582 cv
cp
90.3104 449.582 mo
90.3104 451.698 90.5584 453.105 91.0534 453.806 cv
91.5484 454.506 92.1594 454.856 92.8854 454.856 cv
93.6124 454.856 94.2234 454.504 94.7184 453.801 cv
95.2134 453.098 95.4604 451.692 95.4604 449.582 cv
95.4604 447.461 95.2134 446.052 94.7184 445.355 cv
94.2234 444.658 93.6064 444.309 92.8684 444.309 cv
92.1414 444.309 91.5614 444.617 91.1274 445.232 cv
90.5834 446.017 90.3104 447.467 90.3104 449.582 cv
f
98.7844 449.582 mo
98.7844 448.059 98.9414 446.833 99.2544 445.904 cv
99.5684 444.976 100.034 444.259 100.652 443.755 cv
101.27 443.252 102.048 442.999 102.985 442.999 cv
103.677 442.999 104.283 443.139 104.805 443.417 cv
105.326 443.695 105.757 444.097 106.097 444.621 cv
106.437 445.145 106.703 445.784 106.896 446.537 cv
107.09 447.29 107.186 448.305 107.186 449.582 cv
107.186 451.094 107.031 452.314 106.721 453.243 cv
106.41 454.172 105.946 454.89 105.328 455.396 cv
104.709 455.903 103.929 456.157 102.985 456.157 cv
101.743 456.157 100.768 455.711 100.058 454.821 cv
99.2094 453.748 98.7844 452.002 98.7844 449.582 cv
cp
100.41 449.582 mo
100.41 451.698 100.658 453.105 101.153 453.806 cv
101.648 454.506 102.259 454.856 102.985 454.856 cv
103.712 454.856 104.323 454.504 104.818 453.801 cv
105.313 453.098 105.56 451.692 105.56 449.582 cv
105.56 447.461 105.313 446.052 104.818 445.355 cv
104.323 444.658 103.706 444.309 102.968 444.309 cv
102.241 444.309 101.661 444.617 101.227 445.232 cv
100.683 446.017 100.41 447.467 100.41 449.582 cv
f
117.199 454.416 mo
117.199 455.937 117.199 454.416 117.199 455.937 cv
108.682 455.937 117.199 455.937 108.682 455.937 cv
108.67 455.556 108.732 455.19 108.866 454.838 cv
109.083 454.258 109.43 453.687 109.908 453.124 cv
110.386 452.562 111.075 451.912 111.978 451.173 cv
113.378 450.025 114.325 449.115 114.817 448.444 cv
115.309 447.774 115.555 447.139 115.555 446.541 cv
115.555 445.915 115.331 445.386 114.883 444.955 cv
114.434 444.524 113.85 444.309 113.129 444.309 cv
112.367 444.309 111.758 444.538 111.301 444.995 cv
110.844 445.452 110.613 446.084 110.607 446.893 cv
108.981 446.726 110.607 446.893 108.981 446.726 cv
109.092 445.513 109.511 444.589 110.238 443.953 cv
110.964 443.317 111.94 442.999 113.164 442.999 cv
114.401 442.999 115.379 443.342 116.1 444.028 cv
116.821 444.713 117.181 445.563 117.181 446.577 cv
117.181 447.092 117.076 447.599 116.865 448.097 cv
116.654 448.595 116.304 449.12 115.814 449.67 cv
115.325 450.221 114.512 450.977 113.375 451.938 cv
112.426 452.735 111.817 453.275 111.547 453.56 cv
111.278 453.844 111.055 454.129 110.879 454.416 cv
117.199 454.416 110.879 454.416 117.199 454.416 cv
f
166.599 454.416 mo
166.599 455.937 166.599 454.416 166.599 455.937 cv
158.082 455.937 166.599 455.937 158.082 455.937 cv
158.07 455.556 158.132 455.19 158.266 454.838 cv
158.483 454.258 158.83 453.687 159.308 453.124 cv
159.786 452.562 160.475 451.912 161.378 451.173 cv
162.778 450.025 163.725 449.115 164.217 448.444 cv
164.709 447.774 164.955 447.139 164.955 446.541 cv
164.955 445.915 164.731 445.386 164.283 444.955 cv
163.834 444.524 163.25 444.309 162.529 444.309 cv
161.767 444.309 161.158 444.538 160.701 444.995 cv
160.244 445.452 160.013 446.084 160.007 446.893 cv
158.381 446.726 160.007 446.893 158.381 446.726 cv
158.492 445.513 158.911 444.589 159.638 443.953 cv
160.364 443.317 161.34 442.999 162.564 442.999 cv
163.801 442.999 164.779 443.342 165.5 444.028 cv
166.221 444.713 166.581 445.563 166.581 446.577 cv
166.581 447.092 166.476 447.599 166.265 448.097 cv
166.054 448.595 165.704 449.12 165.214 449.67 cv
164.725 450.221 163.912 450.977 162.775 451.938 cv
161.826 452.735 161.217 453.275 160.947 453.56 cv
160.678 453.844 160.455 454.129 160.279 454.416 cv
166.599 454.416 160.279 454.416 166.599 454.416 cv
f
168.384 449.582 mo
168.384 448.059 168.541 446.833 168.854 445.904 cv
169.168 444.976 169.634 444.259 170.252 443.755 cv
170.87 443.252 171.648 442.999 172.585 442.999 cv
173.277 442.999 173.883 443.139 174.405 443.417 cv
174.926 443.695 175.357 444.097 175.697 444.621 cv
176.037 445.145 176.303 445.784 176.496 446.537 cv
176.69 447.29 176.786 448.305 176.786 449.582 cv
176.786 451.094 176.631 452.314 176.321 453.243 cv
176.01 454.172 175.546 454.89 174.928 455.396 cv
174.309 455.903 173.529 456.157 172.585 456.157 cv
171.343 456.157 170.368 455.711 169.658 454.821 cv
168.809 453.748 168.384 452.002 168.384 449.582 cv
cp
170.01 449.582 mo
170.01 451.698 170.258 453.105 170.753 453.806 cv
171.248 454.506 171.859 454.856 172.585 454.856 cv
173.312 454.856 173.923 454.504 174.418 453.801 cv
174.913 453.098 175.16 451.692 175.16 449.582 cv
175.16 447.461 174.913 446.052 174.418 445.355 cv
173.923 444.658 173.306 444.309 172.568 444.309 cv
171.841 444.309 171.261 444.617 170.827 445.232 cv
170.283 446.017 170.01 447.467 170.01 449.582 cv
f
178.484 449.582 mo
178.484 448.059 178.641 446.833 178.954 445.904 cv
179.268 444.976 179.734 444.259 180.352 443.755 cv
180.97 443.252 181.748 442.999 182.685 442.999 cv
183.377 442.999 183.983 443.139 184.505 443.417 cv
185.026 443.695 185.457 444.097 185.797 444.621 cv
186.137 445.145 186.403 445.784 186.596 446.537 cv
186.79 447.29 186.886 448.305 186.886 449.582 cv
186.886 451.094 186.731 452.314 186.421 453.243 cv
186.11 454.172 185.646 454.89 185.028 455.396 cv
184.409 455.903 183.629 456.157 182.685 456.157 cv
181.443 456.157 180.468 455.711 179.758 454.821 cv
178.909 453.748 178.484 452.002 178.484 449.582 cv
cp
180.11 449.582 mo
180.11 451.698 180.358 453.105 180.853 453.806 cv
181.348 454.506 181.959 454.856 182.685 454.856 cv
183.412 454.856 184.023 454.504 184.518 453.801 cv
185.013 453.098 185.26 451.692 185.26 449.582 cv
185.26 447.461 185.013 446.052 184.518 445.355 cv
184.023 444.658 183.406 444.309 182.668 444.309 cv
181.941 444.309 181.361 444.617 180.927 445.232 cv
180.383 446.017 180.11 447.467 180.11 449.582 cv
f
193.555 455.937 mo
193.555 452.852 193.555 455.937 193.555 452.852 cv
187.966 452.852 193.555 452.852 187.966 452.852 cv
187.966 451.402 187.966 452.852 187.966 451.402 cv
193.845 443.052 187.966 451.402 193.845 443.052 cv
195.137 443.052 193.845 443.052 195.137 443.052 cv
195.137 451.402 195.137 443.052 195.137 451.402 cv
196.878 451.402 195.137 451.402 196.878 451.402 cv
196.878 452.852 196.878 451.402 196.878 452.852 cv
195.137 452.852 196.878 452.852 195.137 452.852 cv
195.137 455.937 195.137 452.852 195.137 455.937 cv
193.555 455.937 195.137 455.937 193.555 455.937 cv
cp
193.555 451.402 mo
193.555 445.592 193.555 451.402 193.555 445.592 cv
189.521 451.402 193.555 445.592 189.521 451.402 cv
193.555 451.402 189.521 451.402 193.555 451.402 cv
f
246.499 454.416 mo
246.499 455.937 246.499 454.416 246.499 455.937 cv
237.982 455.937 246.499 455.937 237.982 455.937 cv
237.97 455.556 238.032 455.19 238.166 454.838 cv
238.383 454.258 238.73 453.687 239.208 453.124 cv
239.686 452.562 240.375 451.912 241.278 451.173 cv
242.678 450.025 243.625 449.115 244.117 448.444 cv
244.609 447.774 244.855 447.139 244.855 446.541 cv
244.855 445.915 244.631 445.386 244.183 444.955 cv
243.734 444.524 243.15 444.309 242.429 444.309 cv
241.667 444.309 241.058 444.538 240.601 444.995 cv
240.144 445.452 239.913 446.084 239.907 446.893 cv
238.281 446.726 239.907 446.893 238.281 446.726 cv
238.392 445.513 238.811 444.589 239.538 443.953 cv
240.264 443.317 241.24 442.999 242.464 442.999 cv
243.701 442.999 244.679 443.342 245.4 444.028 cv
246.121 444.713 246.481 445.563 246.481 446.577 cv
246.481 447.092 246.376 447.599 246.165 448.097 cv
245.954 448.595 245.604 449.12 245.114 449.67 cv
244.625 450.221 243.812 450.977 242.675 451.938 cv
241.726 452.735 241.117 453.275 240.847 453.56 cv
240.578 453.844 240.355 454.129 240.179 454.416 cv
246.499 454.416 240.179 454.416 246.499 454.416 cv
f
248.284 449.582 mo
248.284 448.059 248.441 446.833 248.754 445.904 cv
249.068 444.976 249.534 444.259 250.152 443.755 cv
250.77 443.252 251.548 442.999 252.485 442.999 cv
253.177 442.999 253.783 443.139 254.305 443.417 cv
254.826 443.695 255.257 444.097 255.597 444.621 cv
255.937 445.145 256.203 445.784 256.396 446.537 cv
256.59 447.29 256.686 448.305 256.686 449.582 cv
256.686 451.094 256.531 452.314 256.221 453.243 cv
255.91 454.172 255.446 454.89 254.828 455.396 cv
254.209 455.903 253.429 456.157 252.485 456.157 cv
251.243 456.157 250.268 455.711 249.558 454.821 cv
248.709 453.748 248.284 452.002 248.284 449.582 cv
cp
249.91 449.582 mo
249.91 451.698 250.158 453.105 250.653 453.806 cv
251.148 454.506 251.759 454.856 252.485 454.856 cv
253.212 454.856 253.823 454.504 254.318 453.801 cv
254.813 453.098 255.06 451.692 255.06 449.582 cv
255.06 447.461 254.813 446.052 254.318 445.355 cv
253.823 444.658 253.206 444.309 252.468 444.309 cv
251.741 444.309 251.161 444.617 250.727 445.232 cv
250.183 446.017 249.91 447.467 249.91 449.582 cv
f
258.384 449.582 mo
258.384 448.059 258.541 446.833 258.854 445.904 cv
259.168 444.976 259.634 444.259 260.252 443.755 cv
260.87 443.252 261.648 442.999 262.585 442.999 cv
263.277 442.999 263.883 443.139 264.405 443.417 cv
264.926 443.695 265.357 444.097 265.697 444.621 cv
266.037 445.145 266.303 445.784 266.496 446.537 cv
266.69 447.29 266.786 448.305 266.786 449.582 cv
266.786 451.094 266.631 452.314 266.321 453.243 cv
266.01 454.172 265.546 454.89 264.928 455.396 cv
264.309 455.903 263.529 456.157 262.585 456.157 cv
261.343 456.157 260.368 455.711 259.658 454.821 cv
258.809 453.748 258.384 452.002 258.384 449.582 cv
cp
260.01 449.582 mo
260.01 451.698 260.258 453.105 260.753 453.806 cv
261.248 454.506 261.859 454.856 262.585 454.856 cv
263.312 454.856 263.923 454.504 264.418 453.801 cv
264.913 453.098 265.16 451.692 265.16 449.582 cv
265.16 447.461 264.913 446.052 264.418 445.355 cv
263.923 444.658 263.306 444.309 262.568 444.309 cv
261.841 444.309 261.261 444.617 260.827 445.232 cv
260.283 446.017 260.01 447.467 260.01 449.582 cv
f
276.693 446.207 mo
275.12 446.331 276.693 446.207 275.12 446.331 cv
274.979 445.709 274.78 445.258 274.522 444.977 cv
274.094 444.526 273.567 444.3 272.94 444.3 cv
272.436 444.3 271.994 444.441 271.613 444.722 cv
271.115 445.085 270.722 445.616 270.435 446.313 cv
270.148 447.01 269.999 448.003 269.987 449.292 cv
270.368 448.712 270.834 448.282 271.384 448 cv
271.935 447.719 272.512 447.579 273.116 447.579 cv
274.171 447.579 275.069 447.967 275.81 448.743 cv
276.551 449.52 276.922 450.523 276.922 451.753 cv
276.922 452.562 276.747 453.313 276.399 454.008 cv
276.05 454.702 275.571 455.234 274.962 455.603 cv
274.352 455.972 273.661 456.157 272.887 456.157 cv
271.569 456.157 270.494 455.672 269.662 454.702 cv
268.83 453.732 268.414 452.134 268.414 449.908 cv
268.414 447.417 268.874 445.607 269.794 444.476 cv
270.596 443.492 271.677 442.999 273.037 442.999 cv
274.051 442.999 274.881 443.284 275.529 443.852 cv
276.176 444.42 276.564 445.206 276.693 446.207 cv
cp
270.233 451.762 mo
270.233 452.307 270.349 452.829 270.58 453.327 cv
270.812 453.825 271.135 454.204 271.551 454.465 cv
271.967 454.726 272.404 454.856 272.861 454.856 cv
273.529 454.856 274.103 454.586 274.584 454.047 cv
275.064 453.508 275.304 452.776 275.304 451.85 cv
275.304 450.959 275.067 450.258 274.593 449.745 cv
274.118 449.232 273.52 448.976 272.8 448.976 cv
272.085 448.976 271.478 449.232 270.98 449.745 cv
270.482 450.258 270.233 450.93 270.233 451.762 cv
f
326.199 454.416 mo
326.199 455.937 326.199 454.416 326.199 455.937 cv
317.682 455.937 326.199 455.937 317.682 455.937 cv
317.67 455.556 317.732 455.19 317.866 454.838 cv
318.083 454.258 318.43 453.687 318.908 453.124 cv
319.386 452.562 320.075 451.912 320.978 451.173 cv
322.378 450.025 323.325 449.115 323.817 448.444 cv
324.309 447.774 324.555 447.139 324.555 446.541 cv
324.555 445.915 324.331 445.386 323.883 444.955 cv
323.434 444.524 322.85 444.309 322.129 444.309 cv
321.367 444.309 320.758 444.538 320.301 444.995 cv
319.844 445.452 319.613 446.084 319.607 446.893 cv
317.981 446.726 319.607 446.893 317.981 446.726 cv
318.092 445.513 318.511 444.589 319.238 443.953 cv
319.964 443.317 320.94 442.999 322.164 442.999 cv
323.401 442.999 324.379 443.342 325.1 444.028 cv
325.821 444.713 326.181 445.563 326.181 446.577 cv
326.181 447.092 326.076 447.599 325.865 448.097 cv
325.654 448.595 325.304 449.12 324.814 449.67 cv
324.325 450.221 323.512 450.977 322.375 451.938 cv
321.426 452.735 320.817 453.275 320.547 453.56 cv
320.278 453.844 320.055 454.129 319.879 454.416 cv
326.199 454.416 319.879 454.416 326.199 454.416 cv
f
327.984 449.582 mo
327.984 448.059 328.141 446.833 328.454 445.904 cv
328.768 444.976 329.234 444.259 329.852 443.755 cv
330.47 443.252 331.248 442.999 332.185 442.999 cv
332.877 442.999 333.483 443.139 334.005 443.417 cv
334.526 443.695 334.957 444.097 335.297 444.621 cv
335.637 445.145 335.903 445.784 336.096 446.537 cv
336.29 447.29 336.386 448.305 336.386 449.582 cv
336.386 451.094 336.231 452.314 335.921 453.243 cv
335.61 454.172 335.146 454.89 334.528 455.396 cv
333.909 455.903 333.129 456.157 332.185 456.157 cv
330.943 456.157 329.968 455.711 329.258 454.821 cv
328.409 453.748 327.984 452.002 327.984 449.582 cv
cp
329.61 449.582 mo
329.61 451.698 329.858 453.105 330.353 453.806 cv
330.848 454.506 331.459 454.856 332.185 454.856 cv
332.912 454.856 333.523 454.504 334.018 453.801 cv
334.513 453.098 334.76 451.692 334.76 449.582 cv
334.76 447.461 334.513 446.052 334.018 445.355 cv
333.523 444.658 332.906 444.309 332.168 444.309 cv
331.441 444.309 330.861 444.617 330.427 445.232 cv
329.883 446.017 329.61 447.467 329.61 449.582 cv
f
338.084 449.582 mo
338.084 448.059 338.241 446.833 338.554 445.904 cv
338.868 444.976 339.334 444.259 339.952 443.755 cv
340.57 443.252 341.348 442.999 342.285 442.999 cv
342.977 442.999 343.583 443.139 344.105 443.417 cv
344.626 443.695 345.057 444.097 345.397 444.621 cv
345.737 445.145 346.003 445.784 346.196 446.537 cv
346.39 447.29 346.486 448.305 346.486 449.582 cv
346.486 451.094 346.331 452.314 346.021 453.243 cv
345.71 454.172 345.246 454.89 344.628 455.396 cv
344.009 455.903 343.229 456.157 342.285 456.157 cv
341.043 456.157 340.068 455.711 339.358 454.821 cv
338.509 453.748 338.084 452.002 338.084 449.582 cv
cp
339.71 449.582 mo
339.71 451.698 339.958 453.105 340.453 453.806 cv
340.948 454.506 341.559 454.856 342.285 454.856 cv
343.012 454.856 343.623 454.504 344.118 453.801 cv
344.613 453.098 344.86 451.692 344.86 449.582 cv
344.86 447.461 344.613 446.052 344.118 445.355 cv
343.623 444.658 343.006 444.309 342.268 444.309 cv
341.541 444.309 340.961 444.617 340.527 445.232 cv
339.983 446.017 339.71 447.467 339.71 449.582 cv
f
350.519 448.95 mo
349.862 448.709 349.376 448.367 349.06 447.921 cv
348.743 447.476 348.585 446.943 348.585 446.322 cv
348.585 445.384 348.922 444.596 349.596 443.957 cv
350.27 443.319 351.166 442.999 352.285 442.999 cv
353.41 442.999 354.316 443.326 355.001 443.979 cv
355.687 444.633 356.029 445.428 356.029 446.366 cv
356.029 446.963 355.873 447.483 355.559 447.926 cv
355.246 448.368 354.77 448.709 354.131 448.95 cv
354.922 449.207 355.524 449.624 355.937 450.198 cv
356.35 450.772 356.557 451.457 356.557 452.254 cv
356.557 453.356 356.167 454.282 355.388 455.032 cv
354.609 455.782 353.583 456.157 352.312 456.157 cv
351.04 456.157 350.015 455.78 349.235 455.027 cv
348.456 454.274 348.066 453.335 348.066 452.21 cv
348.066 451.373 348.279 450.671 348.704 450.106 cv
349.128 449.54 349.734 449.155 350.519 448.95 cv
cp
350.202 446.269 mo
350.202 446.878 350.398 447.377 350.791 447.763 cv
351.184 448.15 351.693 448.343 352.32 448.343 cv
352.93 448.343 353.429 448.151 353.819 447.768 cv
354.209 447.384 354.403 446.913 354.403 446.357 cv
354.403 445.777 354.203 445.289 353.801 444.894 cv
353.4 444.498 352.901 444.3 352.303 444.3 cv
351.699 444.3 351.198 444.494 350.8 444.88 cv
350.402 445.267 350.202 445.73 350.202 446.269 cv
cp
349.692 452.219 mo
349.692 452.67 349.799 453.107 350.013 453.529 cv
350.227 453.951 350.545 454.277 350.967 454.509 cv
351.389 454.74 351.843 454.856 352.329 454.856 cv
353.085 454.856 353.709 454.613 354.201 454.127 cv
354.693 453.64 354.94 453.022 354.94 452.272 cv
354.94 451.51 354.686 450.88 354.179 450.382 cv
353.672 449.884 353.038 449.635 352.276 449.635 cv
351.532 449.635 350.916 449.881 350.426 450.373 cv
349.937 450.866 349.692 451.481 349.692 452.219 cv
f
406.099 454.416 mo
406.099 455.937 406.099 454.416 406.099 455.937 cv
397.582 455.937 406.099 455.937 397.582 455.937 cv
397.57 455.556 397.632 455.19 397.766 454.838 cv
397.983 454.258 398.33 453.687 398.808 453.124 cv
399.286 452.562 399.975 451.912 400.878 451.173 cv
402.278 450.025 403.225 449.115 403.717 448.444 cv
404.209 447.774 404.455 447.139 404.455 446.541 cv
404.455 445.915 404.231 445.386 403.783 444.955 cv
403.334 444.524 402.75 444.309 402.029 444.309 cv
401.267 444.309 400.658 444.538 400.201 444.995 cv
399.744 445.452 399.513 446.084 399.507 446.893 cv
397.881 446.726 399.507 446.893 397.881 446.726 cv
397.992 445.513 398.411 444.589 399.138 443.953 cv
399.864 443.317 400.84 442.999 402.064 442.999 cv
403.301 442.999 404.279 443.342 405 444.028 cv
405.721 444.713 406.081 445.563 406.081 446.577 cv
406.081 447.092 405.976 447.599 405.765 448.097 cv
405.554 448.595 405.204 449.12 404.714 449.67 cv
404.225 450.221 403.412 450.977 402.275 451.938 cv
401.326 452.735 400.717 453.275 400.447 453.56 cv
400.178 453.844 399.955 454.129 399.779 454.416 cv
406.099 454.416 399.779 454.416 406.099 454.416 cv
f
407.884 449.582 mo
407.884 448.059 408.041 446.833 408.354 445.904 cv
408.668 444.976 409.134 444.259 409.752 443.755 cv
410.37 443.252 411.148 442.999 412.085 442.999 cv
412.777 442.999 413.383 443.139 413.905 443.417 cv
414.426 443.695 414.857 444.097 415.197 444.621 cv
415.537 445.145 415.803 445.784 415.996 446.537 cv
416.19 447.29 416.286 448.305 416.286 449.582 cv
416.286 451.094 416.131 452.314 415.821 453.243 cv
415.51 454.172 415.046 454.89 414.428 455.396 cv
413.809 455.903 413.029 456.157 412.085 456.157 cv
410.843 456.157 409.868 455.711 409.158 454.821 cv
408.309 453.748 407.884 452.002 407.884 449.582 cv
cp
409.51 449.582 mo
409.51 451.698 409.758 453.105 410.253 453.806 cv
410.748 454.506 411.359 454.856 412.085 454.856 cv
412.812 454.856 413.423 454.504 413.918 453.801 cv
414.413 453.098 414.66 451.692 414.66 449.582 cv
414.66 447.461 414.413 446.052 413.918 445.355 cv
413.423 444.658 412.806 444.309 412.068 444.309 cv
411.341 444.309 410.761 444.617 410.327 445.232 cv
409.783 446.017 409.51 447.467 409.51 449.582 cv
f
423.943 455.937 mo
422.361 455.937 423.943 455.937 422.361 455.937 cv
422.361 445.856 422.361 455.937 422.361 445.856 cv
421.98 446.219 421.481 446.583 420.863 446.946 cv
420.244 447.309 419.689 447.581 419.197 447.763 cv
419.197 446.234 419.197 447.763 419.197 446.234 cv
420.082 445.818 420.855 445.314 421.517 444.722 cv
422.179 444.13 422.648 443.556 422.924 442.999 cv
423.943 442.999 422.924 442.999 423.943 442.999 cv
423.943 455.937 423.943 442.999 423.943 455.937 cv
f
428.084 449.582 mo
428.084 448.059 428.241 446.833 428.554 445.904 cv
428.868 444.976 429.334 444.259 429.952 443.755 cv
430.57 443.252 431.348 442.999 432.285 442.999 cv
432.977 442.999 433.583 443.139 434.105 443.417 cv
434.626 443.695 435.057 444.097 435.397 444.621 cv
435.737 445.145 436.003 445.784 436.196 446.537 cv
436.39 447.29 436.486 448.305 436.486 449.582 cv
436.486 451.094 436.331 452.314 436.021 453.243 cv
435.71 454.172 435.246 454.89 434.628 455.396 cv
434.009 455.903 433.229 456.157 432.285 456.157 cv
431.043 456.157 430.068 455.711 429.358 454.821 cv
428.509 453.748 428.084 452.002 428.084 449.582 cv
cp
429.71 449.582 mo
429.71 451.698 429.958 453.105 430.453 453.806 cv
430.948 454.506 431.559 454.856 432.285 454.856 cv
433.012 454.856 433.623 454.504 434.118 453.801 cv
434.613 453.098 434.86 451.692 434.86 449.582 cv
434.86 447.461 434.613 446.052 434.118 445.355 cv
433.623 444.658 433.006 444.309 432.268 444.309 cv
431.541 444.309 430.961 444.617 430.527 445.232 cv
429.983 446.017 429.71 447.467 429.71 449.582 cv
f
485.799 454.416 mo
485.799 455.937 485.799 454.416 485.799 455.937 cv
477.282 455.937 485.799 455.937 477.282 455.937 cv
477.27 455.556 477.332 455.19 477.466 454.838 cv
477.683 454.258 478.03 453.687 478.508 453.124 cv
478.986 452.562 479.675 451.912 480.578 451.173 cv
481.978 450.025 482.925 449.115 483.417 448.444 cv
483.909 447.774 484.155 447.139 484.155 446.541 cv
484.155 445.915 483.931 445.386 483.483 444.955 cv
483.034 444.524 482.45 444.309 481.729 444.309 cv
480.967 444.309 480.358 444.538 479.901 444.995 cv
479.444 445.452 479.213 446.084 479.207 446.893 cv
477.581 446.726 479.207 446.893 477.581 446.726 cv
477.692 445.513 478.111 444.589 478.838 443.953 cv
479.564 443.317 480.54 442.999 481.764 442.999 cv
483.001 442.999 483.979 443.342 484.7 444.028 cv
485.421 444.713 485.781 445.563 485.781 446.577 cv
485.781 447.092 485.676 447.599 485.465 448.097 cv
485.254 448.595 484.904 449.12 484.414 449.67 cv
483.925 450.221 483.112 450.977 481.975 451.938 cv
481.026 452.735 480.417 453.275 480.147 453.56 cv
479.878 453.844 479.655 454.129 479.479 454.416 cv
485.799 454.416 479.479 454.416 485.799 454.416 cv
f
487.584 449.582 mo
487.584 448.059 487.741 446.833 488.054 445.904 cv
488.368 444.976 488.834 444.259 489.452 443.755 cv
490.07 443.252 490.848 442.999 491.785 442.999 cv
492.477 442.999 493.083 443.139 493.605 443.417 cv
494.126 443.695 494.557 444.097 494.897 444.621 cv
495.237 445.145 495.503 445.784 495.696 446.537 cv
495.89 447.29 495.986 448.305 495.986 449.582 cv
495.986 451.094 495.831 452.314 495.521 453.243 cv
495.21 454.172 494.746 454.89 494.128 455.396 cv
493.509 455.903 492.729 456.157 491.785 456.157 cv
490.543 456.157 489.568 455.711 488.858 454.821 cv
488.009 453.748 487.584 452.002 487.584 449.582 cv
cp
489.21 449.582 mo
489.21 451.698 489.458 453.105 489.953 453.806 cv
490.448 454.506 491.059 454.856 491.785 454.856 cv
492.512 454.856 493.123 454.504 493.618 453.801 cv
494.113 453.098 494.36 451.692 494.36 449.582 cv
494.36 447.461 494.113 446.052 493.618 445.355 cv
493.123 444.658 492.506 444.309 491.768 444.309 cv
491.041 444.309 490.461 444.617 490.027 445.232 cv
489.483 446.017 489.21 447.467 489.21 449.582 cv
f
503.643 455.937 mo
502.061 455.937 503.643 455.937 502.061 455.937 cv
502.061 445.856 502.061 455.937 502.061 445.856 cv
501.68 446.219 501.181 446.583 500.563 446.946 cv
499.944 447.309 499.389 447.581 498.897 447.763 cv
498.897 446.234 498.897 447.763 498.897 446.234 cv
499.782 445.818 500.555 445.314 501.217 444.722 cv
501.879 444.13 502.348 443.556 502.624 442.999 cv
503.643 442.999 502.624 442.999 503.643 442.999 cv
503.643 455.937 503.643 442.999 503.643 455.937 cv
f
515.999 454.416 mo
515.999 455.937 515.999 454.416 515.999 455.937 cv
507.482 455.937 515.999 455.937 507.482 455.937 cv
507.47 455.556 507.532 455.19 507.666 454.838 cv
507.883 454.258 508.23 453.687 508.708 453.124 cv
509.186 452.562 509.875 451.912 510.778 451.173 cv
512.178 450.025 513.125 449.115 513.617 448.444 cv
514.109 447.774 514.355 447.139 514.355 446.541 cv
514.355 445.915 514.131 445.386 513.683 444.955 cv
513.234 444.524 512.65 444.309 511.929 444.309 cv
511.167 444.309 510.558 444.538 510.101 444.995 cv
509.644 445.452 509.413 446.084 509.407 446.893 cv
507.781 446.726 509.407 446.893 507.781 446.726 cv
507.892 445.513 508.311 444.589 509.038 443.953 cv
509.764 443.317 510.74 442.999 511.964 442.999 cv
513.201 442.999 514.179 443.342 514.9 444.028 cv
515.621 444.713 515.981 445.563 515.981 446.577 cv
515.981 447.092 515.876 447.599 515.665 448.097 cv
515.454 448.595 515.104 449.12 514.614 449.67 cv
514.125 450.221 513.312 450.977 512.175 451.938 cv
511.226 452.735 510.617 453.275 510.347 453.56 cv
510.078 453.844 509.855 454.129 509.679 454.416 cv
515.999 454.416 509.679 454.416 515.999 454.416 cv
f
565.699 454.416 mo
565.699 455.937 565.699 454.416 565.699 455.937 cv
557.182 455.937 565.699 455.937 557.182 455.937 cv
557.17 455.556 557.232 455.19 557.366 454.838 cv
557.583 454.258 557.93 453.687 558.408 453.124 cv
558.886 452.562 559.575 451.912 560.478 451.173 cv
561.878 450.025 562.825 449.115 563.317 448.444 cv
563.809 447.774 564.055 447.139 564.055 446.541 cv
564.055 445.915 563.831 445.386 563.383 444.955 cv
562.934 444.524 562.35 444.309 561.629 444.309 cv
560.867 444.309 560.258 444.538 559.801 444.995 cv
559.344 445.452 559.113 446.084 559.107 446.893 cv
557.481 446.726 559.107 446.893 557.481 446.726 cv
557.592 445.513 558.011 444.589 558.738 443.953 cv
559.464 443.317 560.44 442.999 561.664 442.999 cv
562.901 442.999 563.879 443.342 564.6 444.028 cv
565.321 444.713 565.681 445.563 565.681 446.577 cv
565.681 447.092 565.576 447.599 565.365 448.097 cv
565.154 448.595 564.804 449.12 564.314 449.67 cv
563.825 450.221 563.012 450.977 561.875 451.938 cv
560.926 452.735 560.317 453.275 560.047 453.56 cv
559.778 453.844 559.555 454.129 559.379 454.416 cv
565.699 454.416 559.379 454.416 565.699 454.416 cv
f
567.484 449.582 mo
567.484 448.059 567.641 446.833 567.954 445.904 cv
568.268 444.976 568.734 444.259 569.352 443.755 cv
569.97 443.252 570.748 442.999 571.685 442.999 cv
572.377 442.999 572.983 443.139 573.505 443.417 cv
574.026 443.695 574.457 444.097 574.797 444.621 cv
575.137 445.145 575.403 445.784 575.596 446.537 cv
575.79 447.29 575.886 448.305 575.886 449.582 cv
575.886 451.094 575.731 452.314 575.421 453.243 cv
575.11 454.172 574.646 454.89 574.028 455.396 cv
573.409 455.903 572.629 456.157 571.685 456.157 cv
570.443 456.157 569.468 455.711 568.758 454.821 cv
567.909 453.748 567.484 452.002 567.484 449.582 cv
cp
569.11 449.582 mo
569.11 451.698 569.358 453.105 569.853 453.806 cv
570.348 454.506 570.959 454.856 571.685 454.856 cv
572.412 454.856 573.023 454.504 573.518 453.801 cv
574.013 453.098 574.26 451.692 574.26 449.582 cv
574.26 447.461 574.013 446.052 573.518 445.355 cv
573.023 444.658 572.406 444.309 571.668 444.309 cv
570.941 444.309 570.361 444.617 569.927 445.232 cv
569.383 446.017 569.11 447.467 569.11 449.582 cv
f
583.543 455.937 mo
581.961 455.937 583.543 455.937 581.961 455.937 cv
581.961 445.856 581.961 455.937 581.961 445.856 cv
581.58 446.219 581.081 446.583 580.463 446.946 cv
579.844 447.309 579.289 447.581 578.797 447.763 cv
578.797 446.234 578.797 447.763 578.797 446.234 cv
579.682 445.818 580.455 445.314 581.117 444.722 cv
581.779 444.13 582.248 443.556 582.524 442.999 cv
583.543 442.999 582.524 442.999 583.543 442.999 cv
583.543 455.937 583.543 442.999 583.543 455.937 cv
f
592.755 455.937 mo
592.755 452.852 592.755 455.937 592.755 452.852 cv
587.166 452.852 592.755 452.852 587.166 452.852 cv
587.166 451.402 587.166 452.852 587.166 451.402 cv
593.045 443.052 587.166 451.402 593.045 443.052 cv
594.337 443.052 593.045 443.052 594.337 443.052 cv
594.337 451.402 594.337 443.052 594.337 451.402 cv
596.078 451.402 594.337 451.402 596.078 451.402 cv
596.078 452.852 596.078 451.402 596.078 452.852 cv
594.337 452.852 596.078 452.852 594.337 452.852 cv
594.337 455.937 594.337 452.852 594.337 455.937 cv
592.755 455.937 594.337 455.937 592.755 455.937 cv
cp
592.755 451.402 mo
592.755 445.592 592.755 451.402 592.755 445.592 cv
588.721 451.402 592.755 445.592 588.721 451.402 cv
592.755 451.402 588.721 451.402 592.755 451.402 cv
f
645.399 454.416 mo
645.399 455.937 645.399 454.416 645.399 455.937 cv
636.882 455.937 645.399 455.937 636.882 455.937 cv
636.87 455.556 636.932 455.19 637.066 454.838 cv
637.283 454.258 637.63 453.687 638.108 453.124 cv
638.586 452.562 639.275 451.912 640.178 451.173 cv
641.578 450.025 642.525 449.115 643.017 448.444 cv
643.509 447.774 643.755 447.139 643.755 446.541 cv
643.755 445.915 643.531 445.386 643.083 444.955 cv
642.634 444.524 642.05 444.309 641.329 444.309 cv
640.567 444.309 639.958 444.538 639.501 444.995 cv
639.044 445.452 638.813 446.084 638.807 446.893 cv
637.181 446.726 638.807 446.893 637.181 446.726 cv
637.292 445.513 637.711 444.589 638.438 443.953 cv
639.164 443.317 640.14 442.999 641.364 442.999 cv
642.601 442.999 643.579 443.342 644.3 444.028 cv
645.021 444.713 645.381 445.563 645.381 446.577 cv
645.381 447.092 645.276 447.599 645.065 448.097 cv
644.854 448.595 644.504 449.12 644.014 449.67 cv
643.525 450.221 642.712 450.977 641.575 451.938 cv
640.626 452.735 640.017 453.275 639.747 453.56 cv
639.478 453.844 639.255 454.129 639.079 454.416 cv
645.399 454.416 639.079 454.416 645.399 454.416 cv
f
647.184 449.582 mo
647.184 448.059 647.341 446.833 647.654 445.904 cv
647.968 444.976 648.434 444.259 649.052 443.755 cv
649.67 443.252 650.448 442.999 651.385 442.999 cv
652.077 442.999 652.683 443.139 653.205 443.417 cv
653.726 443.695 654.157 444.097 654.497 444.621 cv
654.837 445.145 655.103 445.784 655.296 446.537 cv
655.49 447.29 655.586 448.305 655.586 449.582 cv
655.586 451.094 655.431 452.314 655.121 453.243 cv
654.81 454.172 654.346 454.89 653.728 455.396 cv
653.109 455.903 652.329 456.157 651.385 456.157 cv
650.143 456.157 649.168 455.711 648.458 454.821 cv
647.609 453.748 647.184 452.002 647.184 449.582 cv
cp
648.81 449.582 mo
648.81 451.698 649.058 453.105 649.553 453.806 cv
650.048 454.506 650.659 454.856 651.385 454.856 cv
652.112 454.856 652.723 454.504 653.218 453.801 cv
653.713 453.098 653.96 451.692 653.96 449.582 cv
653.96 447.461 653.713 446.052 653.218 445.355 cv
652.723 444.658 652.106 444.309 651.368 444.309 cv
650.641 444.309 650.061 444.617 649.627 445.232 cv
649.083 446.017 648.81 447.467 648.81 449.582 cv
f
663.243 455.937 mo
661.661 455.937 663.243 455.937 661.661 455.937 cv
661.661 445.856 661.661 455.937 661.661 445.856 cv
661.28 446.219 660.781 446.583 660.163 446.946 cv
659.544 447.309 658.989 447.581 658.497 447.763 cv
658.497 446.234 658.497 447.763 658.497 446.234 cv
659.382 445.818 660.155 445.314 660.817 444.722 cv
661.479 444.13 661.948 443.556 662.224 442.999 cv
663.243 442.999 662.224 442.999 663.243 442.999 cv
663.243 455.937 663.243 442.999 663.243 455.937 cv
f
675.493 446.207 mo
673.92 446.331 675.493 446.207 673.92 446.331 cv
673.779 445.709 673.58 445.258 673.322 444.977 cv
672.894 444.526 672.367 444.3 671.74 444.3 cv
671.236 444.3 670.794 444.441 670.413 444.722 cv
669.915 445.085 669.522 445.616 669.235 446.313 cv
668.948 447.01 668.799 448.003 668.787 449.292 cv
669.168 448.712 669.634 448.282 670.184 448 cv
670.735 447.719 671.312 447.579 671.916 447.579 cv
672.971 447.579 673.869 447.967 674.61 448.743 cv
675.351 449.52 675.722 450.523 675.722 451.753 cv
675.722 452.562 675.547 453.313 675.199 454.008 cv
674.85 454.702 674.371 455.234 673.762 455.603 cv
673.152 455.972 672.461 456.157 671.687 456.157 cv
670.369 456.157 669.294 455.672 668.462 454.702 cv
667.63 453.732 667.214 452.134 667.214 449.908 cv
667.214 447.417 667.674 445.607 668.594 444.476 cv
669.396 443.492 670.477 442.999 671.837 442.999 cv
672.851 442.999 673.681 443.284 674.329 443.852 cv
674.976 444.42 675.364 445.206 675.493 446.207 cv
cp
669.033 451.762 mo
669.033 452.307 669.149 452.829 669.38 453.327 cv
669.612 453.825 669.935 454.204 670.351 454.465 cv
670.767 454.726 671.204 454.856 671.661 454.856 cv
672.329 454.856 672.903 454.586 673.384 454.047 cv
673.864 453.508 674.104 452.776 674.104 451.85 cv
674.104 450.959 673.867 450.258 673.393 449.745 cv
672.918 449.232 672.32 448.976 671.6 448.976 cv
670.885 448.976 670.278 449.232 669.78 449.745 cv
669.282 450.258 669.033 450.93 669.033 451.762 cv
f
57.9935 423.208 mo
56.4205 423.331 57.9935 423.208 56.4205 423.331 cv
56.2795 422.709 56.0805 422.258 55.8225 421.977 cv
55.3945 421.526 54.8675 421.3 54.2405 421.3 cv
53.7365 421.3 53.2945 421.441 52.9135 421.722 cv
52.4155 422.085 52.0225 422.616 51.7355 423.313 cv
51.4485 424.01 51.2995 425.003 51.2875 426.292 cv
51.6685 425.712 52.1345 425.282 52.6845 425 cv
53.2355 424.719 53.8125 424.579 54.4165 424.579 cv
55.4715 424.579 56.3695 424.967 57.1105 425.743 cv
57.8515 426.52 58.2225 427.523 58.2225 428.753 cv
58.2225 429.562 58.0475 430.313 57.6995 431.008 cv
57.3505 431.702 56.8715 432.234 56.2625 432.603 cv
55.6525 432.972 54.9615 433.157 54.1875 433.157 cv
52.8695 433.157 51.7945 432.672 50.9625 431.702 cv
50.1305 430.732 49.7145 429.134 49.7145 426.908 cv
49.7145 424.417 50.1745 422.607 51.0945 421.476 cv
51.8965 420.492 52.9775 419.999 54.3375 419.999 cv
55.3515 419.999 56.1815 420.284 56.8295 420.852 cv
57.4765 421.42 57.8645 422.206 57.9935 423.208 cv
cp
51.5335 428.762 mo
51.5335 429.307 51.6495 429.829 51.8805 430.327 cv
52.1125 430.825 52.4355 431.204 52.8515 431.465 cv
53.2675 431.726 53.7045 431.856 54.1615 431.856 cv
54.8295 431.856 55.4035 431.586 55.8845 431.047 cv
56.3645 430.508 56.6045 429.776 56.6045 428.85 cv
56.6045 427.959 56.3675 427.258 55.8935 426.745 cv
55.4185 426.232 54.8205 425.976 54.1005 425.976 cv
53.3855 425.976 52.7785 426.232 52.2805 426.745 cv
51.7825 427.258 51.5335 427.93 51.5335 428.762 cv
f
64.8845 426.582 mo
64.8845 425.059 65.0415 423.833 65.3545 422.904 cv
65.6685 421.976 66.1345 421.259 66.7525 420.755 cv
67.3705 420.251 68.1485 419.999 69.0855 419.999 cv
69.7775 419.999 70.3835 420.139 70.9055 420.417 cv
71.4265 420.695 71.8575 421.097 72.1975 421.621 cv
72.5375 422.146 72.8035 422.784 72.9965 423.537 cv
73.1905 424.29 73.2865 425.305 73.2865 426.582 cv
73.2865 428.094 73.1315 429.314 72.8215 430.243 cv
72.5105 431.172 72.0465 431.89 71.4285 432.396 cv
70.8095 432.903 70.0295 433.157 69.0855 433.157 cv
67.8435 433.157 66.8685 432.711 66.1585 431.821 cv
65.3095 430.748 64.8845 429.002 64.8845 426.582 cv
cp
66.5105 426.582 mo
66.5105 428.698 66.7585 430.105 67.2535 430.806 cv
67.7485 431.506 68.3595 431.856 69.0855 431.856 cv
69.8125 431.856 70.4235 431.504 70.9185 430.801 cv
71.4135 430.098 71.6605 428.692 71.6605 426.582 cv
71.6605 424.461 71.4135 423.052 70.9185 422.355 cv
70.4235 421.658 69.8065 421.309 69.0685 421.309 cv
68.3415 421.309 67.7615 421.617 67.3275 422.232 cv
66.7835 423.017 66.5105 424.467 66.5105 426.582 cv
f
74.9845 426.582 mo
74.9845 425.059 75.1415 423.833 75.4545 422.904 cv
75.7685 421.976 76.2345 421.259 76.8525 420.755 cv
77.4705 420.251 78.2485 419.999 79.1854 419.999 cv
79.8774 419.999 80.4835 420.139 81.0055 420.417 cv
81.5265 420.695 81.9575 421.097 82.2974 421.621 cv
82.6375 422.146 82.9035 422.784 83.0965 423.537 cv
83.2905 424.29 83.3865 425.305 83.3865 426.582 cv
83.3865 428.094 83.2315 429.314 82.9215 430.243 cv
82.6105 431.172 82.1464 431.89 81.5285 432.396 cv
80.9094 432.903 80.1294 433.157 79.1854 433.157 cv
77.9435 433.157 76.9685 432.711 76.2585 431.821 cv
75.4095 430.748 74.9845 429.002 74.9845 426.582 cv
cp
76.6105 426.582 mo
76.6105 428.698 76.8585 430.105 77.3535 430.806 cv
77.8485 431.506 78.4595 431.856 79.1854 431.856 cv
79.9125 431.856 80.5234 431.504 81.0185 430.801 cv
81.5135 430.098 81.7604 428.692 81.7604 426.582 cv
81.7604 424.461 81.5135 423.052 81.0185 422.355 cv
80.5234 421.658 79.9065 421.309 79.1684 421.309 cv
78.4415 421.309 77.8615 421.617 77.4275 422.232 cv
76.8835 423.017 76.6105 424.467 76.6105 426.582 cv
f
57.9935 388.608 mo
56.4205 388.731 57.9935 388.608 56.4205 388.731 cv
56.2795 388.109 56.0805 387.658 55.8225 387.377 cv
55.3945 386.926 54.8675 386.7 54.2405 386.7 cv
53.7365 386.7 53.2945 386.841 52.9135 387.122 cv
52.4155 387.485 52.0225 388.016 51.7355 388.713 cv
51.4485 389.41 51.2995 390.403 51.2875 391.692 cv
51.6685 391.112 52.1345 390.682 52.6845 390.4 cv
53.2355 390.119 53.8125 389.979 54.4165 389.979 cv
55.4715 389.979 56.3695 390.367 57.1105 391.143 cv
57.8515 391.919 58.2225 392.923 58.2225 394.153 cv
58.2225 394.962 58.0475 395.713 57.6995 396.408 cv
57.3505 397.102 56.8715 397.634 56.2625 398.003 cv
55.6525 398.372 54.9615 398.557 54.1875 398.557 cv
52.8695 398.557 51.7945 398.072 50.9625 397.102 cv
50.1305 396.132 49.7145 394.534 49.7145 392.308 cv
49.7145 389.818 50.1745 388.007 51.0945 386.876 cv
51.8965 385.892 52.9775 385.399 54.3375 385.399 cv
55.3515 385.399 56.1815 385.684 56.8295 386.252 cv
57.4765 386.82 57.8645 387.606 57.9935 388.608 cv
cp
51.5335 394.162 mo
51.5335 394.707 51.6495 395.229 51.8805 395.727 cv
52.1125 396.225 52.4355 396.604 52.8515 396.865 cv
53.2675 397.126 53.7045 397.256 54.1615 397.256 cv
54.8295 397.256 55.4035 396.986 55.8845 396.447 cv
56.3645 395.908 56.6045 395.176 56.6045 394.25 cv
56.6045 393.36 56.3675 392.658 55.8935 392.145 cv
55.4185 391.632 54.8205 391.376 54.1005 391.376 cv
53.3855 391.376 52.7785 391.632 52.2805 392.145 cv
51.7825 392.658 51.5335 393.33 51.5335 394.162 cv
f
64.8845 391.983 mo
64.8845 390.459 65.0415 389.233 65.3545 388.304 cv
65.6685 387.376 66.1345 386.659 66.7525 386.155 cv
67.3705 385.651 68.1485 385.399 69.0855 385.399 cv
69.7775 385.399 70.3835 385.539 70.9055 385.817 cv
71.4265 386.095 71.8575 386.497 72.1975 387.021 cv
72.5375 387.546 72.8035 388.184 72.9965 388.937 cv
73.1905 389.69 73.2865 390.705 73.2865 391.983 cv
73.2865 393.494 73.1315 394.714 72.8215 395.643 cv
72.5105 396.572 72.0465 397.29 71.4285 397.796 cv
70.8095 398.303 70.0295 398.557 69.0855 398.557 cv
67.8435 398.557 66.8685 398.111 66.1585 397.221 cv
65.3095 396.149 64.8845 394.402 64.8845 391.983 cv
cp
66.5105 391.983 mo
66.5105 394.098 66.7585 395.505 67.2535 396.206 cv
67.7485 396.906 68.3595 397.256 69.0855 397.256 cv
69.8125 397.256 70.4235 396.904 70.9185 396.201 cv
71.4135 395.498 71.6605 394.092 71.6605 391.983 cv
71.6605 389.861 71.4135 388.452 70.9185 387.755 cv
70.4235 387.058 69.8065 386.709 69.0685 386.709 cv
68.3415 386.709 67.7615 387.017 67.3275 387.632 cv
66.7835 388.417 66.5105 389.867 66.5105 391.983 cv
f
80.9435 398.337 mo
79.3615 398.337 80.9435 398.337 79.3615 398.337 cv
79.3615 388.256 79.3615 398.337 79.3615 388.256 cv
78.9805 388.619 78.4815 388.983 77.8635 389.346 cv
77.2445 389.709 76.6895 389.982 76.1975 390.163 cv
76.1975 388.634 76.1975 390.163 76.1975 388.634 cv
77.0825 388.218 77.8555 387.714 78.5175 387.122 cv
79.1795 386.53 79.6484 385.956 79.9244 385.399 cv
80.9435 385.399 79.9244 385.399 80.9435 385.399 cv
80.9435 398.337 80.9435 385.399 80.9435 398.337 cv
f
57.9935 354.308 mo
56.4205 354.431 57.9935 354.308 56.4205 354.431 cv
56.2795 353.809 56.0805 353.358 55.8225 353.077 cv
55.3945 352.626 54.8675 352.4 54.2405 352.4 cv
53.7365 352.4 53.2945 352.541 52.9135 352.822 cv
52.4155 353.185 52.0225 353.716 51.7355 354.413 cv
51.4485 355.11 51.2995 356.103 51.2875 357.392 cv
51.6685 356.812 52.1345 356.382 52.6845 356.1 cv
53.2355 355.819 53.8125 355.679 54.4165 355.679 cv
55.4715 355.679 56.3695 356.067 57.1105 356.843 cv
57.8515 357.619 58.2225 358.623 58.2225 359.853 cv
58.2225 360.662 58.0475 361.413 57.6995 362.108 cv
57.3505 362.802 56.8715 363.334 56.2625 363.703 cv
55.6525 364.072 54.9615 364.257 54.1875 364.257 cv
52.8695 364.257 51.7945 363.772 50.9625 362.802 cv
50.1305 361.832 49.7145 360.234 49.7145 358.008 cv
49.7145 355.518 50.1745 353.707 51.0945 352.576 cv
51.8965 351.592 52.9775 351.099 54.3375 351.099 cv
55.3515 351.099 56.1815 351.384 56.8295 351.952 cv
57.4765 352.52 57.8645 353.306 57.9935 354.308 cv
cp
51.5335 359.862 mo
51.5335 360.407 51.6495 360.929 51.8805 361.427 cv
52.1125 361.925 52.4355 362.304 52.8515 362.565 cv
53.2675 362.826 53.7045 362.956 54.1615 362.956 cv
54.8295 362.956 55.4035 362.686 55.8845 362.147 cv
56.3645 361.608 56.6045 360.876 56.6045 359.95 cv
56.6045 359.06 56.3675 358.358 55.8935 357.845 cv
55.4185 357.332 54.8205 357.076 54.1005 357.076 cv
53.3855 357.076 52.7785 357.332 52.2805 357.845 cv
51.7825 358.358 51.5335 359.03 51.5335 359.862 cv
f
64.8845 357.683 mo
64.8845 356.159 65.0415 354.933 65.3545 354.004 cv
65.6685 353.076 66.1345 352.359 66.7525 351.855 cv
67.3705 351.351 68.1485 351.099 69.0855 351.099 cv
69.7775 351.099 70.3835 351.239 70.9055 351.517 cv
71.4265 351.795 71.8575 352.197 72.1975 352.721 cv
72.5375 353.246 72.8035 353.884 72.9965 354.637 cv
73.1905 355.39 73.2865 356.405 73.2865 357.683 cv
73.2865 359.194 73.1315 360.414 72.8215 361.343 cv
72.5105 362.272 72.0465 362.99 71.4285 363.496 cv
70.8095 364.003 70.0295 364.257 69.0855 364.257 cv
67.8435 364.257 66.8685 363.811 66.1585 362.921 cv
65.3095 361.849 64.8845 360.102 64.8845 357.683 cv
cp
66.5105 357.683 mo
66.5105 359.798 66.7585 361.205 67.2535 361.906 cv
67.7485 362.606 68.3595 362.956 69.0855 362.956 cv
69.8125 362.956 70.4235 362.604 70.9185 361.901 cv
71.4135 361.198 71.6605 359.792 71.6605 357.683 cv
71.6605 355.561 71.4135 354.152 70.9185 353.455 cv
70.4235 352.758 69.8065 352.409 69.0685 352.409 cv
68.3415 352.409 67.7615 352.717 67.3275 353.332 cv
66.7835 354.117 66.5105 355.567 66.5105 357.683 cv
f
83.2995 362.516 mo
83.2995 364.037 83.2995 362.516 83.2995 364.037 cv
74.7825 364.037 83.2995 364.037 74.7825 364.037 cv
74.7705 363.656 74.8325 363.29 74.9665 362.938 cv
75.1835 362.358 75.5305 361.787 76.0085 361.225 cv
76.4865 360.662 77.1755 360.012 78.0785 359.273 cv
79.4784 358.125 80.4255 357.215 80.9175 356.544 cv
81.4094 355.873 81.6554 355.239 81.6554 354.641 cv
81.6554 354.015 81.4314 353.486 80.9835 353.055 cv
80.5344 352.624 79.9504 352.409 79.2295 352.409 cv
78.4675 352.409 77.8585 352.638 77.4015 353.095 cv
76.9445 353.552 76.7135 354.184 76.7075 354.993 cv
75.0815 354.826 76.7075 354.993 75.0815 354.826 cv
75.1925 353.613 75.6115 352.689 76.3385 352.053 cv
77.0645 351.417 78.0405 351.099 79.2645 351.099 cv
80.5015 351.099 81.4795 351.442 82.2004 352.128 cv
82.9215 352.813 83.2815 353.663 83.2815 354.677 cv
83.2815 355.192 83.1765 355.699 82.9654 356.197 cv
82.7544 356.695 82.4045 357.22 81.9145 357.77 cv
81.4255 358.321 80.6124 359.077 79.4755 360.038 cv
78.5265 360.835 77.9175 361.375 77.6475 361.66 cv
77.3785 361.944 77.1555 362.229 76.9795 362.516 cv
83.2995 362.516 76.9795 362.516 83.2995 362.516 cv
f
57.9935 319.708 mo
56.4205 319.831 57.9935 319.708 56.4205 319.831 cv
56.2795 319.209 56.0805 318.758 55.8225 318.477 cv
55.3945 318.026 54.8675 317.8 54.2405 317.8 cv
53.7365 317.8 53.2945 317.941 52.9135 318.222 cv
52.4155 318.585 52.0225 319.116 51.7355 319.813 cv
51.4485 320.51 51.2995 321.503 51.2875 322.792 cv
51.6685 322.212 52.1345 321.782 52.6845 321.5 cv
53.2355 321.219 53.8125 321.079 54.4165 321.079 cv
55.4715 321.079 56.3695 321.467 57.1105 322.243 cv
57.8515 323.019 58.2225 324.023 58.2225 325.253 cv
58.2225 326.062 58.0475 326.813 57.6995 327.508 cv
57.3505 328.202 56.8715 328.734 56.2625 329.103 cv
55.6525 329.472 54.9615 329.657 54.1875 329.657 cv
52.8695 329.657 51.7945 329.172 50.9625 328.202 cv
50.1305 327.232 49.7145 325.634 49.7145 323.408 cv
49.7145 320.918 50.1745 319.107 51.0945 317.976 cv
51.8965 316.992 52.9775 316.499 54.3375 316.499 cv
55.3515 316.499 56.1815 316.784 56.8295 317.352 cv
57.4765 317.92 57.8645 318.706 57.9935 319.708 cv
cp
51.5335 325.262 mo
51.5335 325.807 51.6495 326.329 51.8805 326.827 cv
52.1125 327.325 52.4355 327.704 52.8515 327.965 cv
53.2675 328.226 53.7045 328.356 54.1615 328.356 cv
54.8295 328.356 55.4035 328.086 55.8845 327.547 cv
56.3645 327.008 56.6045 326.276 56.6045 325.35 cv
56.6045 324.46 56.3675 323.758 55.8935 323.245 cv
55.4185 322.732 54.8205 322.476 54.1005 322.476 cv
53.3855 322.476 52.7785 322.732 52.2805 323.245 cv
51.7825 323.758 51.5335 324.43 51.5335 325.262 cv
f
64.8845 323.083 mo
64.8845 321.559 65.0415 320.333 65.3545 319.404 cv
65.6685 318.476 66.1345 317.759 66.7525 317.255 cv
67.3705 316.751 68.1485 316.499 69.0855 316.499 cv
69.7775 316.499 70.3835 316.639 70.9055 316.917 cv
71.4265 317.195 71.8575 317.597 72.1975 318.121 cv
72.5375 318.646 72.8035 319.284 72.9965 320.037 cv
73.1905 320.79 73.2865 321.805 73.2865 323.083 cv
73.2865 324.594 73.1315 325.814 72.8215 326.743 cv
72.5105 327.672 72.0465 328.39 71.4285 328.896 cv
70.8095 329.403 70.0295 329.657 69.0855 329.657 cv
67.8435 329.657 66.8685 329.211 66.1585 328.321 cv
65.3095 327.249 64.8845 325.502 64.8845 323.083 cv
cp
66.5105 323.083 mo
66.5105 325.198 66.7585 326.605 67.2535 327.306 cv
67.7485 328.006 68.3595 328.356 69.0855 328.356 cv
69.8125 328.356 70.4235 328.004 70.9185 327.301 cv
71.4135 326.598 71.6605 325.192 71.6605 323.083 cv
71.6605 320.961 71.4135 319.552 70.9185 318.855 cv
70.4235 318.158 69.8065 317.809 69.0685 317.809 cv
68.3415 317.809 67.7615 318.117 67.3275 318.732 cv
66.7835 319.517 66.5105 320.967 66.5105 323.083 cv
f
74.9935 326.036 mo
76.5755 325.825 74.9935 326.036 76.5755 325.825 cv
76.7575 326.721 77.0665 327.367 77.5025 327.763 cv
77.9395 328.158 78.4705 328.356 79.0975 328.356 cv
79.8425 328.356 80.4705 328.098 80.9835 327.583 cv
81.4955 327.067 81.7524 326.428 81.7524 325.666 cv
81.7524 324.94 81.5145 324.341 81.0405 323.869 cv
80.5655 323.397 79.9625 323.162 79.2295 323.162 cv
78.9305 323.162 78.5585 323.22 78.1135 323.337 cv
78.2895 321.949 78.1135 323.337 78.2895 321.949 cv
78.3945 321.96 78.4795 321.966 78.5445 321.966 cv
79.2185 321.966 79.8245 321.791 80.3635 321.439 cv
80.9025 321.087 81.1724 320.545 81.1724 319.813 cv
81.1724 319.233 80.9755 318.752 80.5835 318.372 cv
80.1905 317.991 79.6834 317.8 79.0625 317.8 cv
78.4475 317.8 77.9345 317.994 77.5245 318.38 cv
77.1145 318.767 76.8505 319.347 76.7335 320.121 cv
75.1515 319.839 76.7335 320.121 75.1515 319.839 cv
75.3445 318.779 75.7845 317.957 76.4695 317.374 cv
77.1555 316.791 78.0085 316.499 79.0275 316.499 cv
79.7305 316.499 80.3785 316.65 80.9695 316.952 cv
81.5615 317.254 82.0145 317.666 82.3275 318.187 cv
82.6415 318.708 82.7985 319.262 82.7985 319.848 cv
82.7985 320.405 82.6485 320.912 82.3494 321.369 cv
82.0515 321.826 81.6085 322.189 81.0225 322.458 cv
81.7844 322.634 82.3765 322.999 82.7985 323.553 cv
83.2195 324.106 83.4305 324.799 83.4305 325.631 cv
83.4305 326.756 83.0205 327.71 82.2004 328.492 cv
81.3805 329.274 80.3435 329.666 79.0895 329.666 cv
77.9585 329.666 77.0195 329.329 76.2725 328.655 cv
75.5255 327.981 75.0985 327.108 74.9935 326.036 cv
f
57.9935 285.208 mo
56.4205 285.331 57.9935 285.208 56.4205 285.331 cv
56.2795 284.709 56.0805 284.258 55.8225 283.977 cv
55.3945 283.526 54.8675 283.3 54.2405 283.3 cv
53.7365 283.3 53.2945 283.441 52.9135 283.722 cv
52.4155 284.085 52.0225 284.616 51.7355 285.313 cv
51.4485 286.01 51.2995 287.003 51.2875 288.292 cv
51.6685 287.712 52.1345 287.282 52.6845 287 cv
53.2355 286.719 53.8125 286.579 54.4165 286.579 cv
55.4715 286.579 56.3695 286.967 57.1105 287.743 cv
57.8515 288.519 58.2225 289.523 58.2225 290.753 cv
58.2225 291.562 58.0475 292.313 57.6995 293.008 cv
57.3505 293.702 56.8715 294.234 56.2625 294.603 cv
55.6525 294.972 54.9615 295.157 54.1875 295.157 cv
52.8695 295.157 51.7945 294.672 50.9625 293.702 cv
50.1305 292.732 49.7145 291.134 49.7145 288.908 cv
49.7145 286.418 50.1745 284.607 51.0945 283.476 cv
51.8965 282.492 52.9775 281.999 54.3375 281.999 cv
55.3515 281.999 56.1815 282.284 56.8295 282.852 cv
57.4765 283.42 57.8645 284.206 57.9935 285.208 cv
cp
51.5335 290.762 mo
51.5335 291.307 51.6495 291.829 51.8805 292.327 cv
52.1125 292.825 52.4355 293.204 52.8515 293.465 cv
53.2675 293.726 53.7045 293.856 54.1615 293.856 cv
54.8295 293.856 55.4035 293.586 55.8845 293.047 cv
56.3645 292.508 56.6045 291.776 56.6045 290.85 cv
56.6045 289.96 56.3675 289.258 55.8935 288.745 cv
55.4185 288.232 54.8205 287.976 54.1005 287.976 cv
53.3855 287.976 52.7785 288.232 52.2805 288.745 cv
51.7825 289.258 51.5335 289.93 51.5335 290.762 cv
f
64.8845 288.583 mo
64.8845 287.059 65.0415 285.833 65.3545 284.904 cv
65.6685 283.976 66.1345 283.259 66.7525 282.755 cv
67.3705 282.251 68.1485 281.999 69.0855 281.999 cv
69.7775 281.999 70.3835 282.139 70.9055 282.417 cv
71.4265 282.695 71.8575 283.097 72.1975 283.621 cv
72.5375 284.146 72.8035 284.784 72.9965 285.537 cv
73.1905 286.29 73.2865 287.305 73.2865 288.583 cv
73.2865 290.094 73.1315 291.314 72.8215 292.243 cv
72.5105 293.172 72.0465 293.89 71.4285 294.396 cv
70.8095 294.903 70.0295 295.157 69.0855 295.157 cv
67.8435 295.157 66.8685 294.711 66.1585 293.821 cv
65.3095 292.749 64.8845 291.002 64.8845 288.583 cv
cp
66.5105 288.583 mo
66.5105 290.698 66.7585 292.105 67.2535 292.806 cv
67.7485 293.506 68.3595 293.856 69.0855 293.856 cv
69.8125 293.856 70.4235 293.504 70.9185 292.801 cv
71.4135 292.098 71.6605 290.692 71.6605 288.583 cv
71.6605 286.461 71.4135 285.052 70.9185 284.355 cv
70.4235 283.658 69.8065 283.309 69.0685 283.309 cv
68.3415 283.309 67.7615 283.617 67.3275 284.232 cv
66.7835 285.017 66.5105 286.467 66.5105 288.583 cv
f
80.0555 294.937 mo
80.0555 291.852 80.0555 294.937 80.0555 291.852 cv
74.4665 291.852 80.0555 291.852 74.4665 291.852 cv
74.4665 290.402 74.4665 291.852 74.4665 290.402 cv
80.3455 282.052 74.4665 290.402 80.3455 282.052 cv
81.6374 282.052 80.3455 282.052 81.6374 282.052 cv
81.6374 290.402 81.6374 282.052 81.6374 290.402 cv
83.3785 290.402 81.6374 290.402 83.3785 290.402 cv
83.3785 291.852 83.3785 290.402 83.3785 291.852 cv
81.6374 291.852 83.3785 291.852 81.6374 291.852 cv
81.6374 294.937 81.6374 291.852 81.6374 294.937 cv
80.0555 294.937 81.6374 294.937 80.0555 294.937 cv
cp
80.0555 290.402 mo
80.0555 284.592 80.0555 290.402 80.0555 284.592 cv
76.0215 290.402 80.0555 284.592 76.0215 290.402 cv
80.0555 290.402 76.0215 290.402 80.0555 290.402 cv
f
57.9935 250.908 mo
56.4205 251.031 57.9935 250.908 56.4205 251.031 cv
56.2795 250.409 56.0805 249.958 55.8225 249.677 cv
55.3945 249.226 54.8675 249 54.2405 249 cv
53.7365 249 53.2945 249.141 52.9135 249.422 cv
52.4155 249.785 52.0225 250.316 51.7355 251.013 cv
51.4485 251.71 51.2995 252.703 51.2875 253.992 cv
51.6685 253.412 52.1345 252.982 52.6845 252.7 cv
53.2355 252.419 53.8125 252.279 54.4165 252.279 cv
55.4715 252.279 56.3695 252.667 57.1105 253.443 cv
57.8515 254.219 58.2225 255.223 58.2225 256.453 cv
58.2225 257.262 58.0475 258.013 57.6995 258.708 cv
57.3505 259.402 56.8715 259.934 56.2625 260.303 cv
55.6525 260.672 54.9615 260.857 54.1875 260.857 cv
52.8695 260.857 51.7945 260.372 50.9625 259.402 cv
50.1305 258.432 49.7145 256.834 49.7145 254.608 cv
49.7145 252.118 50.1745 250.307 51.0945 249.176 cv
51.8965 248.192 52.9775 247.699 54.3375 247.699 cv
55.3515 247.699 56.1815 247.984 56.8295 248.552 cv
57.4765 249.12 57.8645 249.906 57.9935 250.908 cv
cp
51.5335 256.462 mo
51.5335 257.007 51.6495 257.529 51.8805 258.027 cv
52.1125 258.525 52.4355 258.904 52.8515 259.165 cv
53.2675 259.426 53.7045 259.556 54.1615 259.556 cv
54.8295 259.556 55.4035 259.286 55.8845 258.747 cv
56.3645 258.208 56.6045 257.476 56.6045 256.55 cv
56.6045 255.66 56.3675 254.958 55.8935 254.445 cv
55.4185 253.932 54.8205 253.676 54.1005 253.676 cv
53.3855 253.676 52.7785 253.932 52.2805 254.445 cv
51.7825 254.958 51.5335 255.63 51.5335 256.462 cv
f
64.8845 254.283 mo
64.8845 252.759 65.0415 251.533 65.3545 250.604 cv
65.6685 249.676 66.1345 248.959 66.7525 248.455 cv
67.3705 247.951 68.1485 247.699 69.0855 247.699 cv
69.7775 247.699 70.3835 247.839 70.9055 248.117 cv
71.4265 248.395 71.8575 248.797 72.1975 249.321 cv
72.5375 249.846 72.8035 250.484 72.9965 251.237 cv
73.1905 251.99 73.2865 253.005 73.2865 254.283 cv
73.2865 255.794 73.1315 257.014 72.8215 257.943 cv
72.5105 258.872 72.0465 259.59 71.4285 260.096 cv
70.8095 260.603 70.0295 260.857 69.0855 260.857 cv
67.8435 260.857 66.8685 260.411 66.1585 259.521 cv
65.3095 258.449 64.8845 256.702 64.8845 254.283 cv
cp
66.5105 254.283 mo
66.5105 256.398 66.7585 257.805 67.2535 258.506 cv
67.7485 259.206 68.3595 259.556 69.0855 259.556 cv
69.8125 259.556 70.4235 259.204 70.9185 258.501 cv
71.4135 257.798 71.6605 256.392 71.6605 254.283 cv
71.6605 252.161 71.4135 250.752 70.9185 250.055 cv
70.4235 249.358 69.8065 249.009 69.0685 249.009 cv
68.3415 249.009 67.7615 249.317 67.3275 249.932 cv
66.7835 250.717 66.5105 252.167 66.5105 254.283 cv
f
74.9845 257.262 mo
76.6455 257.121 74.9845 257.262 76.6455 257.121 cv
76.7685 257.93 77.0545 258.538 77.5025 258.945 cv
77.9505 259.352 78.4915 259.556 79.1245 259.556 cv
79.8865 259.556 80.5304 259.269 81.0575 258.695 cv
81.5855 258.12 81.8485 257.359 81.8485 256.409 cv
81.8485 255.507 81.5955 254.795 81.0884 254.274 cv
80.5815 253.752 79.9184 253.491 79.0975 253.491 cv
78.5885 253.491 78.1285 253.607 77.7175 253.839 cv
77.3075 254.07 76.9855 254.37 76.7515 254.74 cv
75.2655 254.546 76.7515 254.74 75.2655 254.546 cv
76.5135 247.928 75.2655 254.546 76.5135 247.928 cv
82.9215 247.928 76.5135 247.928 82.9215 247.928 cv
82.9215 249.44 82.9215 247.928 82.9215 249.44 cv
77.7795 249.44 82.9215 249.44 77.7795 249.44 cv
77.0855 252.903 77.7795 249.44 77.0855 252.903 cv
77.8585 252.364 78.6705 252.094 79.5194 252.094 cv
80.6444 252.094 81.5935 252.484 82.3675 253.263 cv
83.1404 254.042 83.5275 255.044 83.5275 256.269 cv
83.5275 257.435 83.1874 258.443 82.5084 259.292 cv
81.6814 260.335 80.5534 260.857 79.1245 260.857 cv
77.9525 260.857 76.9955 260.529 76.2545 259.872 cv
75.5135 259.216 75.0905 258.346 74.9845 257.262 cv
f
57.9935 216.308 mo
56.4205 216.431 57.9935 216.308 56.4205 216.431 cv
56.2795 215.809 56.0805 215.358 55.8225 215.077 cv
55.3945 214.626 54.8675 214.4 54.2405 214.4 cv
53.7365 214.4 53.2945 214.541 52.9135 214.822 cv
52.4155 215.185 52.0225 215.716 51.7355 216.413 cv
51.4485 217.11 51.2995 218.103 51.2875 219.392 cv
51.6685 218.812 52.1345 218.382 52.6845 218.1 cv
53.2355 217.819 53.8125 217.679 54.4165 217.679 cv
55.4715 217.679 56.3695 218.067 57.1105 218.843 cv
57.8515 219.619 58.2225 220.623 58.2225 221.853 cv
58.2225 222.662 58.0475 223.413 57.6995 224.108 cv
57.3505 224.802 56.8715 225.334 56.2625 225.703 cv
55.6525 226.072 54.9615 226.257 54.1875 226.257 cv
52.8695 226.257 51.7945 225.772 50.9625 224.802 cv
50.1305 223.832 49.7145 222.234 49.7145 220.008 cv
49.7145 217.518 50.1745 215.707 51.0945 214.576 cv
51.8965 213.592 52.9775 213.099 54.3375 213.099 cv
55.3515 213.099 56.1815 213.384 56.8295 213.952 cv
57.4765 214.52 57.8645 215.306 57.9935 216.308 cv
cp
51.5335 221.862 mo
51.5335 222.407 51.6495 222.929 51.8805 223.427 cv
52.1125 223.925 52.4355 224.304 52.8515 224.565 cv
53.2675 224.826 53.7045 224.956 54.1615 224.956 cv
54.8295 224.956 55.4035 224.686 55.8845 224.147 cv
56.3645 223.608 56.6045 222.876 56.6045 221.95 cv
56.6045 221.06 56.3675 220.358 55.8935 219.845 cv
55.4185 219.332 54.8205 219.076 54.1005 219.076 cv
53.3855 219.076 52.7785 219.332 52.2805 219.845 cv
51.7825 220.358 51.5335 221.03 51.5335 221.862 cv
f
64.8845 219.683 mo
64.8845 218.159 65.0415 216.933 65.3545 216.004 cv
65.6685 215.076 66.1345 214.359 66.7525 213.855 cv
67.3705 213.351 68.1485 213.099 69.0855 213.099 cv
69.7775 213.099 70.3835 213.239 70.9055 213.517 cv
71.4265 213.795 71.8575 214.197 72.1975 214.721 cv
72.5375 215.246 72.8035 215.884 72.9965 216.637 cv
73.1905 217.39 73.2865 218.405 73.2865 219.683 cv
73.2865 221.194 73.1315 222.414 72.8215 223.343 cv
72.5105 224.272 72.0465 224.99 71.4285 225.496 cv
70.8095 226.003 70.0295 226.257 69.0855 226.257 cv
67.8435 226.257 66.8685 225.811 66.1585 224.921 cv
65.3095 223.849 64.8845 222.102 64.8845 219.683 cv
cp
66.5105 219.683 mo
66.5105 221.798 66.7585 223.205 67.2535 223.906 cv
67.7485 224.606 68.3595 224.956 69.0855 224.956 cv
69.8125 224.956 70.4235 224.604 70.9185 223.901 cv
71.4135 223.198 71.6605 221.792 71.6605 219.683 cv
71.6605 217.561 71.4135 216.152 70.9185 215.455 cv
70.4235 214.758 69.8065 214.409 69.0685 214.409 cv
68.3415 214.409 67.7615 214.717 67.3275 215.332 cv
66.7835 216.117 66.5105 217.567 66.5105 219.683 cv
f
83.1935 216.308 mo
81.6204 216.431 83.1935 216.308 81.6204 216.431 cv
81.4795 215.809 81.2804 215.358 81.0225 215.077 cv
80.5944 214.626 80.0675 214.4 79.4405 214.4 cv
78.9365 214.4 78.4945 214.541 78.1135 214.822 cv
77.6155 215.185 77.2225 215.716 76.9355 216.413 cv
76.6485 217.11 76.4995 218.103 76.4875 219.392 cv
76.8685 218.812 77.3345 218.382 77.8845 218.1 cv
78.4355 217.819 79.0125 217.679 79.6164 217.679 cv
80.6715 217.679 81.5695 218.067 82.3104 218.843 cv
83.0514 219.619 83.4224 220.623 83.4224 221.853 cv
83.4224 222.662 83.2474 223.413 82.8995 224.108 cv
82.5505 224.802 82.0714 225.334 81.4625 225.703 cv
80.8525 226.072 80.1614 226.257 79.3874 226.257 cv
78.0695 226.257 76.9945 225.772 76.1625 224.802 cv
75.3305 223.832 74.9145 222.234 74.9145 220.008 cv
74.9145 217.518 75.3745 215.707 76.2945 214.576 cv
77.0965 213.592 78.1775 213.099 79.5375 213.099 cv
80.5514 213.099 81.3814 213.384 82.0295 213.952 cv
82.6764 214.52 83.0644 215.306 83.1935 216.308 cv
cp
76.7335 221.862 mo
76.7335 222.407 76.8495 222.929 77.0805 223.427 cv
77.3125 223.925 77.6355 224.304 78.0515 224.565 cv
78.4675 224.826 78.9045 224.956 79.3615 224.956 cv
80.0295 224.956 80.6034 224.686 81.0844 224.147 cv
81.5644 223.608 81.8045 222.876 81.8045 221.95 cv
81.8045 221.06 81.5675 220.358 81.0935 219.845 cv
80.6184 219.332 80.0205 219.076 79.3005 219.076 cv
78.5855 219.076 77.9785 219.332 77.4805 219.845 cv
76.9825 220.358 76.7335 221.03 76.7335 221.862 cv
f
57.9935 181.708 mo
56.4205 181.831 57.9935 181.708 56.4205 181.831 cv
56.2795 181.209 56.0805 180.758 55.8225 180.477 cv
55.3945 180.026 54.8675 179.8 54.2405 179.8 cv
53.7365 179.8 53.2945 179.941 52.9135 180.222 cv
52.4155 180.585 52.0225 181.116 51.7355 181.813 cv
51.4485 182.51 51.2995 183.503 51.2875 184.792 cv
51.6685 184.212 52.1345 183.782 52.6845 183.5 cv
53.2355 183.219 53.8125 183.079 54.4165 183.079 cv
55.4715 183.079 56.3695 183.467 57.1105 184.243 cv
57.8515 185.019 58.2225 186.023 58.2225 187.253 cv
58.2225 188.062 58.0475 188.813 57.6995 189.508 cv
57.3505 190.202 56.8715 190.734 56.2625 191.103 cv
55.6525 191.472 54.9615 191.657 54.1875 191.657 cv
52.8695 191.657 51.7945 191.172 50.9625 190.202 cv
50.1305 189.232 49.7145 187.634 49.7145 185.408 cv
49.7145 182.918 50.1745 181.107 51.0945 179.976 cv
51.8965 178.992 52.9775 178.499 54.3375 178.499 cv
55.3515 178.499 56.1815 178.784 56.8295 179.352 cv
57.4765 179.92 57.8645 180.706 57.9935 181.708 cv
cp
51.5335 187.262 mo
51.5335 187.807 51.6495 188.329 51.8805 188.827 cv
52.1125 189.325 52.4355 189.704 52.8515 189.965 cv
53.2675 190.226 53.7045 190.356 54.1615 190.356 cv
54.8295 190.356 55.4035 190.086 55.8845 189.547 cv
56.3645 189.008 56.6045 188.276 56.6045 187.35 cv
56.6045 186.46 56.3675 185.758 55.8935 185.245 cv
55.4185 184.732 54.8205 184.476 54.1005 184.476 cv
53.3855 184.476 52.7785 184.732 52.2805 185.245 cv
51.7825 185.758 51.5335 186.43 51.5335 187.262 cv
f
64.8845 185.083 mo
64.8845 183.559 65.0415 182.333 65.3545 181.404 cv
65.6685 180.476 66.1345 179.759 66.7525 179.255 cv
67.3705 178.751 68.1485 178.499 69.0855 178.499 cv
69.7775 178.499 70.3835 178.639 70.9055 178.917 cv
71.4265 179.195 71.8575 179.597 72.1975 180.121 cv
72.5375 180.646 72.8035 181.284 72.9965 182.037 cv
73.1905 182.79 73.2865 183.805 73.2865 185.083 cv
73.2865 186.594 73.1315 187.814 72.8215 188.743 cv
72.5105 189.672 72.0465 190.39 71.4285 190.896 cv
70.8095 191.403 70.0295 191.657 69.0855 191.657 cv
67.8435 191.657 66.8685 191.211 66.1585 190.321 cv
65.3095 189.249 64.8845 187.502 64.8845 185.083 cv
cp
66.5105 185.083 mo
66.5105 187.198 66.7585 188.605 67.2535 189.306 cv
67.7485 190.006 68.3595 190.356 69.0855 190.356 cv
69.8125 190.356 70.4235 190.004 70.9185 189.301 cv
71.4135 188.598 71.6605 187.192 71.6605 185.083 cv
71.6605 182.961 71.4135 181.552 70.9185 180.855 cv
70.4235 180.158 69.8065 179.809 69.0685 179.809 cv
68.3415 179.809 67.7615 180.117 67.3275 180.732 cv
66.7835 181.517 66.5105 182.967 66.5105 185.083 cv
f
75.0905 180.24 mo
75.0905 178.719 75.0905 180.24 75.0905 178.719 cv
83.4305 178.719 75.0905 178.719 83.4305 178.719 cv
83.4305 179.95 83.4305 178.719 83.4305 179.95 cv
82.6105 180.823 81.7974 181.983 80.9914 183.43 cv
80.1865 184.877 79.5635 186.366 79.1245 187.895 cv
78.8075 188.973 78.6055 190.154 78.5175 191.437 cv
76.8915 191.437 78.5175 191.437 76.8915 191.437 cv
76.9095 190.423 77.1085 189.199 77.4895 187.763 cv
77.8705 186.328 78.4165 184.943 79.1285 183.61 cv
79.8405 182.277 80.5975 181.154 81.4005 180.24 cv
75.0905 180.24 81.4005 180.24 75.0905 180.24 cv
f
57.9935 147.408 mo
56.4205 147.531 57.9935 147.408 56.4205 147.531 cv
56.2795 146.909 56.0805 146.458 55.8225 146.177 cv
55.3945 145.726 54.8675 145.5 54.2405 145.5 cv
53.7365 145.5 53.2945 145.641 52.9135 145.922 cv
52.4155 146.285 52.0225 146.816 51.7355 147.513 cv
51.4485 148.21 51.2995 149.203 51.2875 150.492 cv
51.6685 149.912 52.1345 149.482 52.6845 149.2 cv
53.2355 148.919 53.8125 148.779 54.4165 148.779 cv
55.4715 148.779 56.3695 149.167 57.1105 149.943 cv
57.8515 150.719 58.2225 151.723 58.2225 152.953 cv
58.2225 153.762 58.0475 154.513 57.6995 155.208 cv
57.3505 155.902 56.8715 156.434 56.2625 156.803 cv
55.6525 157.172 54.9615 157.357 54.1875 157.357 cv
52.8695 157.357 51.7945 156.872 50.9625 155.902 cv
50.1305 154.932 49.7145 153.334 49.7145 151.108 cv
49.7145 148.618 50.1745 146.807 51.0945 145.676 cv
51.8965 144.692 52.9775 144.199 54.3375 144.199 cv
55.3515 144.199 56.1815 144.484 56.8295 145.052 cv
57.4765 145.62 57.8645 146.406 57.9935 147.408 cv
cp
51.5335 152.962 mo
51.5335 153.507 51.6495 154.029 51.8805 154.527 cv
52.1125 155.025 52.4355 155.404 52.8515 155.665 cv
53.2675 155.926 53.7045 156.056 54.1615 156.056 cv
54.8295 156.056 55.4035 155.786 55.8845 155.247 cv
56.3645 154.708 56.6045 153.976 56.6045 153.05 cv
56.6045 152.16 56.3675 151.458 55.8935 150.945 cv
55.4185 150.432 54.8205 150.176 54.1005 150.176 cv
53.3855 150.176 52.7785 150.432 52.2805 150.945 cv
51.7825 151.458 51.5335 152.13 51.5335 152.962 cv
f
64.8845 150.783 mo
64.8845 149.259 65.0415 148.033 65.3545 147.104 cv
65.6685 146.176 66.1345 145.459 66.7525 144.955 cv
67.3705 144.451 68.1485 144.199 69.0855 144.199 cv
69.7775 144.199 70.3835 144.339 70.9055 144.617 cv
71.4265 144.895 71.8575 145.297 72.1975 145.821 cv
72.5375 146.346 72.8035 146.984 72.9965 147.737 cv
73.1905 148.49 73.2865 149.505 73.2865 150.783 cv
73.2865 152.294 73.1315 153.514 72.8215 154.443 cv
72.5105 155.372 72.0465 156.09 71.4285 156.596 cv
70.8095 157.103 70.0295 157.357 69.0855 157.357 cv
67.8435 157.357 66.8685 156.911 66.1585 156.021 cv
65.3095 154.949 64.8845 153.202 64.8845 150.783 cv
cp
66.5105 150.783 mo
66.5105 152.898 66.7585 154.305 67.2535 155.006 cv
67.7485 155.706 68.3595 156.056 69.0855 156.056 cv
69.8125 156.056 70.4235 155.704 70.9185 155.001 cv
71.4135 154.298 71.6605 152.892 71.6605 150.783 cv
71.6605 148.661 71.4135 147.252 70.9185 146.555 cv
70.4235 145.858 69.8065 145.509 69.0685 145.509 cv
68.3415 145.509 67.7615 145.817 67.3275 146.432 cv
66.7835 147.217 66.5105 148.667 66.5105 150.783 cv
f
77.4195 150.15 mo
76.7625 149.91 76.2765 149.567 75.9604 149.121 cv
75.6435 148.676 75.4855 148.143 75.4855 147.522 cv
75.4855 146.584 75.8225 145.796 76.4965 145.158 cv
77.1705 144.519 78.0665 144.199 79.1854 144.199 cv
80.3104 144.199 81.2165 144.526 81.9015 145.179 cv
82.5875 145.833 82.9295 146.628 82.9295 147.566 cv
82.9295 148.163 82.7734 148.683 82.4594 149.126 cv
82.1464 149.568 81.6704 149.91 81.0315 150.15 cv
81.8225 150.407 82.4244 150.824 82.8375 151.398 cv
83.2505 151.972 83.4575 152.657 83.4575 153.454 cv
83.4575 154.556 83.0675 155.482 82.2884 156.232 cv
81.5095 156.982 80.4835 157.357 79.2125 157.357 cv
77.9405 157.357 76.9155 156.98 76.1355 156.227 cv
75.3565 155.474 74.9665 154.535 74.9665 153.41 cv
74.9665 152.573 75.1795 151.871 75.6045 151.305 cv
76.0285 150.74 76.6345 150.355 77.4195 150.15 cv
cp
77.1025 147.469 mo
77.1025 148.078 77.2985 148.576 77.6915 148.963 cv
78.0844 149.35 78.5935 149.543 79.2205 149.543 cv
79.8305 149.543 80.3294 149.351 80.7194 148.968 cv
81.1094 148.584 81.3034 148.114 81.3034 147.557 cv
81.3034 146.977 81.1034 146.489 80.7015 146.094 cv
80.3005 145.698 79.8014 145.5 79.2035 145.5 cv
78.5994 145.5 78.0984 145.694 77.7005 146.08 cv
77.3025 146.467 77.1025 146.93 77.1025 147.469 cv
cp
76.5925 153.419 mo
76.5925 153.87 76.6995 154.307 76.9135 154.729 cv
77.1274 155.151 77.4454 155.477 77.8675 155.709 cv
78.2895 155.94 78.7435 156.056 79.2295 156.056 cv
79.9855 156.056 80.6094 155.813 81.1014 155.326 cv
81.5935 154.84 81.8404 154.222 81.8404 153.472 cv
81.8404 152.71 81.5864 152.08 81.0794 151.582 cv
80.5725 151.084 79.9385 150.835 79.1764 150.835 cv
78.4324 150.835 77.8165 151.081 77.3265 151.574 cv
76.8375 152.066 76.5925 152.681 76.5925 153.419 cv
f
57.9935 112.908 mo
56.4204 113.031 57.9935 112.908 56.4204 113.031 cv
56.2794 112.409 56.0805 111.958 55.8224 111.677 cv
55.3944 111.226 54.8674 111 54.2404 111 cv
53.7365 111 53.2944 111.141 52.9135 111.422 cv
52.4155 111.785 52.0225 112.316 51.7355 113.013 cv
51.4484 113.71 51.2995 114.703 51.2875 115.992 cv
51.6684 115.412 52.1345 114.982 52.6844 114.7 cv
53.2355 114.419 53.8124 114.279 54.4165 114.279 cv
55.4715 114.279 56.3695 114.667 57.1105 115.443 cv
57.8514 116.219 58.2225 117.223 58.2225 118.453 cv
58.2225 119.262 58.0474 120.013 57.6994 120.708 cv
57.3504 121.402 56.8715 121.934 56.2625 122.303 cv
55.6525 122.672 54.9614 122.857 54.1874 122.857 cv
52.8695 122.857 51.7944 122.372 50.9624 121.402 cv
50.1304 120.432 49.7144 118.834 49.7144 116.608 cv
49.7144 114.118 50.1745 112.307 51.0945 111.176 cv
51.8965 110.192 52.9774 109.699 54.3374 109.699 cv
55.3514 109.699 56.1814 109.984 56.8295 110.552 cv
57.4764 111.12 57.8644 111.906 57.9935 112.908 cv
cp
51.5334 118.462 mo
51.5334 119.007 51.6495 119.529 51.8804 120.027 cv
52.1124 120.525 52.4354 120.904 52.8514 121.165 cv
53.2674 121.426 53.7045 121.556 54.1615 121.556 cv
54.8295 121.556 55.4035 121.286 55.8845 120.747 cv
56.3644 120.208 56.6044 119.476 56.6044 118.55 cv
56.6044 117.66 56.3674 116.958 55.8934 116.445 cv
55.4184 115.932 54.8204 115.676 54.1004 115.676 cv
53.3855 115.676 52.7785 115.932 52.2804 116.445 cv
51.7824 116.958 51.5334 117.63 51.5334 118.462 cv
f
64.8845 116.283 mo
64.8845 114.759 65.0415 113.533 65.3544 112.604 cv
65.6684 111.676 66.1345 110.959 66.7524 110.455 cv
67.3705 109.951 68.1485 109.699 69.0854 109.699 cv
69.7775 109.699 70.3834 109.839 70.9054 110.117 cv
71.4265 110.395 71.8575 110.797 72.1974 111.321 cv
72.5375 111.846 72.8035 112.484 72.9965 113.237 cv
73.1905 113.99 73.2865 115.005 73.2865 116.283 cv
73.2865 117.794 73.1314 119.014 72.8214 119.943 cv
72.5105 120.872 72.0464 121.59 71.4285 122.096 cv
70.8094 122.603 70.0294 122.857 69.0854 122.857 cv
67.8435 122.857 66.8684 122.411 66.1584 121.521 cv
65.3094 120.449 64.8845 118.702 64.8845 116.283 cv
cp
66.5105 116.283 mo
66.5105 118.398 66.7584 119.805 67.2534 120.506 cv
67.7485 121.206 68.3595 121.556 69.0854 121.556 cv
69.8124 121.556 70.4234 121.204 70.9184 120.501 cv
71.4135 119.798 71.6604 118.392 71.6604 116.283 cv
71.6604 114.161 71.4135 112.752 70.9184 112.055 cv
70.4234 111.358 69.8064 111.009 69.0685 111.009 cv
68.3414 111.009 67.7615 111.317 67.3274 111.932 cv
66.7834 112.717 66.5105 114.167 66.5105 116.283 cv
f
75.2215 119.658 mo
76.7424 119.517 75.2215 119.658 76.7424 119.517 cv
76.8714 120.232 77.1174 120.75 77.4804 121.073 cv
77.8434 121.395 78.3094 121.556 78.8784 121.556 cv
79.3644 121.556 79.7904 121.445 80.1564 121.222 cv
80.5234 120.999 80.8234 120.702 81.0574 120.33 cv
81.2924 119.958 81.4884 119.455 81.6464 118.823 cv
81.8045 118.19 81.8844 117.545 81.8844 116.889 cv
81.8844 116.819 81.8814 116.713 81.8755 116.573 cv
81.5584 117.076 81.1264 117.485 80.5784 117.799 cv
80.0314 118.112 79.4374 118.269 78.7994 118.269 cv
77.7324 118.269 76.8304 117.882 76.0914 117.109 cv
75.3534 116.335 74.9844 115.316 74.9844 114.05 cv
74.9844 112.743 75.3694 111.692 76.1404 110.895 cv
76.9104 110.098 77.8764 109.699 79.0364 109.699 cv
79.8744 109.699 80.6404 109.925 81.3344 110.376 cv
82.0294 110.827 82.5564 111.47 82.9165 112.305 cv
83.2774 113.14 83.4575 114.349 83.4575 115.931 cv
83.4575 117.577 83.2785 118.888 82.9214 119.864 cv
82.5634 120.84 82.0314 121.582 81.3254 122.092 cv
80.6194 122.602 79.7924 122.857 78.8424 122.857 cv
77.8354 122.857 77.0114 122.577 76.3734 122.017 cv
75.7344 121.458 75.3504 120.671 75.2215 119.658 cv
cp
81.6994 113.971 mo
81.6994 113.063 81.4575 112.342 80.9744 111.809 cv
80.4904 111.276 79.9094 111.009 79.2294 111.009 cv
78.5264 111.009 77.9144 111.296 77.3924 111.87 cv
76.8714 112.445 76.6105 113.189 76.6105 114.103 cv
76.6105 114.923 76.8584 115.59 77.3534 116.102 cv
77.8484 116.615 78.4594 116.871 79.1854 116.871 cv
79.9184 116.871 80.5204 116.615 80.9914 116.102 cv
81.4634 115.59 81.6994 114.879 81.6994 113.971 cv
f
57.9934 78.3081 mo
56.4204 78.4312 57.9934 78.3081 56.4204 78.4312 cv
56.2794 77.8091 56.0804 77.3582 55.8224 77.0771 cv
55.3944 76.6262 54.8674 76.4001 54.2404 76.4001 cv
53.7364 76.4001 53.2944 76.5411 52.9134 76.8221 cv
52.4154 77.1852 52.0224 77.7162 51.7354 78.4131 cv
51.4484 79.1101 51.2994 80.1031 51.2874 81.3922 cv
51.6684 80.8122 52.1344 80.3821 52.6844 80.1002 cv
53.2354 79.8192 53.8124 79.6791 54.4164 79.6791 cv
55.4714 79.6791 56.3694 80.0671 57.1104 80.8431 cv
57.8514 81.6191 58.2224 82.6231 58.2224 83.8531 cv
58.2224 84.6621 58.0474 85.4131 57.6994 86.1082 cv
57.3504 86.8022 56.8714 87.3341 56.2624 87.7032 cv
55.6524 88.0721 54.9614 88.2571 54.1874 88.2571 cv
52.8694 88.2571 51.7944 87.7722 50.9624 86.8022 cv
50.1304 85.8322 49.7144 84.2342 49.7144 82.0081 cv
49.7144 79.5182 50.1744 77.7072 51.0944 76.5761 cv
51.8964 75.5922 52.9774 75.0992 54.3374 75.0992 cv
55.3514 75.0992 56.1814 75.3842 56.8294 75.9521 cv
57.4764 76.5201 57.8644 77.3062 57.9934 78.3081 cv
cp
51.5334 83.8622 mo
51.5334 84.4072 51.6494 84.9291 51.8804 85.4272 cv
52.1124 85.9251 52.4354 86.3041 52.8514 86.5652 cv
53.2674 86.8261 53.7044 86.9561 54.1614 86.9561 cv
54.8294 86.9561 55.4034 86.6862 55.8844 86.1472 cv
56.3644 85.6082 56.6044 84.8762 56.6044 83.9502 cv
56.6044 83.0602 56.3674 82.3582 55.8934 81.8452 cv
55.4184 81.3322 54.8204 81.0761 54.1004 81.0761 cv
53.3854 81.0761 52.7784 81.3322 52.2804 81.8452 cv
51.7824 82.3582 51.5334 83.0302 51.5334 83.8622 cv
f
70.8434 88.0371 mo
69.2614 88.0371 70.8434 88.0371 69.2614 88.0371 cv
69.2614 77.9561 69.2614 88.0371 69.2614 77.9561 cv
68.8804 78.3192 68.3814 78.6832 67.7634 79.0461 cv
67.1444 79.4091 66.5894 79.6822 66.0974 79.8632 cv
66.0974 78.3342 66.0974 79.8632 66.0974 78.3342 cv
66.9824 77.9182 67.7554 77.4142 68.4174 76.8221 cv
69.0794 76.2302 69.5484 75.6562 69.8244 75.0992 cv
70.8434 75.0992 69.8244 75.0992 70.8434 75.0992 cv
70.8434 88.0371 70.8434 75.0992 70.8434 88.0371 cv
f
74.9844 81.6831 mo
74.9844 80.1591 75.1414 78.9331 75.4544 78.0042 cv
75.7684 77.0761 76.2344 76.3592 76.8524 75.8552 cv
77.4704 75.3512 78.2484 75.0992 79.1854 75.0992 cv
79.8774 75.0992 80.4834 75.2392 81.0054 75.5172 cv
81.5264 75.7952 81.9574 76.1971 82.2974 76.7212 cv
82.6374 77.2462 82.9034 77.8842 83.0964 78.6371 cv
83.2904 79.3901 83.3864 80.4052 83.3864 81.6831 cv
83.3864 83.1942 83.2314 84.4142 82.9214 85.3431 cv
82.6104 86.2722 82.1464 86.9901 81.5284 87.4962 cv
80.9094 88.0031 80.1294 88.2571 79.1854 88.2571 cv
77.9434 88.2571 76.9684 87.8112 76.2584 86.9211 cv
75.4094 85.8492 74.9844 84.1021 74.9844 81.6831 cv
cp
76.6104 81.6831 mo
76.6104 83.7982 76.8584 85.2051 77.3534 85.9062 cv
77.8484 86.6061 78.4594 86.9561 79.1854 86.9561 cv
79.9124 86.9561 80.5234 86.6042 81.0184 85.9012 cv
81.5134 85.1982 81.7604 83.7921 81.7604 81.6831 cv
81.7604 79.5612 81.5134 78.1522 81.0184 77.4551 cv
80.5234 76.7581 79.9064 76.4091 79.1684 76.4091 cv
78.4414 76.4091 77.8614 76.7172 77.4274 77.3322 cv
76.8834 78.1172 76.6104 79.5671 76.6104 81.6831 cv
f
57.9934 44.0081 mo
56.4204 44.1312 57.9934 44.0081 56.4204 44.1312 cv
56.2794 43.5092 56.0804 43.0582 55.8224 42.7772 cv
55.3944 42.3262 54.8674 42.1002 54.2404 42.1002 cv
53.7364 42.1002 53.2944 42.2411 52.9134 42.5222 cv
52.4154 42.8852 52.0224 43.4162 51.7354 44.1132 cv
51.4484 44.8102 51.2994 45.8032 51.2874 47.0922 cv
51.6684 46.5122 52.1344 46.0822 52.6844 45.8002 cv
53.2354 45.5192 53.8124 45.3792 54.4164 45.3792 cv
55.4714 45.3792 56.3694 45.7672 57.1104 46.5432 cv
57.8514 47.3192 58.2224 48.3232 58.2224 49.5532 cv
58.2224 50.3622 58.0474 51.1132 57.6994 51.8082 cv
57.3504 52.5022 56.8714 53.0341 56.2624 53.4032 cv
55.6524 53.7722 54.9614 53.9572 54.1874 53.9572 cv
52.8694 53.9572 51.7944 53.4722 50.9624 52.5022 cv
50.1304 51.5322 49.7144 49.9342 49.7144 47.7082 cv
49.7144 45.2182 50.1744 43.4072 51.0944 42.2762 cv
51.8964 41.2922 52.9774 40.7992 54.3374 40.7992 cv
55.3514 40.7992 56.1814 41.0842 56.8294 41.6522 cv
57.4764 42.2202 57.8644 43.0062 57.9934 44.0081 cv
cp
51.5334 49.5622 mo
51.5334 50.1072 51.6494 50.6292 51.8804 51.1272 cv
52.1124 51.6252 52.4354 52.0042 52.8514 52.2652 cv
53.2674 52.5262 53.7044 52.6562 54.1614 52.6562 cv
54.8294 52.6562 55.4034 52.3862 55.8844 51.8472 cv
56.3644 51.3082 56.6044 50.5762 56.6044 49.6502 cv
56.6044 48.7602 56.3674 48.0582 55.8934 47.5452 cv
55.4184 47.0322 54.8204 46.7762 54.1004 46.7762 cv
53.3854 46.7762 52.7784 47.0322 52.2804 47.5452 cv
51.7824 48.0582 51.5334 48.7302 51.5334 49.5622 cv
f
70.8434 53.7372 mo
69.2614 53.7372 70.8434 53.7372 69.2614 53.7372 cv
69.2614 43.6562 69.2614 53.7372 69.2614 43.6562 cv
68.8804 44.0192 68.3814 44.3832 67.7634 44.7462 cv
67.1444 45.1092 66.5894 45.3822 66.0974 45.5632 cv
66.0974 44.0342 66.0974 45.5632 66.0974 44.0342 cv
66.9824 43.6182 67.7554 43.1142 68.4174 42.5222 cv
69.0794 41.9302 69.5484 41.3562 69.8244 40.7992 cv
70.8434 40.7992 69.8244 40.7992 70.8434 40.7992 cv
70.8434 53.7372 70.8434 40.7992 70.8434 53.7372 cv
f
80.9434 53.7372 mo
79.3614 53.7372 80.9434 53.7372 79.3614 53.7372 cv
79.3614 43.6562 79.3614 53.7372 79.3614 43.6562 cv
78.9804 44.0192 78.4814 44.3832 77.8634 44.7462 cv
77.2444 45.1092 76.6894 45.3822 76.1974 45.5632 cv
76.1974 44.0342 76.1974 45.5632 76.1974 44.0342 cv
77.0824 43.6182 77.8554 43.1142 78.5174 42.5222 cv
79.1794 41.9302 79.6484 41.3562 79.9244 40.7992 cv
80.9434 40.7992 79.9244 40.7992 80.9434 40.7992 cv
80.9434 53.7372 80.9434 40.7992 80.9434 53.7372 cv
f
57.9934 9.40814 mo
56.4204 9.53119 57.9934 9.40814 56.4204 9.53119 cv
56.2794 8.90918 56.0804 8.45819 55.8224 8.17719 cv
55.3944 7.7262 54.8674 7.50018 54.2404 7.50018 cv
53.7364 7.50018 53.2944 7.64117 52.9134 7.92218 cv
52.4154 8.28516 52.0224 8.81616 51.7354 9.51318 cv
51.4484 10.2101 51.2994 11.2032 51.2874 12.4922 cv
51.6684 11.9122 52.1344 11.4822 52.6844 11.2002 cv
53.2354 10.9192 53.8124 10.7792 54.4164 10.7792 cv
55.4714 10.7792 56.3694 11.1672 57.1104 11.9431 cv
57.8514 12.7191 58.2224 13.7231 58.2224 14.9532 cv
58.2224 15.7621 58.0474 16.5132 57.6994 17.2082 cv
57.3504 17.9022 56.8714 18.4341 56.2624 18.8032 cv
55.6524 19.1721 54.9614 19.3571 54.1874 19.3571 cv
52.8694 19.3571 51.7944 18.8722 50.9624 17.9022 cv
50.1304 16.9322 49.7144 15.3342 49.7144 13.1082 cv
49.7144 10.6182 50.1744 8.80719 51.0944 7.67615 cv
51.8964 6.6922 52.9774 6.19916 54.3374 6.19916 cv
55.3514 6.19916 56.1814 6.48419 56.8294 7.05219 cv
57.4764 7.62018 57.8644 8.40619 57.9934 9.40814 cv
cp
51.5334 14.9622 mo
51.5334 15.5072 51.6494 16.0291 51.8804 16.5272 cv
52.1124 17.0251 52.4354 17.4041 52.8514 17.6652 cv
53.2674 17.9261 53.7044 18.0562 54.1614 18.0562 cv
54.8294 18.0562 55.4034 17.7862 55.8844 17.2472 cv
56.3644 16.7082 56.6044 15.9762 56.6044 15.0502 cv
56.6044 14.1602 56.3674 13.4582 55.8934 12.9452 cv
55.4184 12.4322 54.8204 12.1761 54.1004 12.1761 cv
53.3854 12.1761 52.7784 12.4322 52.2804 12.9452 cv
51.7824 13.4582 51.5334 14.1302 51.5334 14.9622 cv
f
70.8434 19.1371 mo
69.2614 19.1371 70.8434 19.1371 69.2614 19.1371 cv
69.2614 9.05615 69.2614 19.1371 69.2614 9.05615 cv
68.8804 9.41919 68.3814 9.7832 67.7634 10.1462 cv
67.1444 10.5092 66.5894 10.7822 66.0974 10.9632 cv
66.0974 9.4342 66.0974 10.9632 66.0974 9.4342 cv
66.9824 9.01819 67.7554 8.51416 68.4174 7.92218 cv
69.0794 7.3302 69.5484 6.75616 69.8244 6.19916 cv
70.8434 6.19916 69.8244 6.19916 70.8434 6.19916 cv
70.8434 19.1371 70.8434 6.19916 70.8434 19.1371 cv
f
83.2994 17.6161 mo
83.2994 19.1372 83.2994 17.6161 83.2994 19.1372 cv
74.7824 19.1372 83.2994 19.1372 74.7824 19.1372 cv
74.7704 18.7562 74.8324 18.3902 74.9664 18.0382 cv
75.1834 17.4582 75.5304 16.8872 76.0084 16.3252 cv
76.4864 15.7622 77.1754 15.1122 78.0784 14.3732 cv
79.4784 13.2252 80.4254 12.3152 80.9174 11.6442 cv
81.4094 10.9732 81.6554 10.3392 81.6554 9.74115 cv
81.6554 9.11517 81.4314 8.58618 80.9834 8.15515 cv
80.5344 7.72418 79.9504 7.50916 79.2294 7.50916 cv
78.4674 7.50916 77.8584 7.73816 77.4014 8.19519 cv
76.9444 8.65216 76.7134 9.28418 76.7074 10.0932 cv
75.0814 9.92621 76.7074 10.0932 75.0814 9.92621 cv
75.1924 8.7132 75.6114 7.78918 76.3384 7.1532 cv
77.0644 6.51715 78.0404 6.19916 79.2644 6.19916 cv
80.5014 6.19916 81.4794 6.54218 82.2004 7.22821 cv
82.9214 7.91321 83.2814 8.76318 83.2814 9.77716 cv
83.2814 10.2922 83.1764 10.7992 82.9654 11.2972 cv
82.7544 11.7952 82.4044 12.3202 81.9144 12.8702 cv
81.4254 13.4212 80.6124 14.1772 79.4754 15.1382 cv
78.5264 15.9352 77.9174 16.4752 77.6474 16.7602 cv
77.3784 17.0442 77.1554 17.3292 76.9794 17.6161 cv
83.2994 17.6161 76.9794 17.6161 83.2994 17.6161 cv
f
1.68 lw
137.858 427.614 mo
137.858 423.534 li
@
177.698 427.767 mo
177.698 419.607 li
@
217.778 427.614 mo
217.778 423.534 li
@
257.618 427.767 mo
257.618 419.607 li
@
297.459 427.614 mo
297.459 423.534 li
@
337.299 427.767 mo
337.299 419.607 li
@
377.379 428.269 mo
377.379 424.189 li
@
417.219 427.767 mo
417.219 419.607 li
@
457.059 427.614 mo
457.059 423.534 li
@
496.9 427.112 mo
496.9 418.952 li
@
536.74 427.614 mo
536.74 423.534 li
@
576.82 427.767 mo
576.82 419.607 li
@
616.66 428.269 mo
616.66 424.189 li
@
98.0185 428.116 mo
656.5 428.116 li
@
99.1745 410.836 mo
103.254 410.836 li
@
98.3675 393.556 mo
106.527 393.556 li
@
98.5205 376.516 mo
102.6 376.516 li
@
98.3675 359.236 mo
106.527 359.236 li
@
98.5205 341.956 mo
102.6 341.956 li
@
98.3675 324.676 mo
106.527 324.676 li
@
98.5205 307.396 mo
102.6 307.396 li
@
98.3675 290.116 mo
106.527 290.116 li
@
98.2275 273.076 mo
102.307 273.076 li
@
99.1525 255.795 mo
107.312 255.795 li
@
98.2275 238.515 mo
102.307 238.515 li
@
98.4375 221.235 mo
106.597 221.235 li
@
98.2275 203.956 mo
102.307 203.956 li
@
99.1525 186.676 mo
107.312 186.676 li
@
98.2275 169.636 mo
102.307 169.636 li
@
98.4375 152.356 mo
106.597 152.356 li
@
98.2275 135.076 mo
102.307 135.076 li
@
98.4375 117.796 mo
106.597 117.796 li
@
98.2275 100.516 mo
102.307 100.516 li
@
98.4375 83.2361 mo
106.597 83.2361 li
@
98.9425 66.1961 mo
103.022 66.1961 li
@
98.4375 48.9151 mo
106.597 48.9151 li
@
98.2275 31.6351 mo
102.307 31.6351 li
@
98.0185 428.116 mo
98.0185 14.3561 li
@
656.354 428.826 mo
656.354 15.0661 li
@
98.0145 14.8971 mo
656.496 14.8971 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+ArialMT def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (ArialMT) def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 114 /r put
dup 115 /s put
def
/FontBBox {-665 -325 2000 1006} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
11 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368
260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A
577DC235F833AFCC30669C812FBF097879E1> |-
/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A
2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D47
14AF52ABD0227B6CDD854C568D5A6F3817645C5> |-
/comma <1C60D8A8C9B854D0F42C7AF5C4668C35A6B5F5176B9FC6F495643D40
00A6D27DE0DDA4D01F0D89D11ABC5445CF8C34A3A1CF> |-
/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-
/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7D
C8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA
6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA
48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD
710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CE
C10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53
463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2
879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177
B5D88A> |-
/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE
9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7
BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C
344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D3654
8FE63FC8465B1B685766E782F0> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE11285789
4FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619AD
D420F549AB7C795751D32E8EE6> |-
/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F
80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2
BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD9
6538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1
B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB32
87CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B843
5558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F41
72D53C8FCAF4D28F2B78D3A4BF03> |-
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIXO+ArialMT /PBAAAA+ArialMT findfont ct_VMDictPut
/KGZIXO+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef 
/period 50{/.notdef}rp /a /.notdef /c /.notdef /e 12{/.notdef}rp 
/r /s 140{/.notdef}rp]
KGZIXO+ArialMT nf
KGZIXO+ArialMT*1 [19 0 0 -19 0 0 ]msf
116.083 409.748 mo
(\(a\))sh
60.4477 19.6382 mo
(.)sh
58.9011 432.417 mo
(.)sh
59.3191 398.798 mo
(.)sh
59.0835 363.217 mo
(.)sh
58.846 328.293 mo
(.)sh
59.2659 295.33 mo
(.)sh
59.0284 259.093 mo
(.)sh
58.7928 225.475 mo
(.)sh
59.2108 191.202 mo
(.)sh
58.9752 155.621 mo
(.)sh
58.7377 122.003 mo
(.)sh
59.8112 87.7304 mo
(.)sh
60.2292 53.4582 mo
(.)sh
%ADOBeginSubsetFont: HIBBAA+Arial-ItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Arial-ItalicMT def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (Arial-ItalicMT) def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 116 /t put
def
/FontBBox {-517 -325 1359 998} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/t <1C60D8A8C9B854D0F47C238C0374D9401BE88F4E827DBF6ACD1493D30155
5AE9FDB97705B5DEB246C70D14D40A9195312074E63C52F6E3D89F7577AB6EB9
D86C962D4AACF9757FAC6B7871A41A5812D02B983576BB62D7A8BC6D6B98DD85
59487E3FB838CA3E0A199191> |-
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIXP+Arial-ItalicMT /HIBBAA+Arial-ItalicMT findfont ct_VMDictPut
/KGZIXP+Arial-ItalicMT*1 
[116{/.notdef}rp /t 139{/.notdef}rp]
KGZIXP+Arial-ItalicMT nf
KGZIXP+Arial-ItalicMT*1 [19 0 0 -19 0 0 ]msf
375.285 483.715 mo
(t)sh
%ADOBeginSubsetFont: QJJAAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+CMMI10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMMI10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 189 /rho put
def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 453 466] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/rho <1C60D8A8C9B7B64404966C0C325AEC592C74D869AAAEA8459ABA9A0D18
FA1D8F7FB3870070B33DDB42B698DBF110506D1FCFF87661E4B4967FE22B3A58
24C61FDFF6D18064205A23AE17A2A0F931077A05F309918780135C9076C2E8AA
E79757267C6FEF193AE393FA85940B2495C80398A05285ADE646576D8DDA4C61
141ECEF33C46F1B43CE87DACED55> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIXQ+CMMI10 /QJJAAA+CMMI10 findfont ct_VMDictPut
/KGZIXQ+CMMI10*1 
[189{/.notdef}rp /rho 66{/.notdef}rp]
KGZIXQ+CMMI10 nf
KGZIXQ+CMMI10*1 [0 -22.91 -22.91 0 0 0 ]msf
16.0641 261.529 mo
(\275)sh
KGZIXO+ArialMT*1 [0 -19 -19 0 0 0 ]msf
16.2808 244.96 mo
(, arcsec)
[-5.28198 -5.28201 -10.564 -6.32684 -9.5 -9.5 -10.564 0 ]ysh
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 44 /comma put
dup 97 /a put
dup 101 /e put
dup 114 /r put
dup 115 /s put
dup 121 /y put
def
/FontBBox {-665 -325 2000 1006} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/space <1C60D8A8C9B854D00D> |-
/comma <1C60D8A8C9B854D0F42C7AF5C4668C35A6B5F5176B9FC6F495643D40
00A6D27DE0DDA4D01F0D89D11ABC5445CF8C34A3A1CF> |-
/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7D
C8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA
6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA
48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD
710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CE
C10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53
463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2
879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177
B5D88A> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE11285789
4FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619AD
D420F549AB7C795751D32E8EE6> |-
/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F
80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2
BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD9
6538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1
B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB32
87CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B843
5558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F41
72D53C8FCAF4D28F2B78D3A4BF03> |-
/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA
18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836
B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA734
8AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KGZIXR+ArialMT /ArialMT findfont ct_VMDictPut
/KGZIXR+ArialMT*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 52{/.notdef}rp /a 3{/.notdef}rp /e 
12{/.notdef}rp /r /s 5{/.notdef}rp /y 134{/.notdef}rp]
KGZIXR+ArialMT nf
KGZIXR+ArialMT*1 [19 0 0 -19 0 0 ]msf
383.659 483.821 mo
(, years)
[5.28198 5.28198 9.49997 10.564 10.564 6.32684 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/KGZIXO+ArialMT*1 uf
/KGZIXO+ArialMT uf
/PBAAAA+ArialMT uf
/KGZIXQ+CMMI10*1 uf
/KGZIXQ+CMMI10 uf
/QJJAAA+CMMI10 uf
/KGZIXR+ArialMT*1 uf
/KGZIXR+ArialMT uf
/ArialMT uf
/KGZIXP+Arial-ItalicMT*1 uf
/KGZIXP+Arial-ItalicMT uf
/HIBBAA+Arial-ItalicMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
